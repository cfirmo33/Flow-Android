[
  {
    "rendered_body": "<p>WebサイトやWebアプリケーションの文脈(フロント寄り)で、E2E関連ツールを整理してみます。いろいろありすぎるようでいて、「結局<a href=\"#selenium\">Selenium</a>かよっ」ていう話ですが...。ただ、クロスブラウザテストが不要であれば<a href=\"#nightmare\">Nightmare</a>だけで済ますってのは、非常に簡便な選択肢です。<a href=\"#webdriverio\">webdriver.io</a>にも注目。個人的な見解は<a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\">まとめ</a>参照。</p>\n\n<p><em>(当初『E2Eは「End to end」の略ですよ。まとめ』と題したのですが、「E2E」という用語がそれほど浸透していない?ようなので、改題しました)</em></p>\n\n<p>以下、目次を兼ねて並べてみました。E2Eの文脈でないものも一部含みますが、全体像を把握するために入れてあります。変なところあれば、コメントでご指摘くださいませ。</p>\n\n<table>\n<thead>\n<tr>\n<th style=\"text-align: left\">プロダクト</th>\n<th style=\"text-align: center\">タイプ</th>\n<th style=\"text-align: center\">エンジン</th>\n<th style=\"text-align: center\">開発言語</th>\n<th style=\"text-align: right\">GitHub★</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align: left\"><a href=\"#selenium\">Selenium</a></td>\n<td style=\"text-align: center\">クロスブラウザ</td>\n<td style=\"text-align: center\">各種</td>\n<td style=\"text-align: center\">Java</td>\n<td style=\"text-align: right\">3,977</td>\n</tr>\n<tr>\n<td style=\"text-align: left\"><a href=\"#dalekjs\">DalekJS</a></td>\n<td style=\"text-align: center\">クロスブラウザ</td>\n<td style=\"text-align: center\">各種</td>\n<td style=\"text-align: center\">JavaScript</td>\n<td style=\"text-align: right\">695</td>\n</tr>\n<tr>\n<td style=\"text-align: left\"><a href=\"#phantomjs\">PhantomJS</a></td>\n<td style=\"text-align: center\">ヘッドレス</td>\n<td style=\"text-align: center\">WebKit</td>\n<td style=\"text-align: center\">JavaScript</td>\n<td style=\"text-align: right\">18,941</td>\n</tr>\n<tr>\n<td style=\"text-align: left\"><a href=\"#slimerjs\">SlimerJS</a></td>\n<td style=\"text-align: center\">ヘッドレス</td>\n<td style=\"text-align: center\">Gecko</td>\n<td style=\"text-align: center\">JavaScript</td>\n<td style=\"text-align: right\">1,912</td>\n</tr>\n<tr>\n<td style=\"text-align: left\"><a href=\"#nightmare\">Nightmare</a></td>\n<td style=\"text-align: center\">ヘッドレス</td>\n<td style=\"text-align: center\">Electron</td>\n<td style=\"text-align: center\">JavaScript</td>\n<td style=\"text-align: right\">8,161</td>\n</tr>\n<tr>\n<td style=\"text-align: left\"><a href=\"#jsdom\">jsdom</a></td>\n<td style=\"text-align: center\">ヘッドレス</td>\n<td style=\"text-align: center\">n/a</td>\n<td style=\"text-align: center\">JavaScript</td>\n<td style=\"text-align: right\">6,194</td>\n</tr>\n<tr>\n<td style=\"text-align: left\"><a href=\"#nightwatch\">Nightwatch</a></td>\n<td style=\"text-align: center\">E2Eテスト</td>\n<td style=\"text-align: center\">WebDriver(独自)</td>\n<td style=\"text-align: center\">JavaScript</td>\n<td style=\"text-align: right\">4,727</td>\n</tr>\n<tr>\n<td style=\"text-align: left\"><a href=\"#protractor\">Protractor</a></td>\n<td style=\"text-align: center\">E2Eテスト</td>\n<td style=\"text-align: center\">WebDriver(*1)</td>\n<td style=\"text-align: center\">JavaScript</td>\n<td style=\"text-align: right\">5,683</td>\n</tr>\n<tr>\n<td style=\"text-align: left\"><a href=\"#webdriverio\">webdriver.io</a></td>\n<td style=\"text-align: center\">E2Eテスト</td>\n<td style=\"text-align: center\">WebDriver(*2)</td>\n<td style=\"text-align: center\">JavaScript</td>\n<td style=\"text-align: right\">2,055</td>\n</tr>\n<tr>\n<td style=\"text-align: left\"><a href=\"#codecept\">Codecept</a></td>\n<td style=\"text-align: center\">E2Eテスト</td>\n<td style=\"text-align: center\">WebDriver(*2)</td>\n<td style=\"text-align: center\">JavaScript</td>\n<td style=\"text-align: right\">656</td>\n</tr>\n<tr>\n<td style=\"text-align: left\"><a href=\"#chimp\">Chimp</a></td>\n<td style=\"text-align: center\">E2Eテスト</td>\n<td style=\"text-align: center\">WebDriver(*2)</td>\n<td style=\"text-align: center\">JavaScript</td>\n<td style=\"text-align: right\">385</td>\n</tr>\n<tr>\n<td style=\"text-align: left\"><a href=\"#karma\">Karma</a></td>\n<td style=\"text-align: center\">ユニットテスト<br>E2Eテスト</td>\n<td style=\"text-align: center\">各種ランチャー</td>\n<td style=\"text-align: center\">JavaScript</td>\n<td style=\"text-align: right\">7,337</td>\n</tr>\n<tr>\n<td style=\"text-align: left\"><a href=\"#casperjs\">CasperJS</a></td>\n<td style=\"text-align: center\">E2Eテスト</td>\n<td style=\"text-align: center\">PhantomJS/SlimerJS</td>\n<td style=\"text-align: center\">JavaScript</td>\n<td style=\"text-align: right\">5,854</td>\n</tr>\n<tr>\n<td style=\"text-align: left\"><a href=\"#zombie\">Zombie</a></td>\n<td style=\"text-align: center\">E2Eテスト</td>\n<td style=\"text-align: center\">jsdom</td>\n<td style=\"text-align: center\">JavaScript</td>\n<td style=\"text-align: right\">4,008</td>\n</tr>\n<tr>\n<td style=\"text-align: left\"><a href=\"#codeception\">Codeception</a></td>\n<td style=\"text-align: center\">E2Eテスト</td>\n<td style=\"text-align: center\">WebDriver</td>\n<td style=\"text-align: center\">PHP</td>\n<td style=\"text-align: right\">2,295</td>\n</tr>\n<tr>\n<td style=\"text-align: left\"><a href=\"#capybara\">Capybara</a></td>\n<td style=\"text-align: center\">E2Eテスト</td>\n<td style=\"text-align: center\">WebDriver/WebKit</td>\n<td style=\"text-align: center\">Ruby</td>\n<td style=\"text-align: right\">7,208</td>\n</tr>\n<tr>\n<td style=\"text-align: left\"><a href=\"#cucumber\">Cucumber</a></td>\n<td style=\"text-align: center\">E2Eテスト</td>\n<td style=\"text-align: center\"></td>\n<td style=\"text-align: center\">いろいろ</td>\n<td style=\"text-align: right\">2,143</td>\n</tr>\n<tr>\n<td style=\"text-align: left\"><a href=\"#fake\">Fake</a></td>\n<td style=\"text-align: center\">GUI</td>\n<td style=\"text-align: center\">WebKit</td>\n<td style=\"text-align: center\">n/a</td>\n<td style=\"text-align: right\">n/a</td>\n</tr>\n</tbody>\n</table>\n\n<ul>\n<li>GitHubのスターは2016年7月30日調べ。ただし、登場年によるバイアスが激しいので、この件に関してはあまり参考にならないですね...。</li>\n<li>*1: selenium-webdriver 実装</li>\n<li>*2: webdriver.io 実装</li>\n</ul>\n\n<h2>\n<span id=\"クロスブラウザテストプラットフォーム\" class=\"fragment\"></span><a href=\"#%E3%82%AF%E3%83%AD%E3%82%B9%E3%83%96%E3%83%A9%E3%82%A6%E3%82%B6%E3%83%86%E3%82%B9%E3%83%88%E3%83%97%E3%83%A9%E3%83%83%E3%83%88%E3%83%95%E3%82%A9%E3%83%BC%E3%83%A0\"><i class=\"fa fa-link\"></i></a>クロスブラウザ・テストプラットフォーム</h2>\n\n<h3>\n<span id=\"selenium\" class=\"fragment\"></span><a href=\"#selenium\"><i class=\"fa fa-link\"></i></a>Selenium</h3>\n\n<p>Selenium Standalone Server</p>\n\n<ul>\n<li><a href=\"http://www.seleniumhq.org/\" class=\"autolink\">http://www.seleniumhq.org/</a></li>\n<li><a href=\"https://github.com/SeleniumHQ/selenium\" class=\"autolink\">https://github.com/SeleniumHQ/selenium</a></li>\n<li>開発言語: Java 😱 (クライアントライブラリについては、複数言語存在)</li>\n</ul>\n\n<p><a href=\"https://qiita-image-store.s3.amazonaws.com/0/1858/d235c385-d2cc-1750-8b8d-83f895d35f2c.png\" target=\"_blank\"><img src=\"https://qiita-image-store.s3.amazonaws.com/0/1858/d235c385-d2cc-1750-8b8d-83f895d35f2c.png\" alt=\"1469875210-760A74E1-F145-4C14-9EBB-B991A06DFA46.png\" title=\"1469875210-760A74E1-F145-4C14-9EBB-B991A06DFA46.png\"></a></p>\n\n<h3>\n<span id=\"dalekjs\" class=\"fragment\"></span><a href=\"#dalekjs\"><i class=\"fa fa-link\"></i></a>DalekJS</h3>\n\n<p>もともとSeleniumのインターフェースだったWebDriverを、Node環境で独自実装したもの。すごく期待していたんですが、開発止まってる...😱 (誰かその後を知りませんか?)</p>\n\n<ul>\n<li><a href=\"http://dalekjs.com/\" class=\"autolink\">http://dalekjs.com/</a></li>\n<li><a href=\"https://github.com/dalekjs/dalek\" class=\"autolink\">https://github.com/dalekjs/dalek</a></li>\n<li>開発言語: JavaScript</li>\n</ul>\n\n<p><a href=\"https://qiita-image-store.s3.amazonaws.com/0/1858/590f6e2d-f2d2-2e79-b380-4ee530080a10.png\" target=\"_blank\"><img src=\"https://qiita-image-store.s3.amazonaws.com/0/1858/590f6e2d-f2d2-2e79-b380-4ee530080a10.png\" alt=\"1469875176-6B670F74-5CE4-44A9-9DB0-734BC6DE47CC.png\" title=\"1469875176-6B670F74-5CE4-44A9-9DB0-734BC6DE47CC.png\"></a></p>\n\n<h2>\n<span id=\"ヘッドレスブラウザ\" class=\"fragment\"></span><a href=\"#%E3%83%98%E3%83%83%E3%83%89%E3%83%AC%E3%82%B9%E3%83%96%E3%83%A9%E3%82%A6%E3%82%B6\"><i class=\"fa fa-link\"></i></a>ヘッドレスブラウザ</h2>\n\n<p>クロスブラウザテストは、時間とお金がかかります。そこで、一般的なのが次の布陣です。GitHubで受け付けるプルリクエストも、Travisまでにしておいてクロスブラウザテストを省略することが多いようですね。</p>\n\n<ul>\n<li>ローカル: ヘッドレスブラウザ</li>\n<li>Travisとか: ヘッドレスブラウザ</li>\n<li>BrowserStack / Saucelabs: クロスブラウザ</li>\n</ul>\n\n<p>しばらく、PhantomJS一択だったのですが、v1.9で永らく足踏みしていた結果、ES5対応も不完全な状態が続いたため、React勢からは完全に見放され「もうjsdomだけでいいよ」的な風潮が生まれたりします。2016年になって無事、PhantomJSもバージョンアップを果たしv2に。ベースとなるWebKitが新しくなりだいぶ使いやすくなりました。</p>\n\n<p>しかし、PhantomJSは早晩、Chromeの度重なるアップデートに着いていけなくなりそうな気配もあります(誰か「違う」と言って!)。ダークホースだったのがElectronで、これをブラウザの代わりに使おうという動きがここしばらく活発です。単体で使うならNightmare押し。ただ、SeleniumからElectronを使うルートがまだいまいち確立されていない2016年夏現在です。</p>\n\n<h3>\n<span id=\"phantomjs\" class=\"fragment\"></span><a href=\"#phantomjs\"><i class=\"fa fa-link\"></i></a>PhantomJS</h3>\n\n<ul>\n<li><a href=\"http://phantomjs.org/\" class=\"autolink\">http://phantomjs.org/</a></li>\n<li><a href=\"https://github.com/ariya/phantomjs/\" class=\"autolink\">https://github.com/ariya/phantomjs/</a></li>\n<li>WebKit</li>\n</ul>\n\n<p><a href=\"https://qiita-image-store.s3.amazonaws.com/0/1858/43295940-0aae-a06f-2d45-325aa9687a3e.png\" target=\"_blank\"><img src=\"https://qiita-image-store.s3.amazonaws.com/0/1858/43295940-0aae-a06f-2d45-325aa9687a3e.png\" alt=\"1469875336-C65653E5-65A1-4D77-851F-14E84C651915.png\" title=\"1469875336-C65653E5-65A1-4D77-851F-14E84C651915.png\"></a></p>\n\n<h3>\n<span id=\"slimerjs\" class=\"fragment\"></span><a href=\"#slimerjs\"><i class=\"fa fa-link\"></i></a>SlimerJS</h3>\n\n<ul>\n<li><a href=\"https://slimerjs.org/\" class=\"autolink\">https://slimerjs.org/</a></li>\n<li><a href=\"https://github.com/laurentj/slimerjs/\" class=\"autolink\">https://github.com/laurentj/slimerjs/</a></li>\n<li>Gecko and SpiderMonkey</li>\n</ul>\n\n<p><a href=\"https://qiita-image-store.s3.amazonaws.com/0/1858/e7ee6393-02ef-4e5f-3476-8c2482cd2afe.png\" target=\"_blank\"><img src=\"https://qiita-image-store.s3.amazonaws.com/0/1858/e7ee6393-02ef-4e5f-3476-8c2482cd2afe.png\" alt=\"1469875248-DC365F04-0B90-47A6-B28A-42B7E010DCF2.png\" title=\"1469875248-DC365F04-0B90-47A6-B28A-42B7E010DCF2.png\"></a></p>\n\n<h3>\n<span id=\"nightmare\" class=\"fragment\"></span><a href=\"#nightmare\"><i class=\"fa fa-link\"></i></a>Nightmare</h3>\n\n<p>最近、エンジンをPhantomJSからElectronに切り替えて注目が集まっている。これ自体でE2Eツールとしても十分使える。</p>\n\n<ul>\n<li><a href=\"https://github.com/ariya/phantomjs/\" class=\"autolink\">https://github.com/ariya/phantomjs/</a></li>\n<li><a href=\"https://github.com/segmentio/nightmare\" class=\"autolink\">https://github.com/segmentio/nightmare</a></li>\n<li>Electron</li>\n</ul>\n\n<p><a href=\"https://qiita-image-store.s3.amazonaws.com/0/1858/babf3ddf-cf24-0637-824f-5b7decfd5d1f.png\" target=\"_blank\"><img src=\"https://qiita-image-store.s3.amazonaws.com/0/1858/babf3ddf-cf24-0637-824f-5b7decfd5d1f.png\" alt=\"1469874876-0CE1A3B7-60B0-4FA2-9F07-8FD4FF7A0297.png\" title=\"1469874876-0CE1A3B7-60B0-4FA2-9F07-8FD4FF7A0297.png\"></a></p>\n\n<h3>\n<span id=\"jsdom\" class=\"fragment\"></span><a href=\"#jsdom\"><i class=\"fa fa-link\"></i></a>jsdom</h3>\n\n<p>Reactのテストでよく使われる。</p>\n\n<ul>\n<li><a href=\"https://github.com/tmpvar/jsdom\" class=\"autolink\">https://github.com/tmpvar/jsdom</a></li>\n<li>WHATWG DOM と HTML のJavaScriptによる実装。</li>\n</ul>\n\n<h2>\n<span id=\"e2eテストツール\" class=\"fragment\"></span><a href=\"#e2e%E3%83%86%E3%82%B9%E3%83%88%E3%83%84%E3%83%BC%E3%83%AB\"><i class=\"fa fa-link\"></i></a>E2Eテストツール</h2>\n\n<h3>\n<span id=\"nightwatch\" class=\"fragment\"></span><a href=\"#nightwatch\"><i class=\"fa fa-link\"></i></a>Nightwatch</h3>\n\n<p>総合的なE2Eテストツール。WebDriver実装(独自)と、アサーションライブラリが一体となっているのが、使いやすいような使いにくいような。</p>\n\n<ul>\n<li><a href=\"http://nightwatchjs.org/\" class=\"autolink\">http://nightwatchjs.org/</a></li>\n<li><a href=\"https://github.com/nightwatchjs/nightwatch\" class=\"autolink\">https://github.com/nightwatchjs/nightwatch</a></li>\n</ul>\n\n<p><a href=\"https://qiita-image-store.s3.amazonaws.com/0/1858/290d7b95-7d1c-b446-efc3-95abd920a80c.png\" target=\"_blank\"><img src=\"https://qiita-image-store.s3.amazonaws.com/0/1858/290d7b95-7d1c-b446-efc3-95abd920a80c.png\" alt=\"1469874902-11B0E1E5-0769-4D80-BFBA-F7292E366860.png\" title=\"1469874902-11B0E1E5-0769-4D80-BFBA-F7292E366860.png\"></a></p>\n\n<p>書き方はこんな感じ。</p>\n\n<div class=\"code-frame\" data-lang=\"javascript\"><div class=\"highlight\"><pre>\n<span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"s1\">'Demo test Google'</span> <span class=\"o\">:</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">client</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">client</span>\n      <span class=\"p\">.</span><span class=\"nx\">url</span><span class=\"p\">(</span><span class=\"s1\">'http://www.google.com'</span><span class=\"p\">)</span>\n      <span class=\"p\">.</span><span class=\"nx\">waitForElementVisible</span><span class=\"p\">(</span><span class=\"s1\">'body'</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">)</span>\n      <span class=\"p\">.</span><span class=\"nx\">assert</span><span class=\"p\">.</span><span class=\"nx\">title</span><span class=\"p\">(</span><span class=\"s1\">'Google'</span><span class=\"p\">)</span>\n      <span class=\"p\">.</span><span class=\"nx\">assert</span><span class=\"p\">.</span><span class=\"nx\">visible</span><span class=\"p\">(</span><span class=\"s1\">'input[type=text]'</span><span class=\"p\">)</span>\n      <span class=\"p\">.</span><span class=\"nx\">setValue</span><span class=\"p\">(</span><span class=\"s1\">'input[type=text]'</span><span class=\"p\">,</span> <span class=\"s1\">'rembrandt van rijn'</span><span class=\"p\">)</span>\n      <span class=\"p\">.</span><span class=\"nx\">waitForElementVisible</span><span class=\"p\">(</span><span class=\"s1\">'button[name=btnG]'</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">)</span>\n      <span class=\"p\">.</span><span class=\"nx\">click</span><span class=\"p\">(</span><span class=\"s1\">'button[name=btnG]'</span><span class=\"p\">)</span>\n      <span class=\"p\">.</span><span class=\"nx\">pause</span><span class=\"p\">(</span><span class=\"mi\">1000</span><span class=\"p\">)</span>\n      <span class=\"p\">.</span><span class=\"nx\">assert</span><span class=\"p\">.</span><span class=\"nx\">containsText</span><span class=\"p\">(</span><span class=\"s1\">'ol#rso li:first-child'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'Rembrandt - Wikipedia'</span><span class=\"p\">)</span>\n      <span class=\"p\">.</span><span class=\"nx\">end</span><span class=\"p\">();</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</pre></div></div>\n\n<h3>\n<span id=\"protractor\" class=\"fragment\"></span><a href=\"#protractor\"><i class=\"fa fa-link\"></i></a>Protractor</h3>\n\n<p>UIテストの定番。AngularJSのために作られたフレームワーク。AngularJS以外からだと、余計な機能もあるが、Reactなどと合わせて使う人も多い。内部的には、<a href=\"https://www.npmjs.com/package/selenium-webdriver\">selenium-webdriver</a>を使っている。</p>\n\n<ul>\n<li><a href=\"http://www.protractortest.org/\" class=\"autolink\">http://www.protractortest.org/</a></li>\n<li><a href=\"https://github.com/angular/protractor\" class=\"autolink\">https://github.com/angular/protractor</a></li>\n</ul>\n\n<p><a href=\"https://qiita-image-store.s3.amazonaws.com/0/1858/8206915f-8359-d52a-0e5c-055f16d6b994.png\" target=\"_blank\"><img src=\"https://qiita-image-store.s3.amazonaws.com/0/1858/8206915f-8359-d52a-0e5c-055f16d6b994.png\" alt=\"1469874926-E9969026-C0A4-40C7-A1B9-F85FC43C51BD.png\" title=\"1469874926-E9969026-C0A4-40C7-A1B9-F85FC43C51BD.png\"></a></p>\n\n<p>実際のテストはこんな感じ。テストフレームワークのデフォルトは<a href=\"http://jasmine.github.io/\">Jasmine</a>だけど、他のと組み合わせてもOK。Mochaとか。</p>\n\n<div class=\"code-frame\" data-lang=\"javascript\"><div class=\"highlight\"><pre>\n<span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s1\">'angularjs homepage todo list'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'should add a todo'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">browser</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">(</span><span class=\"s1\">'https://angularjs.org'</span><span class=\"p\">);</span>\n\n    <span class=\"nx\">element</span><span class=\"p\">(</span><span class=\"nx\">by</span><span class=\"p\">.</span><span class=\"nx\">model</span><span class=\"p\">(</span><span class=\"s1\">'todoList.todoText'</span><span class=\"p\">)).</span><span class=\"nx\">sendKeys</span><span class=\"p\">(</span><span class=\"s1\">'write first protractor test'</span><span class=\"p\">);</span>\n    <span class=\"nx\">element</span><span class=\"p\">(</span><span class=\"nx\">by</span><span class=\"p\">.</span><span class=\"nx\">css</span><span class=\"p\">(</span><span class=\"s1\">'[value=\"add\"]'</span><span class=\"p\">)).</span><span class=\"nx\">click</span><span class=\"p\">();</span>\n\n    <span class=\"kd\">var</span> <span class=\"nx\">todoList</span> <span class=\"o\">=</span> <span class=\"nx\">element</span><span class=\"p\">.</span><span class=\"nx\">all</span><span class=\"p\">(</span><span class=\"nx\">by</span><span class=\"p\">.</span><span class=\"nx\">repeater</span><span class=\"p\">(</span><span class=\"s1\">'todo in todoList.todos'</span><span class=\"p\">));</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">todoList</span><span class=\"p\">.</span><span class=\"nx\">count</span><span class=\"p\">()).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">);</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">todoList</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">).</span><span class=\"nx\">getText</span><span class=\"p\">()).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"s1\">'write first protractor test'</span><span class=\"p\">);</span>\n\n    <span class=\"c1\">// You wrote your first test, cross it off the list</span>\n    <span class=\"nx\">todoList</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">).</span><span class=\"nx\">element</span><span class=\"p\">(</span><span class=\"nx\">by</span><span class=\"p\">.</span><span class=\"nx\">css</span><span class=\"p\">(</span><span class=\"s1\">'input'</span><span class=\"p\">)).</span><span class=\"nx\">click</span><span class=\"p\">();</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">completedAmount</span> <span class=\"o\">=</span> <span class=\"nx\">element</span><span class=\"p\">.</span><span class=\"nx\">all</span><span class=\"p\">(</span><span class=\"nx\">by</span><span class=\"p\">.</span><span class=\"nx\">css</span><span class=\"p\">(</span><span class=\"s1\">'.done-true'</span><span class=\"p\">));</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">completedAmount</span><span class=\"p\">.</span><span class=\"nx\">count</span><span class=\"p\">()).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">);</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">});</span>\n</pre></div></div>\n\n<h3>\n<span id=\"webdriverio\" class=\"fragment\"></span><a href=\"#webdriverio\"><i class=\"fa fa-link\"></i></a>webdriver.io</h3>\n\n<p>Selenium 2.0 bindings for NodeJS。公式の<a href=\"https://www.npmjs.com/package/selenium-webdriver\">selenium-webdriver</a>より、だいぶ書きやすい。あくまでもブラウザの自動化ツールなので、テストフレームワークは自分の好きなものと組み合わせて使う。ちなみに、Codecept・Chimp・Spectronなどは、内部的にこのwebdriver.ioを使っている。</p>\n\n<ul>\n<li><a href=\"http://webdriver.io/\" class=\"autolink\">http://webdriver.io/</a></li>\n<li><a href=\"https://github.com/webdriverio/webdriverio\" class=\"autolink\">https://github.com/webdriverio/webdriverio</a></li>\n</ul>\n\n<p><a href=\"https://qiita-image-store.s3.amazonaws.com/0/1858/287f96b7-82c0-dc93-c0b7-9c9ede5d6ae2.png\" target=\"_blank\"><img src=\"https://qiita-image-store.s3.amazonaws.com/0/1858/287f96b7-82c0-dc93-c0b7-9c9ede5d6ae2.png\" alt=\"1469882980-B0F0D94F-FB03-43F3-ADEB-4E9A6AD8F435.png\" title=\"1469882980-B0F0D94F-FB03-43F3-ADEB-4E9A6AD8F435.png\"></a></p>\n\n<p>書き方はこんな感じ。</p>\n\n<div class=\"code-frame\" data-lang=\"javascript\"><div class=\"highlight\"><pre>\n<span class=\"nx\">browser</span>\n  <span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">(</span><span class=\"s2\">\"http://www.google.com\"</span><span class=\"p\">)</span>\n  <span class=\"p\">.</span><span class=\"nx\">elementById</span><span class=\"p\">(</span><span class=\"s1\">'q'</span><span class=\"p\">)</span>\n  <span class=\"p\">.</span><span class=\"nx\">sendKeys</span><span class=\"p\">(</span><span class=\"s1\">'webdriver'</span><span class=\"p\">)</span>\n  <span class=\"p\">.</span><span class=\"nx\">elementById</span><span class=\"p\">(</span><span class=\"s1\">'btnG'</span><span class=\"p\">)</span>\n  <span class=\"p\">.</span><span class=\"nx\">click</span><span class=\"p\">()</span>\n</pre></div></div>\n\n<h3>\n<span id=\"codeceptjs\" class=\"fragment\"></span><a href=\"#codeceptjs\"><i class=\"fa fa-link\"></i></a>CodeceptJS</h3>\n\n<p>比較的後発で、Codeception(PHP製)を元に作られたJavaScriptのツール。「同期的に」書けるのがウリ。ただ、書き方が独特なので好き嫌いが分かれそう。</p>\n\n<ul>\n<li><a href=\"http://codecept.io/\" class=\"autolink\">http://codecept.io/</a></li>\n<li><a href=\"https://github.com/codeception/codeceptjs/\" class=\"autolink\">https://github.com/codeception/codeceptjs/</a></li>\n</ul>\n\n<p><a href=\"https://qiita-image-store.s3.amazonaws.com/0/1858/d5eb0c86-aa05-b425-fdcb-a37a9e5ab49b.png\" target=\"_blank\"><img src=\"https://qiita-image-store.s3.amazonaws.com/0/1858/d5eb0c86-aa05-b425-fdcb-a37a9e5ab49b.png\" alt=\"1469875072-1FC56365-6FBC-445C-A303-65D1EE5384F5.png\" title=\"1469875072-1FC56365-6FBC-445C-A303-65D1EE5384F5.png\"></a></p>\n\n<p>実際のテストはこんな感じ。</p>\n\n<div class=\"code-frame\" data-lang=\"javascript\"><div class=\"highlight\"><pre>\n<span class=\"nx\">Feature</span><span class=\"p\">(</span><span class=\"s1\">'CodeceptJS Demonstration'</span><span class=\"p\">);</span>\n\n<span class=\"nx\">Scenario</span><span class=\"p\">(</span><span class=\"s1\">'submit form successfully'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">I</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span>\n  <span class=\"nx\">I</span><span class=\"p\">.</span><span class=\"nx\">amOnPage</span><span class=\"p\">(</span><span class=\"s1\">'/documentation'</span><span class=\"p\">)</span>\n  <span class=\"nx\">I</span><span class=\"p\">.</span><span class=\"nx\">fillField</span><span class=\"p\">(</span><span class=\"s1\">'Email'</span><span class=\"p\">,</span> <span class=\"s1\">'hello@world.com'</span><span class=\"p\">)</span>\n  <span class=\"nx\">I</span><span class=\"p\">.</span><span class=\"nx\">fillField</span><span class=\"p\">(</span><span class=\"s1\">'Password'</span><span class=\"p\">,</span> <span class=\"s1\">'123456'</span><span class=\"p\">)</span>\n  <span class=\"nx\">I</span><span class=\"p\">.</span><span class=\"nx\">checkOption</span><span class=\"p\">(</span><span class=\"s1\">'Active'</span><span class=\"p\">)</span>\n  <span class=\"nx\">I</span><span class=\"p\">.</span><span class=\"nx\">checkOption</span><span class=\"p\">(</span><span class=\"s1\">'Male'</span><span class=\"p\">);</span>\n  <span class=\"nx\">I</span><span class=\"p\">.</span><span class=\"nx\">click</span><span class=\"p\">(</span><span class=\"s1\">'Create User'</span><span class=\"p\">)</span>\n  <span class=\"nx\">I</span><span class=\"p\">.</span><span class=\"nx\">see</span><span class=\"p\">(</span><span class=\"s1\">'User is valid'</span><span class=\"p\">)</span>\n  <span class=\"nx\">I</span><span class=\"p\">.</span><span class=\"nx\">dontSeeInCurrentUrl</span><span class=\"p\">(</span><span class=\"s1\">'/documentation'</span><span class=\"p\">)</span>\n<span class=\"p\">});</span>\n</pre></div></div>\n\n<h3>\n<span id=\"karma\" class=\"fragment\"></span><a href=\"#karma\"><i class=\"fa fa-link\"></i></a>Karma</h3>\n\n<p>AngularJSのために生まれたテストフレームワーク。E2Eというより、ユニットテスト的な使い方が基本。ただ、境界はあいまいなので、E2E的に使っているケースもあり。<code>launcher</code>を切り替えることで様々なブラウザが使え、<a href=\"https://github.com/karma-runner/karma-phantomjs-launcher\">PhantomJS</a>や<a href=\"https://github.com/twolfson/karma-electron\">Electron</a>でのヘッドレステストも可能。</p>\n\n<ul>\n<li><a href=\"https://karma-runner.github.io\" class=\"autolink\">https://karma-runner.github.io</a></li>\n<li><a href=\"https://github.com/karma-runner/karma/\" class=\"autolink\">https://github.com/karma-runner/karma/</a></li>\n</ul>\n\n<p><a href=\"https://qiita-image-store.s3.amazonaws.com/0/1858/6114d26c-d431-8dfa-7bf1-296dcd0c5bf8.png\" target=\"_blank\"><img src=\"https://qiita-image-store.s3.amazonaws.com/0/1858/6114d26c-d431-8dfa-7bf1-296dcd0c5bf8.png\" alt=\"1469878025-F3E93481-D1D7-4DDF-BDC9-9D5AED659D05.png\" title=\"1469878025-F3E93481-D1D7-4DDF-BDC9-9D5AED659D05.png\"></a></p>\n\n<h3>\n<span id=\"chimp\" class=\"fragment\"></span><a href=\"#chimp\"><i class=\"fa fa-link\"></i></a>Chimp</h3>\n\n<ul>\n<li><a href=\"https://chimp.readme.io/\" class=\"autolink\">https://chimp.readme.io/</a></li>\n<li><a href=\"https://github.com/xolvio/chimp\" class=\"autolink\">https://github.com/xolvio/chimp</a></li>\n</ul>\n\n<p><a href=\"https://qiita-image-store.s3.amazonaws.com/0/1858/d056e7ca-6e24-8cc3-36a2-9066cf974d24.png\" target=\"_blank\"><img src=\"https://qiita-image-store.s3.amazonaws.com/0/1858/d056e7ca-6e24-8cc3-36a2-9066cf974d24.png\" alt=\"1469884023-2A9CC8CC-D071-410D-9DBC-9BC50552C6CB.png\" title=\"1469884023-2A9CC8CC-D071-410D-9DBC-9BC50552C6CB.png\"></a></p>\n\n<h3>\n<span id=\"casperjs\" class=\"fragment\"></span><a href=\"#casperjs\"><i class=\"fa fa-link\"></i></a>CasperJS</h3>\n\n<p>PhantomJSとSlimerJSを透過的に使えるツール。でも、モバイルどうするの...。</p>\n\n<ul>\n<li><a href=\"http://casperjs.org/\" class=\"autolink\">http://casperjs.org/</a></li>\n<li><a href=\"https://github.com/casperjs/casperjs\" class=\"autolink\">https://github.com/casperjs/casperjs</a></li>\n</ul>\n\n<p><a href=\"https://qiita-image-store.s3.amazonaws.com/0/1858/f5b7c3a9-eadc-975d-2ca5-1dbf4de554e5.png\" target=\"_blank\"><img src=\"https://qiita-image-store.s3.amazonaws.com/0/1858/f5b7c3a9-eadc-975d-2ca5-1dbf4de554e5.png\" alt=\"1469875272-A4667953-A25F-4825-9634-8659E0E22BC4.png\" title=\"1469875272-A4667953-A25F-4825-9634-8659E0E22BC4.png\"></a></p>\n\n<h3>\n<span id=\"zonbie\" class=\"fragment\"></span><a href=\"#zonbie\"><i class=\"fa fa-link\"></i></a>Zonbie</h3>\n\n<p>jsdomベースのテストツール。そろそろ開発止まってる...?</p>\n\n<ul>\n<li><a href=\"http://zombie.js.org/\" class=\"autolink\">http://zombie.js.org/</a></li>\n<li><a href=\"https://github.com/assaf/zombie\" class=\"autolink\">https://github.com/assaf/zombie</a></li>\n</ul>\n\n<p><a href=\"https://qiita-image-store.s3.amazonaws.com/0/1858/94e0d292-2ab6-cc32-0ee9-d7f611585b8d.png\" target=\"_blank\"><img src=\"https://qiita-image-store.s3.amazonaws.com/0/1858/94e0d292-2ab6-cc32-0ee9-d7f611585b8d.png\" alt=\"1469885202-6F57F49C-8EDB-46BD-8738-59615D8D14A6.png\" title=\"1469885202-6F57F49C-8EDB-46BD-8738-59615D8D14A6.png\"></a></p>\n\n<h3>\n<span id=\"codeception\" class=\"fragment\"></span><a href=\"#codeception\"><i class=\"fa fa-link\"></i></a>Codeception</h3>\n\n<ul>\n<li><a href=\"http://codeception.com/\" class=\"autolink\">http://codeception.com/</a></li>\n<li><a href=\"https://github.com/codeception/codeception\" class=\"autolink\">https://github.com/codeception/codeception</a></li>\n<li>開発言語はPHP</li>\n</ul>\n\n<p><a href=\"https://qiita-image-store.s3.amazonaws.com/0/1858/7bd88eae-4d6f-9e9c-4c21-d42ed923dd11.png\" target=\"_blank\"><img src=\"https://qiita-image-store.s3.amazonaws.com/0/1858/7bd88eae-4d6f-9e9c-4c21-d42ed923dd11.png\" alt=\"1469875629-F3ABB3DF-E36E-49B2-9BEB-D006EA9BEDC9.png\" title=\"1469875629-F3ABB3DF-E36E-49B2-9BEB-D006EA9BEDC9.png\"></a></p>\n\n<h3>\n<span id=\"capybara\" class=\"fragment\"></span><a href=\"#capybara\"><i class=\"fa fa-link\"></i></a>Capybara</h3>\n\n<ul>\n<li><a href=\"http://jnicklas.github.io/capybara/\" class=\"autolink\">http://jnicklas.github.io/capybara/</a></li>\n<li>開発言語はRuby</li>\n</ul>\n\n<p><a href=\"https://qiita-image-store.s3.amazonaws.com/0/1858/359f7346-41d8-6875-9dc4-984493e71eb5.png\" target=\"_blank\"><img src=\"https://qiita-image-store.s3.amazonaws.com/0/1858/359f7346-41d8-6875-9dc4-984493e71eb5.png\" alt=\"1469874375-3EF89F1A-A323-4927-AAB3-9AF352B96855.png\" title=\"1469874375-3EF89F1A-A323-4927-AAB3-9AF352B96855.png\"></a></p>\n\n<h3>\n<span id=\"cucumber\" class=\"fragment\"></span><a href=\"#cucumber\"><i class=\"fa fa-link\"></i></a>Cucumber</h3>\n\n<p>異次元方向に向かっているのがCucumber。JavaScript実装も存在する。</p>\n\n<ul>\n<li><a href=\"https://cucumber.io/\" class=\"autolink\">https://cucumber.io/</a></li>\n<li><a href=\"https://github.com/cucumber/cucumber-js\" class=\"autolink\">https://github.com/cucumber/cucumber-js</a></li>\n</ul>\n\n<p><a href=\"https://qiita-image-store.s3.amazonaws.com/0/1858/7c92161d-8cda-caaf-7e79-14f02d05bb90.png\" target=\"_blank\"><img src=\"https://qiita-image-store.s3.amazonaws.com/0/1858/7c92161d-8cda-caaf-7e79-14f02d05bb90.png\" alt=\"1469894429-4FDC2B81-3134-4539-8BA9-D69255B455BF.png\" title=\"1469894429-4FDC2B81-3134-4539-8BA9-D69255B455BF.png\"></a></p>\n\n<p>Gherkinという自然言語風味なDSLで書く。</p>\n\n<div class=\"code-frame\" data-lang=\"gherkin\"><div class=\"highlight\"><pre>\n<span class=\"c\"># features/my_feature.feature</span><span class=\"nf\"></span>\n\n<span class=\"k\">Feature:</span><span class=\"nf\"> Example feature</span>\n<span class=\"nf\">  As a user of Cucumber.js</span>\n<span class=\"nf\">  I want to have documentation on Cucumber</span>\n<span class=\"nf\">  So that I can concentrate on building awesome applications</span>\n\n<span class=\"nf\">  </span><span class=\"k\">Scenario:</span><span class=\"nf\"> Reading documentation</span>\n<span class=\"k\">    Given </span><span class=\"nf\">I am on the Cucumber.js GitHub repository</span>\n<span class=\"nf\">    </span><span class=\"k\">When </span><span class=\"nf\">I go to the README file</span>\n<span class=\"nf\">    </span><span class=\"k\">Then </span><span class=\"nf\">I should see \"</span><span class=\"s\">Usage</span><span class=\"nf\">\" as the page title</span>\n</pre></div></div>\n\n<h2>\n<span id=\"まとめ\" class=\"fragment\"></span><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\"><i class=\"fa fa-link\"></i></a>まとめ</h2>\n\n<p>Seleniumから脱却したい気持ちは大きいですが、しばらくは使わざるを得ないようです。ただ、Nightwatch・ProtractorをはじめWebDriverクライアントの使い勝手はだいぶ向上しました。第二のWebDriver実装である<code>webdriver.io</code>は、単体で相当シンプルに書けるようになったので、もうラッパーライブラリを使う必要もないかもしれません。</p>\n\n<p>個人的には、しばらく次のような方針で行こうかと思っています。<a href=\"https://github.com/avajs/ava\">ava</a>か<a href=\"https://github.com/substack/tape\">tape</a>あたりと組み合わせて。<a href=\"https://mochajs.org/\">mocha</a>でもよし。</p>\n\n<ul>\n<li>シンプルなライブラリ開発: <a href=\"#nightmare\">Nightmare</a>\n</li>\n<li>クロスブラウザテストが必要なケース: <a href=\"#webdriverio\">webdriver.io</a>\n</li>\n</ul>\n\n<h2>\n<span id=\"appendix\" class=\"fragment\"></span><a href=\"#appendix\"><i class=\"fa fa-link\"></i></a>Appendix</h2>\n\n<p>以下は、一応メモしておくぐらい。ご参考まで。</p>\n\n<h3>\n<span id=\"クラウドサービス\" class=\"fragment\"></span><a href=\"#%E3%82%AF%E3%83%A9%E3%82%A6%E3%83%89%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9\"><i class=\"fa fa-link\"></i></a>クラウドサービス</h3>\n\n<p>Seleniumをローカルに立ち上げたくない僕らのためのサービス。モバイルを含めたブラウザの種類が充実。基本有料だけど、オープンソースブロジェクトはたいてい無料。</p>\n\n<h4>\n<span id=\"browserstack\" class=\"fragment\"></span><a href=\"#browserstack\"><i class=\"fa fa-link\"></i></a>BrowserStack</h4>\n\n<ul>\n<li><a href=\"https://www.browserstack.com/\" class=\"autolink\">https://www.browserstack.com/</a></li>\n</ul>\n\n<p><a href=\"https://qiita-image-store.s3.amazonaws.com/0/1858/4ff9a54d-6fe5-149a-a7fa-75409e28e914.png\" target=\"_blank\"><img src=\"https://qiita-image-store.s3.amazonaws.com/0/1858/4ff9a54d-6fe5-149a-a7fa-75409e28e914.png\" alt=\"1469875110-29C2E3BB-48D0-49FC-A987-4E37D37071CC.png\" title=\"1469875110-29C2E3BB-48D0-49FC-A987-4E37D37071CC.png\"></a></p>\n\n<h4>\n<span id=\"saucelabs\" class=\"fragment\"></span><a href=\"#saucelabs\"><i class=\"fa fa-link\"></i></a>Saucelabs</h4>\n\n<ul>\n<li><a href=\"https://saucelabs.com/\" class=\"autolink\">https://saucelabs.com/</a></li>\n</ul>\n\n<p><a href=\"https://qiita-image-store.s3.amazonaws.com/0/1858/f0b61e54-ed6f-71fd-e392-a4dfcb45710f.png\" target=\"_blank\"><img src=\"https://qiita-image-store.s3.amazonaws.com/0/1858/f0b61e54-ed6f-71fd-e392-a4dfcb45710f.png\" alt=\"1469875017-06238D38-F6C6-4445-B4D0-A3381C33506C.png\" title=\"1469875017-06238D38-F6C6-4445-B4D0-A3381C33506C.png\"></a></p>\n\n<h4>\n<span id=\"その他\" class=\"fragment\"></span><a href=\"#%E3%81%9D%E3%81%AE%E4%BB%96\"><i class=\"fa fa-link\"></i></a>その他</h4>\n\n<ul>\n<li>TestingBot <a href=\"https://testingbot.com/\" class=\"autolink\">https://testingbot.com/</a>\n</li>\n<li>Rainforest QA <a href=\"https://www.rainforestqa.com/\" class=\"autolink\">https://www.rainforestqa.com/</a>\n</li>\n</ul>\n\n<p>ほか、結構いっぱいあります。</p>\n\n<h3>\n<span id=\"webdriver\" class=\"fragment\"></span><a href=\"#webdriver\"><i class=\"fa fa-link\"></i></a>WebDriver</h3>\n\n<p>Seleniumと<a href=\"http://www.seleniumhq.org/projects/webdriver/\">WebDriver</a>の関係性がややこしく感じるけれど、要はこういうこと。</p>\n\n<blockquote>\n<p>Selenium 1.0 + WebDriver = Selenium 2.0</p>\n</blockquote>\n\n<p>WebDriverはSeleniumのインターフェースで、<a href=\"https://www.w3.org/TR/webdriver/\">W3Cでも標準化が進められている</a>。各種ブラウザに対応したドライバが存在する。</p>\n\n<ul>\n<li>ChromeDriver</li>\n<li>FirefoxDriver</li>\n<li>InternetExplorerDriver</li>\n<li>PhantomJSDriver (=<a href=\"https://github.com/detro/ghostdriver\">GhostDriver</a>) すでに開発中止</li>\n<li>SafariDriver</li>\n</ul>\n\n<p>など。</p>\n\n<h3>\n<span id=\"fake-gui\" class=\"fragment\"></span><a href=\"#fake-gui\"><i class=\"fa fa-link\"></i></a>Fake (GUI)</h3>\n\n<ul>\n<li><a href=\"http://fakeapp.com/\" class=\"autolink\">http://fakeapp.com/</a></li>\n<li>WebKitベース</li>\n<li>動作環境: Mac OS X</li>\n</ul>\n\n<p><a href=\"https://qiita-image-store.s3.amazonaws.com/0/1858/2b08e582-b6f2-6a8f-57ba-ce74b1dd0545.png\" target=\"_blank\"><img src=\"https://qiita-image-store.s3.amazonaws.com/0/1858/2b08e582-b6f2-6a8f-57ba-ce74b1dd0545.png\" alt=\"1469874392-3675E076-B275-403D-BD34-98CE947A3BB2.png\" title=\"1469874392-3675E076-B275-403D-BD34-98CE947A3BB2.png\"></a></p>\n\n<h3>\n<span id=\"アプリケーションテスト-ハイブリッド系\" class=\"fragment\"></span><a href=\"#%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%83%86%E3%82%B9%E3%83%88-%E3%83%8F%E3%82%A4%E3%83%96%E3%83%AA%E3%83%83%E3%83%89%E7%B3%BB\"><i class=\"fa fa-link\"></i></a>アプリケーションテスト (ハイブリッド系)</h3>\n\n<p><a href=\"https://qiita-image-store.s3.amazonaws.com/0/1858/0a286eed-e511-05ef-55a5-684095662bbc.png\" target=\"_blank\"><img src=\"https://qiita-image-store.s3.amazonaws.com/0/1858/0a286eed-e511-05ef-55a5-684095662bbc.png\" alt=\"1469874758-4797A07E-FA71-4B7D-993C-A0170A84156A.png\" title=\"1469874758-4797A07E-FA71-4B7D-993C-A0170A84156A.png\"></a></p>\n\n<ul>\n<li>Spectron: <a href=\"http://electron.atom.io/spectron/\">公式</a> - <a href=\"https://github.com/electron/electron\">GitHub</a> - Electron(デスクトップアプリ)に特化したE2Eテストツール。</li>\n<li>Appium: <a href=\"http://appium.io/\">公式</a> - <a href=\"https://github.com/appium/appium\">GitHub</a> - iOSとAndroidアプリの自動化。ネイティブも、ハイブリッドも。</li>\n</ul>\n",
    "body": "\nWebサイトやWebアプリケーションの文脈(フロント寄り)で、E2E関連ツールを整理してみます。いろいろありすぎるようでいて、「結局[Selenium](#selenium)かよっ」ていう話ですが...。ただ、クロスブラウザテストが不要であれば[Nightmare](#nightmare)だけで済ますってのは、非常に簡便な選択肢です。[webdriver.io](#webdriverio)にも注目。個人的な見解は[まとめ](#まとめ)参照。\n\n*(当初『E2Eは「End to end」の略ですよ。まとめ』と題したのですが、「E2E」という用語がそれほど浸透していない?ようなので、改題しました)*\n\n以下、目次を兼ねて並べてみました。E2Eの文脈でないものも一部含みますが、全体像を把握するために入れてあります。変なところあれば、コメントでご指摘くださいませ。\n\nプロダクト | タイプ | エンジン | 開発言語 | GitHub★\n:-- | :--: | :--: | :--: | --: | --:\n[Selenium](#selenium) | クロスブラウザ | 各種 | Java | 3,977\n[DalekJS](#dalekjs) | クロスブラウザ | 各種 | JavaScript | 695\n[PhantomJS](#phantomjs) | ヘッドレス | WebKit | JavaScript | 18,941\n[SlimerJS](#slimerjs) | ヘッドレス | Gecko | JavaScript | 1,912\n[Nightmare](#nightmare) | ヘッドレス | Electron | JavaScript | 8,161\n[jsdom](#jsdom) | ヘッドレス | n/a | JavaScript | 6,194\n[Nightwatch](#nightwatch) | E2Eテスト | WebDriver(独自) | JavaScript | 4,727\n[Protractor](#protractor) | E2Eテスト | WebDriver(*1) | JavaScript | 5,683\n[webdriver.io](#webdriverio) | E2Eテスト | WebDriver(*2) | JavaScript | 2,055\n[Codecept](#codecept) | E2Eテスト | WebDriver(*2) | JavaScript | 656\n[Chimp](#chimp) | E2Eテスト | WebDriver(*2) | JavaScript | 385\n[Karma](#karma) | ユニットテスト<br>E2Eテスト | 各種ランチャー | JavaScript | 7,337\n[CasperJS](#casperjs) | E2Eテスト | PhantomJS/SlimerJS | JavaScript | 5,854\n[Zombie](#zombie) | E2Eテスト | jsdom | JavaScript | 4,008\n[Codeception](#codeception) | E2Eテスト | WebDriver | PHP | 2,295\n[Capybara](#capybara) | E2Eテスト | WebDriver/WebKit | Ruby | 7,208\n[Cucumber](#cucumber) | E2Eテスト |  | いろいろ | 2,143\n[Fake](#fake) | GUI | WebKit | n/a | n/a\n\n- GitHubのスターは2016年7月30日調べ。ただし、登場年によるバイアスが激しいので、この件に関してはあまり参考にならないですね...。\n- *1: selenium-webdriver 実装\n- *2: webdriver.io 実装\n\n## クロスブラウザ・テストプラットフォーム\n\n### Selenium\n\nSelenium Standalone Server\n\n- http://www.seleniumhq.org/\n- https://github.com/SeleniumHQ/selenium\n- 開発言語: Java 😱 (クライアントライブラリについては、複数言語存在)\n\n![1469875210-760A74E1-F145-4C14-9EBB-B991A06DFA46.png](https://qiita-image-store.s3.amazonaws.com/0/1858/d235c385-d2cc-1750-8b8d-83f895d35f2c.png \"1469875210-760A74E1-F145-4C14-9EBB-B991A06DFA46.png\")\n\n### DalekJS\n\nもともとSeleniumのインターフェースだったWebDriverを、Node環境で独自実装したもの。すごく期待していたんですが、開発止まってる...😱 (誰かその後を知りませんか?)\n\n- http://dalekjs.com/\n- https://github.com/dalekjs/dalek\n- 開発言語: JavaScript\n\n![1469875176-6B670F74-5CE4-44A9-9DB0-734BC6DE47CC.png](https://qiita-image-store.s3.amazonaws.com/0/1858/590f6e2d-f2d2-2e79-b380-4ee530080a10.png \"1469875176-6B670F74-5CE4-44A9-9DB0-734BC6DE47CC.png\")\n\n## ヘッドレスブラウザ\n\nクロスブラウザテストは、時間とお金がかかります。そこで、一般的なのが次の布陣です。GitHubで受け付けるプルリクエストも、Travisまでにしておいてクロスブラウザテストを省略することが多いようですね。\n\n- ローカル: ヘッドレスブラウザ\n- Travisとか: ヘッドレスブラウザ\n- BrowserStack / Saucelabs: クロスブラウザ\n\nしばらく、PhantomJS一択だったのですが、v1.9で永らく足踏みしていた結果、ES5対応も不完全な状態が続いたため、React勢からは完全に見放され「もうjsdomだけでいいよ」的な風潮が生まれたりします。2016年になって無事、PhantomJSもバージョンアップを果たしv2に。ベースとなるWebKitが新しくなりだいぶ使いやすくなりました。\n\nしかし、PhantomJSは早晩、Chromeの度重なるアップデートに着いていけなくなりそうな気配もあります(誰か「違う」と言って!)。ダークホースだったのがElectronで、これをブラウザの代わりに使おうという動きがここしばらく活発です。単体で使うならNightmare押し。ただ、SeleniumからElectronを使うルートがまだいまいち確立されていない2016年夏現在です。\n\n### PhantomJS\n\n- http://phantomjs.org/\n- https://github.com/ariya/phantomjs/\n- WebKit\n\n![1469875336-C65653E5-65A1-4D77-851F-14E84C651915.png](https://qiita-image-store.s3.amazonaws.com/0/1858/43295940-0aae-a06f-2d45-325aa9687a3e.png \"1469875336-C65653E5-65A1-4D77-851F-14E84C651915.png\")\n\n### SlimerJS\n\n- https://slimerjs.org/\n- https://github.com/laurentj/slimerjs/\n- Gecko and SpiderMonkey\n\n![1469875248-DC365F04-0B90-47A6-B28A-42B7E010DCF2.png](https://qiita-image-store.s3.amazonaws.com/0/1858/e7ee6393-02ef-4e5f-3476-8c2482cd2afe.png \"1469875248-DC365F04-0B90-47A6-B28A-42B7E010DCF2.png\")\n\n### Nightmare\n\n最近、エンジンをPhantomJSからElectronに切り替えて注目が集まっている。これ自体でE2Eツールとしても十分使える。\n\n- https://github.com/ariya/phantomjs/\n- https://github.com/segmentio/nightmare\n- Electron\n\n![1469874876-0CE1A3B7-60B0-4FA2-9F07-8FD4FF7A0297.png](https://qiita-image-store.s3.amazonaws.com/0/1858/babf3ddf-cf24-0637-824f-5b7decfd5d1f.png \"1469874876-0CE1A3B7-60B0-4FA2-9F07-8FD4FF7A0297.png\")\n\n### jsdom\n\nReactのテストでよく使われる。\n\n- https://github.com/tmpvar/jsdom\n- WHATWG DOM と HTML のJavaScriptによる実装。\n\n\n## E2Eテストツール\n\n### Nightwatch\n\n総合的なE2Eテストツール。WebDriver実装(独自)と、アサーションライブラリが一体となっているのが、使いやすいような使いにくいような。\n\n- http://nightwatchjs.org/\n- https://github.com/nightwatchjs/nightwatch\n\n![1469874902-11B0E1E5-0769-4D80-BFBA-F7292E366860.png](https://qiita-image-store.s3.amazonaws.com/0/1858/290d7b95-7d1c-b446-efc3-95abd920a80c.png \"1469874902-11B0E1E5-0769-4D80-BFBA-F7292E366860.png\")\n\n書き方はこんな感じ。\n\n```javascript\nmodule.exports = {\n  'Demo test Google' : function (client) {\n    client\n      .url('http://www.google.com')\n      .waitForElementVisible('body', 1000)\n      .assert.title('Google')\n      .assert.visible('input[type=text]')\n      .setValue('input[type=text]', 'rembrandt van rijn')\n      .waitForElementVisible('button[name=btnG]', 1000)\n      .click('button[name=btnG]')\n      .pause(1000)\n      .assert.containsText('ol#rso li:first-child',\n        'Rembrandt - Wikipedia')\n      .end();\n  }\n};\n```\n\n### Protractor\n\nUIテストの定番。AngularJSのために作られたフレームワーク。AngularJS以外からだと、余計な機能もあるが、Reactなどと合わせて使う人も多い。内部的には、[selenium-webdriver](https://www.npmjs.com/package/selenium-webdriver)を使っている。\n\n- http://www.protractortest.org/\n- https://github.com/angular/protractor\n\n![1469874926-E9969026-C0A4-40C7-A1B9-F85FC43C51BD.png](https://qiita-image-store.s3.amazonaws.com/0/1858/8206915f-8359-d52a-0e5c-055f16d6b994.png \"1469874926-E9969026-C0A4-40C7-A1B9-F85FC43C51BD.png\")\n\n実際のテストはこんな感じ。テストフレームワークのデフォルトは[Jasmine](http://jasmine.github.io/)だけど、他のと組み合わせてもOK。Mochaとか。\n\n```javascript\ndescribe('angularjs homepage todo list', function() {\n  it('should add a todo', function() {\n    browser.get('https://angularjs.org');\n\n    element(by.model('todoList.todoText')).sendKeys('write first protractor test');\n    element(by.css('[value=\"add\"]')).click();\n\n    var todoList = element.all(by.repeater('todo in todoList.todos'));\n    expect(todoList.count()).toEqual(3);\n    expect(todoList.get(2).getText()).toEqual('write first protractor test');\n\n    // You wrote your first test, cross it off the list\n    todoList.get(2).element(by.css('input')).click();\n    var completedAmount = element.all(by.css('.done-true'));\n    expect(completedAmount.count()).toEqual(2);\n  });\n});\n```\n\n### webdriver.io\n\nSelenium 2.0 bindings for NodeJS。公式の[selenium-webdriver](https://www.npmjs.com/package/selenium-webdriver)より、だいぶ書きやすい。あくまでもブラウザの自動化ツールなので、テストフレームワークは自分の好きなものと組み合わせて使う。ちなみに、Codecept・Chimp・Spectronなどは、内部的にこのwebdriver.ioを使っている。\n\n- http://webdriver.io/\n- https://github.com/webdriverio/webdriverio\n\n![1469882980-B0F0D94F-FB03-43F3-ADEB-4E9A6AD8F435.png](https://qiita-image-store.s3.amazonaws.com/0/1858/287f96b7-82c0-dc93-c0b7-9c9ede5d6ae2.png \"1469882980-B0F0D94F-FB03-43F3-ADEB-4E9A6AD8F435.png\")\n\n書き方はこんな感じ。\n\n```javascript\nbrowser\n  .get(\"http://www.google.com\")\n  .elementById('q')\n  .sendKeys('webdriver')\n  .elementById('btnG')\n  .click()\n```\n\n### CodeceptJS\n\n比較的後発で、Codeception(PHP製)を元に作られたJavaScriptのツール。「同期的に」書けるのがウリ。ただ、書き方が独特なので好き嫌いが分かれそう。\n\n- http://codecept.io/\n- https://github.com/codeception/codeceptjs/\n\n![1469875072-1FC56365-6FBC-445C-A303-65D1EE5384F5.png](https://qiita-image-store.s3.amazonaws.com/0/1858/d5eb0c86-aa05-b425-fdcb-a37a9e5ab49b.png \"1469875072-1FC56365-6FBC-445C-A303-65D1EE5384F5.png\")\n\n実際のテストはこんな感じ。\n\n```javascript\nFeature('CodeceptJS Demonstration');\n\nScenario('submit form successfully', (I) =>\n  I.amOnPage('/documentation')\n  I.fillField('Email', 'hello@world.com')\n  I.fillField('Password', '123456')\n  I.checkOption('Active')\n  I.checkOption('Male');\n  I.click('Create User')\n  I.see('User is valid')\n  I.dontSeeInCurrentUrl('/documentation')\n});\n```\n\n### Karma\n\nAngularJSのために生まれたテストフレームワーク。E2Eというより、ユニットテスト的な使い方が基本。ただ、境界はあいまいなので、E2E的に使っているケースもあり。`launcher`を切り替えることで様々なブラウザが使え、[PhantomJS](https://github.com/karma-runner/karma-phantomjs-launcher)や[Electron](https://github.com/twolfson/karma-electron)でのヘッドレステストも可能。\n\n- https://karma-runner.github.io\n- https://github.com/karma-runner/karma/\n\n![1469878025-F3E93481-D1D7-4DDF-BDC9-9D5AED659D05.png](https://qiita-image-store.s3.amazonaws.com/0/1858/6114d26c-d431-8dfa-7bf1-296dcd0c5bf8.png \"1469878025-F3E93481-D1D7-4DDF-BDC9-9D5AED659D05.png\")\n\n### Chimp\n\n- https://chimp.readme.io/\n- https://github.com/xolvio/chimp\n\n![1469884023-2A9CC8CC-D071-410D-9DBC-9BC50552C6CB.png](https://qiita-image-store.s3.amazonaws.com/0/1858/d056e7ca-6e24-8cc3-36a2-9066cf974d24.png \"1469884023-2A9CC8CC-D071-410D-9DBC-9BC50552C6CB.png\")\n\n### CasperJS\n\nPhantomJSとSlimerJSを透過的に使えるツール。でも、モバイルどうするの...。\n\n- http://casperjs.org/\n- https://github.com/casperjs/casperjs\n\n![1469875272-A4667953-A25F-4825-9634-8659E0E22BC4.png](https://qiita-image-store.s3.amazonaws.com/0/1858/f5b7c3a9-eadc-975d-2ca5-1dbf4de554e5.png \"1469875272-A4667953-A25F-4825-9634-8659E0E22BC4.png\")\n\n### Zonbie\n\njsdomベースのテストツール。そろそろ開発止まってる...?\n\n- http://zombie.js.org/\n- https://github.com/assaf/zombie\n\n![1469885202-6F57F49C-8EDB-46BD-8738-59615D8D14A6.png](https://qiita-image-store.s3.amazonaws.com/0/1858/94e0d292-2ab6-cc32-0ee9-d7f611585b8d.png \"1469885202-6F57F49C-8EDB-46BD-8738-59615D8D14A6.png\")\n\n### Codeception\n\n- http://codeception.com/\n- https://github.com/codeception/codeception\n- 開発言語はPHP\n\n![1469875629-F3ABB3DF-E36E-49B2-9BEB-D006EA9BEDC9.png](https://qiita-image-store.s3.amazonaws.com/0/1858/7bd88eae-4d6f-9e9c-4c21-d42ed923dd11.png \"1469875629-F3ABB3DF-E36E-49B2-9BEB-D006EA9BEDC9.png\")\n\n### Capybara\n\n- http://jnicklas.github.io/capybara/\n- 開発言語はRuby\n\n![1469874375-3EF89F1A-A323-4927-AAB3-9AF352B96855.png](https://qiita-image-store.s3.amazonaws.com/0/1858/359f7346-41d8-6875-9dc4-984493e71eb5.png \"1469874375-3EF89F1A-A323-4927-AAB3-9AF352B96855.png\")\n\n### Cucumber\n\n異次元方向に向かっているのがCucumber。JavaScript実装も存在する。\n\n- https://cucumber.io/\n- https://github.com/cucumber/cucumber-js\n\n![1469894429-4FDC2B81-3134-4539-8BA9-D69255B455BF.png](https://qiita-image-store.s3.amazonaws.com/0/1858/7c92161d-8cda-caaf-7e79-14f02d05bb90.png \"1469894429-4FDC2B81-3134-4539-8BA9-D69255B455BF.png\")\n\nGherkinという自然言語風味なDSLで書く。\n\n```gherkin\n# features/my_feature.feature\n\nFeature: Example feature\n  As a user of Cucumber.js\n  I want to have documentation on Cucumber\n  So that I can concentrate on building awesome applications\n\n  Scenario: Reading documentation\n    Given I am on the Cucumber.js GitHub repository\n    When I go to the README file\n    Then I should see \"Usage\" as the page title\n```\n\n\n## まとめ\n\nSeleniumから脱却したい気持ちは大きいですが、しばらくは使わざるを得ないようです。ただ、Nightwatch・ProtractorをはじめWebDriverクライアントの使い勝手はだいぶ向上しました。第二のWebDriver実装である`webdriver.io`は、単体で相当シンプルに書けるようになったので、もうラッパーライブラリを使う必要もないかもしれません。\n\n個人的には、しばらく次のような方針で行こうかと思っています。[ava](https://github.com/avajs/ava)か[tape](https://github.com/substack/tape)あたりと組み合わせて。[mocha](https://mochajs.org/)でもよし。\n\n- シンプルなライブラリ開発: [Nightmare](#nightmare)\n- クロスブラウザテストが必要なケース: [webdriver.io](#webdriverio)\n\n\n## Appendix\n\n以下は、一応メモしておくぐらい。ご参考まで。\n\n### クラウドサービス\n\nSeleniumをローカルに立ち上げたくない僕らのためのサービス。モバイルを含めたブラウザの種類が充実。基本有料だけど、オープンソースブロジェクトはたいてい無料。\n\n#### BrowserStack\n\n- https://www.browserstack.com/\n\n![1469875110-29C2E3BB-48D0-49FC-A987-4E37D37071CC.png](https://qiita-image-store.s3.amazonaws.com/0/1858/4ff9a54d-6fe5-149a-a7fa-75409e28e914.png \"1469875110-29C2E3BB-48D0-49FC-A987-4E37D37071CC.png\")\n\n\n#### Saucelabs\n\n- https://saucelabs.com/\n\n![1469875017-06238D38-F6C6-4445-B4D0-A3381C33506C.png](https://qiita-image-store.s3.amazonaws.com/0/1858/f0b61e54-ed6f-71fd-e392-a4dfcb45710f.png \"1469875017-06238D38-F6C6-4445-B4D0-A3381C33506C.png\")\n\n#### その他\n\n- TestingBot https://testingbot.com/\n- Rainforest QA https://www.rainforestqa.com/\n\nほか、結構いっぱいあります。\n\n### WebDriver\n\nSeleniumと[WebDriver](http://www.seleniumhq.org/projects/webdriver/)の関係性がややこしく感じるけれど、要はこういうこと。\n\n> Selenium 1.0 + WebDriver = Selenium 2.0\n\nWebDriverはSeleniumのインターフェースで、[W3Cでも標準化が進められている](https://www.w3.org/TR/webdriver/)。各種ブラウザに対応したドライバが存在する。\n\n- ChromeDriver\n- FirefoxDriver\n- InternetExplorerDriver\n- PhantomJSDriver (=[GhostDriver](https://github.com/detro/ghostdriver)) すでに開発中止\n- SafariDriver\n\nなど。\n\n### Fake (GUI)\n\n- http://fakeapp.com/\n- WebKitベース\n- 動作環境: Mac OS X\n\n![1469874392-3675E076-B275-403D-BD34-98CE947A3BB2.png](https://qiita-image-store.s3.amazonaws.com/0/1858/2b08e582-b6f2-6a8f-57ba-ce74b1dd0545.png \"1469874392-3675E076-B275-403D-BD34-98CE947A3BB2.png\")\n\n### アプリケーションテスト (ハイブリッド系)\n\n![1469874758-4797A07E-FA71-4B7D-993C-A0170A84156A.png](https://qiita-image-store.s3.amazonaws.com/0/1858/0a286eed-e511-05ef-55a5-684095662bbc.png \"1469874758-4797A07E-FA71-4B7D-993C-A0170A84156A.png\")\n\n- Spectron: [公式](http://electron.atom.io/spectron/) - [GitHub](https://github.com/electron/electron) - Electron(デスクトップアプリ)に特化したE2Eテストツール。\n- Appium: [公式](http://appium.io/) - [GitHub](https://github.com/appium/appium) - iOSとAndroidアプリの自動化。ネイティブも、ハイブリッドも。\n",
    "coediting": false,
    "created_at": "2016-07-30T23:12:41+09:00",
    "group": null,
    "id": "6cce719b57341769c14d",
    "private": false,
    "tags": [
      {
        "name": "JavaScript",
        "versions": []
      },
      {
        "name": "test",
        "versions": []
      },
      {
        "name": "Selenium",
        "versions": []
      },
      {
        "name": "e2e",
        "versions": []
      }
    ],
    "title": "ブラウザテストツール総まとめ・2016年夏版",
    "updated_at": "2016-07-31T02:15:18+09:00",
    "url": "http://qiita.com/cognitom/items/6cce719b57341769c14d",
    "user": {
      "description": "下北沢オープンソースCafeのマスターで、図書館サービス「リブライズ」のデザイン担当。CoffeeScript好き。",
      "facebook_id": "cognitom",
      "followees_count": 63,
      "followers_count": 426,
      "github_login_name": "cognitom",
      "id": "cognitom",
      "items_count": 81,
      "linkedin_id": "cognitom",
      "location": "Tokyo, Japan",
      "name": "Tsutomu Kawamura",
      "organization": "リブライズ合同会社",
      "permanent_id": 1858,
      "profile_image_url": "https://secure.gravatar.com/avatar/2be94635664f02d169e343e4024f0ad5?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-140.png",
      "twitter_screen_name": "cognitom",
      "website_url": "http://www.osscafe.net/ja/"
    }
  },
  {
    "rendered_body": "<p>Androidソースコードの一部をビルドする方法です。</p>\n\n<ul>\n<li>Andoroidアプリでなく、AOSPで公開されているOSのソースコードについての話題です。</li>\n</ul>\n\n<h1>\n<span id=\"手順\" class=\"fragment\"></span><a href=\"#%E6%89%8B%E9%A0%86\"><i class=\"fa fa-link\"></i></a>手順</h1>\n\n<ul>\n<li>Androidのソースコードをbuildする環境を用意する。</li>\n<li>ビルドしたいモジュールのAndroid.mkに含まれる LOCAL_MODULE を設定している箇所を探す。</li>\n<li>LOCAL_MODULEで設定している文字列をmakeの引数にする。</li>\n</ul>\n\n<h1>\n<span id=\"例\" class=\"fragment\"></span><a href=\"#%E4%BE%8B\"><i class=\"fa fa-link\"></i></a>例</h1>\n\n<ul>\n<li>Android 5.1 で bluedroid だけをビルドしたい場合の例です。</li>\n<li>external/bluetooth/bluedroid以下のAndroid.mkに含まれるLOCAL_MODULE を探す。 (agが無い場合はgrepで探してください。)</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>\n$ ag \"LOCAL_MODULE[: ]\"  external/bluetooth/bluedroid\nexternal/bluetooth/bluedroid/embdrv/sbc/decoder/Android.mk\n24:LOCAL_MODULE:= libbt-qcom_sbc_decoder\n\nexternal/bluetooth/bluedroid/osi/Android.mk\n18:LOCAL_MODULE := libosi\n40:LOCAL_MODULE := ositests\n\nexternal/bluetooth/bluedroid/stack/Android.mk\n154:LOCAL_MODULE := libbt-brcm_stack\n\nexternal/bluetooth/bluedroid/conf/Android.mk\n4:LOCAL_MODULE := bt_stack.conf\n13:LOCAL_MODULE := bt_did.conf\n22:LOCAL_MODULE := auto_pair_devlist.conf\n\nexternal/bluetooth/bluedroid/test/bluedroidtest/Android.mk\n33:LOCAL_MODULE:= bdt\n\nexternal/bluetooth/bluedroid/test/suite/Android.mk\n22:LOCAL_MODULE := bdtest\n\nexternal/bluetooth/bluedroid/bta/Android.mk\n92:LOCAL_MODULE := libbt-brcm_bta\n\nexternal/bluetooth/bluedroid/audio_a2dp_hw/Android.mk\n14:LOCAL_MODULE := audio.a2dp.default\n\nexternal/bluetooth/bluedroid/hci/Android.mk\n39:LOCAL_MODULE := libbt-hci\n\nexternal/bluetooth/bluedroid/main/Android.mk\n136:LOCAL_MODULE := bluetooth.default\n\nexternal/bluetooth/bluedroid/gki/Android.mk\n27:LOCAL_MODULE := libbt-brcm_gki\n\nexternal/bluetooth/bluedroid/utils/Android.mk\n16:LOCAL_MODULE := libbt-utils\n</pre></div></div>\n\n<ul>\n<li>何個もLOCAL_MODULEが定義されているのですが、いろいろ試した結果、bluetooth.default がbluedroidの本体のライブラリlibbluetooth.default.soに対応しています。これを指定すると下位のLOCAL_MODULEもまとめてビルドしてくれます。</li>\n<li>LOCAL_MODULEで設定している文字列bluetooth.default を引数にして make します。</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>\n$ make bluetooth.default\n</pre></div></div>\n\n<ul>\n<li>依存しているbionic libcなどもビルドされます。</li>\n<li>最終的に out/target/product/generic/system/lib/hw/bluetooth.default.so に出力されます。</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>\nInstall: out/target/product/generic/system/lib/hw/bluetooth.default.so\n</pre></div></div>\n\n<h1>\n<span id=\"参考\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83\"><i class=\"fa fa-link\"></i></a>参考</h1>\n\n<ul>\n<li>Building a particular module in the android source code\n\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/13139394/building-a-particular-module-in-the-android-source-code\" class=\"autolink\">http://stackoverflow.com/questions/13139394/building-a-particular-module-in-the-android-source-code</a></li>\n</ul>\n</li>\n</ul>\n",
    "body": "Androidソースコードの一部をビルドする方法です。\n\n* Andoroidアプリでなく、AOSPで公開されているOSのソースコードについての話題です。\n\n# 手順\n* Androidのソースコードをbuildする環境を用意する。\n* ビルドしたいモジュールのAndroid.mkに含まれる LOCAL_MODULE を設定している箇所を探す。\n* LOCAL_MODULEで設定している文字列をmakeの引数にする。\n\n\n# 例\n* Android 5.1 で bluedroid だけをビルドしたい場合の例です。\n* external/bluetooth/bluedroid以下のAndroid.mkに含まれるLOCAL_MODULE を探す。 (agが無い場合はgrepで探してください。)\n\n```\n$ ag \"LOCAL_MODULE[: ]\"  external/bluetooth/bluedroid\nexternal/bluetooth/bluedroid/embdrv/sbc/decoder/Android.mk\n24:LOCAL_MODULE:= libbt-qcom_sbc_decoder\n\nexternal/bluetooth/bluedroid/osi/Android.mk\n18:LOCAL_MODULE := libosi\n40:LOCAL_MODULE := ositests\n\nexternal/bluetooth/bluedroid/stack/Android.mk\n154:LOCAL_MODULE := libbt-brcm_stack\n\nexternal/bluetooth/bluedroid/conf/Android.mk\n4:LOCAL_MODULE := bt_stack.conf\n13:LOCAL_MODULE := bt_did.conf\n22:LOCAL_MODULE := auto_pair_devlist.conf\n\nexternal/bluetooth/bluedroid/test/bluedroidtest/Android.mk\n33:LOCAL_MODULE:= bdt\n\nexternal/bluetooth/bluedroid/test/suite/Android.mk\n22:LOCAL_MODULE := bdtest\n\nexternal/bluetooth/bluedroid/bta/Android.mk\n92:LOCAL_MODULE := libbt-brcm_bta\n\nexternal/bluetooth/bluedroid/audio_a2dp_hw/Android.mk\n14:LOCAL_MODULE := audio.a2dp.default\n\nexternal/bluetooth/bluedroid/hci/Android.mk\n39:LOCAL_MODULE := libbt-hci\n\nexternal/bluetooth/bluedroid/main/Android.mk\n136:LOCAL_MODULE := bluetooth.default\n\nexternal/bluetooth/bluedroid/gki/Android.mk\n27:LOCAL_MODULE := libbt-brcm_gki\n\nexternal/bluetooth/bluedroid/utils/Android.mk\n16:LOCAL_MODULE := libbt-utils\n```\n\n* 何個もLOCAL_MODULEが定義されているのですが、いろいろ試した結果、bluetooth.default がbluedroidの本体のライブラリlibbluetooth.default.soに対応しています。これを指定すると下位のLOCAL_MODULEもまとめてビルドしてくれます。\n* LOCAL_MODULEで設定している文字列bluetooth.default を引数にして make します。\n\n```\n$ make bluetooth.default\n```\n* 依存しているbionic libcなどもビルドされます。\n* 最終的に out/target/product/generic/system/lib/hw/bluetooth.default.so に出力されます。\n\n```\nInstall: out/target/product/generic/system/lib/hw/bluetooth.default.so\n```\n\n\n\n# 参考\n* Building a particular module in the android source code\n * http://stackoverflow.com/questions/13139394/building-a-particular-module-in-the-android-source-code\n",
    "coediting": false,
    "created_at": "2016-07-30T20:39:06+09:00",
    "group": null,
    "id": "78d5baf5e09df6bec912",
    "private": false,
    "tags": [
      {
        "name": "Android",
        "versions": []
      },
      {
        "name": "aosp",
        "versions": []
      }
    ],
    "title": "Androidソースコードの一部をビルドする",
    "updated_at": "2016-07-30T21:20:11+09:00",
    "url": "http://qiita.com/eggman/items/78d5baf5e09df6bec912",
    "user": {
      "description": "",
      "facebook_id": "",
      "followees_count": 0,
      "followers_count": 6,
      "github_login_name": "eggman",
      "id": "eggman",
      "items_count": 45,
      "linkedin_id": "",
      "location": "",
      "name": "",
      "organization": "",
      "permanent_id": 42120,
      "profile_image_url": "https://pbs.twimg.com/profile_images/34167662/506463_3453460014_normal.jpg",
      "twitter_screen_name": "eggman",
      "website_url": ""
    }
  },
  {
    "rendered_body": "<p>最近 JetBrains 製の IDE を利用する機会<sup id=\"fnref1\"><a href=\"#fn1\" title=\"Android Studio も含めて\">1</a></sup>が増えてきたので、All Products ライセンスに切り替えました。</p>\n\n<h1>\n<span id=\"カラースキーム\" class=\"fragment\"></span><a href=\"#%E3%82%AB%E3%83%A9%E3%83%BC%E3%82%B9%E3%82%AD%E3%83%BC%E3%83%A0\"><i class=\"fa fa-link\"></i></a>カラースキーム</h1>\n\n<p><strong>Sunset</strong> を使っています。</p>\n\n<p><a href=\"https://qiita-image-store.s3.amazonaws.com/0/17936/a625cf5b-e867-d835-659e-02c155383334.png\" target=\"_blank\"><img src=\"https://qiita-image-store.s3.amazonaws.com/0/17936/a625cf5b-e867-d835-659e-02c155383334.png\"></a></p>\n\n<p>AppCode を本格的に触れるようになったのですが、「Xcode からの (カラースキーム) 取り込み」なんていう機能があったんですね。</p>\n\n<p><a href=\"https://qiita-image-store.s3.amazonaws.com/0/17936/a917bf8a-b9c3-0f40-d894-4ecea2093465.png\" target=\"_blank\"><img src=\"https://qiita-image-store.s3.amazonaws.com/0/17936/a917bf8a-b9c3-0f40-d894-4ecea2093465.png\"></a></p>\n\n<p>以前から Xcode の「Sunset」というテーマが好きで、Sunset に準じるテーマがない場合などには Solarized Light で代用していましたが<sup id=\"fnref2\"><a href=\"#fn2\" title=\"Solarized Light をベースに Sunset 風にカスタマイズしたり。\">2</a></sup>、この機能を利用すれば JetBrains 製 IDE で Sunset が利用できるようになります。</p>\n\n<p>取り込んだカラースキームは JetBrains 製の IDE なら共通して利用できます。AppCode で取り込んだ Sunset を IntelliJ IDEA や Android Studio にも適用して利用することが可能です。</p>\n\n<p>OS X (macOS) なら</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>\n~/Library/Preferences/[IDE 名 + バージョン]/colors/\n</pre></div></div>\n\n<p>Windows なら</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>\nC:\\Users\\[ユーザ名]\\.[IDE 名 + バージョン]\\config\\colors\n</pre></div></div>\n\n<p>Linux なら</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>\n~/.[IDE 名 + バージョン]/config/colors\n</pre></div></div>\n\n<p>にある <code>.icls</code> ファイルをコピーして、アプリケーションを再起動すると認識されると思います。</p>\n\n<h1>\n<span id=\"project-ペインの設定\" class=\"fragment\"></span><a href=\"#project-%E3%83%9A%E3%82%A4%E3%83%B3%E3%81%AE%E8%A8%AD%E5%AE%9A\"><i class=\"fa fa-link\"></i></a>Project ペインの設定</h1>\n\n<p>Xcode に慣れていると、Project のファイルツリーで選択したファイルはワンクリックでそのままエディタで開いて欲しい。幸い JetBrains 製の IDE では「Autoscroll」という設定で、その挙動をサポートしています。</p>\n\n<p><a href=\"https://qiita-image-store.s3.amazonaws.com/0/17936/8a0125c3-bd95-8f1c-a597-82da001759c6.png\" target=\"_blank\"><img src=\"https://qiita-image-store.s3.amazonaws.com/0/17936/8a0125c3-bd95-8f1c-a597-82da001759c6.png\" width=\"200\"></a></p>\n\n<p>Project 上部にある歯車アイコンからアクセスできるツール設定で Autoscroll をオンにします。</p>\n\n<h1>\n<span id=\"プラグイン\" class=\"fragment\"></span><a href=\"#%E3%83%97%E3%83%A9%E3%82%B0%E3%82%A4%E3%83%B3\"><i class=\"fa fa-link\"></i></a>プラグイン</h1>\n\n<h2>\n<span id=\"color-ide\" class=\"fragment\"></span><a href=\"#color-ide\"><i class=\"fa fa-link\"></i></a>Color Ide</h2>\n\n<p>Sunset や Solarized Light など背景色が標準と異なるカラースキームを適用すると、Project ペインなどの背景色が標準のままなのが気になります。</p>\n\n<p>Color Ide はエディタの背景色をエディタ以外のペインにも適用してくれるプラグインです。</p>\n\n<h2>\n<span id=\"dash-os-x--macos-のみ\" class=\"fragment\"></span><a href=\"#dash-os-x--macos-%E3%81%AE%E3%81%BF\"><i class=\"fa fa-link\"></i></a>Dash (OS X / macOS のみ)</h2>\n\n<p>OS X / macOS ではドキュメントリーダに Dash を利用しています。JetBrains 製 IDE からも Dash が簡単に開けるようにしてくれるプラグインが Dash です。</p>\n\n<h2>\n<span id=\"perl-webstorm--phpstorm\" class=\"fragment\"></span><a href=\"#perl-webstorm--phpstorm\"><i class=\"fa fa-link\"></i></a>Perl (WebStorm / PhpStorm)</h2>\n\n<p>WebStorm / PhpStorm で Perl/CGI なスクリプトを開発する機会があったので、とりあえず。</p>\n\n<h2>\n<span id=\"bashsupport\" class=\"fragment\"></span><a href=\"#bashsupport\"><i class=\"fa fa-link\"></i></a>BashSupport</h2>\n\n<p>シェルスクリプトは開発アプリに関わりなく、一般的によく利用します。</p>\n\n<div class=\"footnotes\">\n<hr>\n<ol>\n\n<li id=\"fn1\">\n<p>Android Studio も含めて <a href=\"#fnref1\">↩</a></p>\n</li>\n\n<li id=\"fn2\">\n<p>Solarized Light をベースに Sunset 風にカスタマイズしたり。 <a href=\"#fnref2\">↩</a></p>\n</li>\n\n</ol>\n</div>\n",
    "body": "\n最近 JetBrains 製の IDE を利用する機会[^1]が増えてきたので、All Products ライセンスに切り替えました。\n\n[^1]: Android Studio も含めて\n\n# カラースキーム\n\n**Sunset** を使っています。\n\n<img src=\"https://qiita-image-store.s3.amazonaws.com/0/17936/a625cf5b-e867-d835-659e-02c155383334.png\" witch=\"480\" />\n\nAppCode を本格的に触れるようになったのですが、「Xcode からの (カラースキーム) 取り込み」なんていう機能があったんですね。\n\n<img src=\"https://qiita-image-store.s3.amazonaws.com/0/17936/a917bf8a-b9c3-0f40-d894-4ecea2093465.png\" witch=\"480\" />\n\n\n以前から Xcode の「Sunset」というテーマが好きで、Sunset に準じるテーマがない場合などには Solarized Light で代用していましたが[^2]、この機能を利用すれば JetBrains 製 IDE で Sunset が利用できるようになります。\n\n[^2]: Solarized Light をベースに Sunset 風にカスタマイズしたり。\n\n取り込んだカラースキームは JetBrains 製の IDE なら共通して利用できます。AppCode で取り込んだ Sunset を IntelliJ IDEA や Android Studio にも適用して利用することが可能です。\n\nOS X (macOS) なら\n\n```\n~/Library/Preferences/[IDE 名 + バージョン]/colors/\n```\n\nWindows なら\n\n```\nC:\\Users\\[ユーザ名]\\.[IDE 名 + バージョン]\\config\\colors\n```\n\nLinux なら\n\n```\n~/.[IDE 名 + バージョン]/config/colors\n```\n\nにある `.icls` ファイルをコピーして、アプリケーションを再起動すると認識されると思います。\n\n# Project ペインの設定\n\nXcode に慣れていると、Project のファイルツリーで選択したファイルはワンクリックでそのままエディタで開いて欲しい。幸い JetBrains 製の IDE では「Autoscroll」という設定で、その挙動をサポートしています。\n\n<img src=\"https://qiita-image-store.s3.amazonaws.com/0/17936/8a0125c3-bd95-8f1c-a597-82da001759c6.png\" width=\"200\" />\n \nProject 上部にある歯車アイコンからアクセスできるツール設定で Autoscroll をオンにします。\n\n# プラグイン\n\n## Color Ide\n\nSunset や Solarized Light など背景色が標準と異なるカラースキームを適用すると、Project ペインなどの背景色が標準のままなのが気になります。\n\nColor Ide はエディタの背景色をエディタ以外のペインにも適用してくれるプラグインです。\n\n## Dash (OS X / macOS のみ)\n\nOS X / macOS ではドキュメントリーダに Dash を利用しています。JetBrains 製 IDE からも Dash が簡単に開けるようにしてくれるプラグインが Dash です。\n\n## Perl (WebStorm / PhpStorm)\n\nWebStorm / PhpStorm で Perl/CGI なスクリプトを開発する機会があったので、とりあえず。\n\n## BashSupport\n\nシェルスクリプトは開発アプリに関わりなく、一般的によく利用します。\n",
    "coediting": false,
    "created_at": "2016-07-30T18:19:01+09:00",
    "group": null,
    "id": "4d27f43b78f9c71af9b3",
    "private": false,
    "tags": [
      {
        "name": "IDE",
        "versions": []
      },
      {
        "name": "JetBrains",
        "versions": []
      }
    ],
    "title": "JetBrains 製 IDE の設定・プラグイン",
    "updated_at": "2016-07-30T18:19:01+09:00",
    "url": "http://qiita.com/takkyun/items/4d27f43b78f9c71af9b3",
    "user": {
      "description": "",
      "facebook_id": "",
      "followees_count": 0,
      "followers_count": 27,
      "github_login_name": "takkyun",
      "id": "takkyun",
      "items_count": 24,
      "linkedin_id": "",
      "location": "",
      "name": "",
      "organization": "",
      "permanent_id": 17936,
      "profile_image_url": "https://secure.gravatar.com/avatar/86aeb310ab36e407c71b06ce099cee3d?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
      "twitter_screen_name": null,
      "website_url": "http://serendipitynz.com/"
    }
  },
  {
    "rendered_body": "\n<h1>\n<span id=\"labviewでirkit\" class=\"fragment\"></span><a href=\"#labview%E3%81%A7irkit\"><i class=\"fa fa-link\"></i></a>LabVIEWでIRKit</h1>\n\n<p>IRKit(学習機能付リモコン)を使って、ＴＶや扇風機などのリモコン操作、やってみました。<br>\nWiFi経由でhttpクライアント関数で読み取ったデータを送信するだけなので、LabVIEWからも簡単にできました。</p>\n\n<p>学習リモコンとして使うならiPhone/Androidアプリをダウンロードすればいいだけ、なのですが、温度センサーなどを組み合わせてちょっとした自動化にも使えそう、ということでLabVIEWで作ってみました。</p>\n\n<h1>\n<span id=\"初期設定はiphoneandroidアプリで\" class=\"fragment\"></span><a href=\"#%E5%88%9D%E6%9C%9F%E8%A8%AD%E5%AE%9A%E3%81%AFiphoneandroid%E3%82%A2%E3%83%97%E3%83%AA%E3%81%A7\"><i class=\"fa fa-link\"></i></a>初期設定はiPhone/Androidアプリで</h1>\n\n<p>残念ながら、初期設定には、iPhone/Androidアプリが必須です。WiFi環境も必要です。<br>\nそれとIRKitにはバッテリーがないので、使うときはUSB給電が必要。</p>\n\n<h1>\n<span id=\"irkitでリモコン操作\" class=\"fragment\"></span><a href=\"#irkit%E3%81%A7%E3%83%AA%E3%83%A2%E3%82%B3%E3%83%B3%E6%93%8D%E4%BD%9C\"><i class=\"fa fa-link\"></i></a>IRKitでリモコン操作</h1>\n\n<p>IRKitとの通信は httpGet/httpPostなので、LabVIEWのhttpクライアント関数だけでできます。</p>\n\n<h2>\n<span id=\"手順\" class=\"fragment\"></span><a href=\"#%E6%89%8B%E9%A0%86\"><i class=\"fa fa-link\"></i></a>手順</h2>\n\n<p>操作したいリモコンの赤外線信号をIRKit経由で読み取って、読み取った赤外線信号のデータをhttpPostすれば、IRKitから赤外線で対象の家電にリモコンの信号が送信される、という仕組みです。</p>\n\n<h2>\n<span id=\"irkitのipアドレスの取得\" class=\"fragment\"></span><a href=\"#irkit%E3%81%AEip%E3%82%A2%E3%83%89%E3%83%AC%E3%82%B9%E3%81%AE%E5%8F%96%E5%BE%97\"><i class=\"fa fa-link\"></i></a>IRKitのIPアドレスの取得</h2>\n\n<p>http通信するのにIRKitのIPアドレスが必要ですが、それを調べるのが一番の難関かもしれません。<br>\nDHCPのみでIPアドレスを固定できないので、IRKitを電源On/OffするたびにIPアドレスが変わる可能性があります。<br>\nIRKitの公式サイトでは Bonjour で調べる方法が紹介されていましたが、Windowsには標準には入っていません。<br>\nコマンドプロンプトから、IRKitのデバイス名に\".local\"をつけてpingするとIPアドレスが表示されるようです。</p>\n\n<p>こんな感じ<br>\n<code>&gt; ping &lt;IRKit名&gt;.local</code></p>\n\n<h2>\n<span id=\"リモコン信号の取得\" class=\"fragment\"></span><a href=\"#%E3%83%AA%E3%83%A2%E3%82%B3%E3%83%B3%E4%BF%A1%E5%8F%B7%E3%81%AE%E5%8F%96%E5%BE%97\"><i class=\"fa fa-link\"></i></a>リモコン信号の取得</h2>\n\n<p>IRKitに向けてリモコンボタンを押した後、2,3秒のタイムラグをおいてLED点滅した後、httpGetすると、JSON形式文字列データでリモコン信号のデータが受信できます。<br>\n一度しか読み取れないので、もし、失敗したら、もう一度、リモコンボタンを押すところからやり直します。</p>\n\n<p>VIスニペット<br>\n<a href=\"https://qiita-image-store.s3.amazonaws.com/0/43526/15fd084b-54d7-f0f6-0397-da2748b7f0b8.png\" target=\"_blank\"><img src=\"https://qiita-image-store.s3.amazonaws.com/0/43526/15fd084b-54d7-f0f6-0397-da2748b7f0b8.png\" alt=\"IRKit_Messages_GET_vi.png\"></a></p>\n\n<h2>\n<span id=\"リモコン信号の送信\" class=\"fragment\"></span><a href=\"#%E3%83%AA%E3%83%A2%E3%82%B3%E3%83%B3%E4%BF%A1%E5%8F%B7%E3%81%AE%E9%80%81%E4%BF%A1\"><i class=\"fa fa-link\"></i></a>リモコン信号の送信</h2>\n\n<p>取得したリモコン信号データ(JSON形式文字列)をhttpPostする</p>\n\n<p>VIスニペット<br>\n<a href=\"https://qiita-image-store.s3.amazonaws.com/0/43526/ff5dbb30-a84f-6208-0817-4e05d49b886a.png\" target=\"_blank\"><img src=\"https://qiita-image-store.s3.amazonaws.com/0/43526/ff5dbb30-a84f-6208-0817-4e05d49b886a.png\" alt=\"IRKit_Messages_POST_vi.png\"></a></p>\n\n<h1>\n<span id=\"アプリケーション作ってみた\" class=\"fragment\"></span><a href=\"#%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E4%BD%9C%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F\"><i class=\"fa fa-link\"></i></a>アプリケーション作ってみた</h1>\n\n<p>簡単なアプリケーションにしてみました。githubにソース公開します。</p>\n\n<p><a href=\"https://github.com/alucky4416/LvIRKIT\">LvIRKit github</a></p>\n\n<p>画面イメージ<br>\n<a href=\"https://qiita-image-store.s3.amazonaws.com/0/43526/9dfd6f69-05a4-b105-0edd-c1863967d0b7.png\" target=\"_blank\"><img src=\"https://qiita-image-store.s3.amazonaws.com/0/43526/9dfd6f69-05a4-b105-0edd-c1863967d0b7.png\" alt=\"LvIRKit_Panel.png\"></a></p>\n\n<p>LabVIEW 2014で作成。Toolkitやドライバは特に必要ありません。</p>\n\n<h1>\n<span id=\"感想\" class=\"fragment\"></span><a href=\"#%E6%84%9F%E6%83%B3\"><i class=\"fa fa-link\"></i></a>感想</h1>\n\n<p>IRKitはAmazonで7～8千円で手に入る。電子工作しなくても手近な家電を操作できるようになるので便利。<br>\n温度センサーと組み合わせれば、気温にあわせて扇風機のOn/Offを自動化とか手軽に実現できそう。</p>\n\n<p>欠点、というか不便なところもある。<br>\nIRKitというか赤外線リモコンだと、機器の状態が取得できない。<br>\n扇風機にしてもＴＶにしても電源ボタンを押すという操作はできても、実際にOnなのかOffなのかわからない。<br>\n目の前にあれば人間が判定できるが、それでも反応が遅いとつい連打してしまって点いたり消えたり繰り返して気持ち悪いことがある。<br>\nあとは、スマフォのアプリだとスマフォごとに学習操作が必要なので、データを簡単に共有できる方法があるといいなと思う。</p>\n\n<h1>\n<span id=\"tips\" class=\"fragment\"></span><a href=\"#tips\"><i class=\"fa fa-link\"></i></a>Tips</h1>\n\n<p>IRKit公式サイトでは curl を使って解説していますが、Windowsには標準では入ってません。<br>\n\"Git for Windows\"にcurlコマンドが含まれていますので、もし、Gitを使っていて、\"Git for Windows\"をインストールしているなら、Git bashから curlコマンドが使えます。</p>\n\n<h1>\n<span id=\"参考\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83\"><i class=\"fa fa-link\"></i></a>参考</h1>\n\n<ul>\n<li><a href=\"http://getirkit.com/\">IRKit(公式)</a></li>\n<li><a href=\"http://qiita.com/kazuqqfp/items/079cdbd1e1997dedc512\" id=\"reference-eb19d911201ba41e74af\">Qiita記事「IRKitを使ってターミナルで家電を操作する」</a></li>\n</ul>\n",
    "body": "\n# LabVIEWでIRKit\n\nIRKit(学習機能付リモコン)を使って、ＴＶや扇風機などのリモコン操作、やってみました。\nWiFi経由でhttpクライアント関数で読み取ったデータを送信するだけなので、LabVIEWからも簡単にできました。\n\n学習リモコンとして使うならiPhone/Androidアプリをダウンロードすればいいだけ、なのですが、温度センサーなどを組み合わせてちょっとした自動化にも使えそう、ということでLabVIEWで作ってみました。\n\n# 初期設定はiPhone/Androidアプリで\n\n残念ながら、初期設定には、iPhone/Androidアプリが必須です。WiFi環境も必要です。\nそれとIRKitにはバッテリーがないので、使うときはUSB給電が必要。\n\n# IRKitでリモコン操作\n\nIRKitとの通信は httpGet/httpPostなので、LabVIEWのhttpクライアント関数だけでできます。\n\n## 手順\n\n操作したいリモコンの赤外線信号をIRKit経由で読み取って、読み取った赤外線信号のデータをhttpPostすれば、IRKitから赤外線で対象の家電にリモコンの信号が送信される、という仕組みです。\n\n## IRKitのIPアドレスの取得\nhttp通信するのにIRKitのIPアドレスが必要ですが、それを調べるのが一番の難関かもしれません。\nDHCPのみでIPアドレスを固定できないので、IRKitを電源On/OffするたびにIPアドレスが変わる可能性があります。\nIRKitの公式サイトでは Bonjour で調べる方法が紹介されていましたが、Windowsには標準には入っていません。\nコマンドプロンプトから、IRKitのデバイス名に\".local\"をつけてpingするとIPアドレスが表示されるようです。\n\nこんな感じ\n`> ping <IRKit名>.local`\n\n\n## リモコン信号の取得\n\nIRKitに向けてリモコンボタンを押した後、2,3秒のタイムラグをおいてLED点滅した後、httpGetすると、JSON形式文字列データでリモコン信号のデータが受信できます。\n一度しか読み取れないので、もし、失敗したら、もう一度、リモコンボタンを押すところからやり直します。\n\nVIスニペット\n![IRKit_Messages_GET_vi.png](https://qiita-image-store.s3.amazonaws.com/0/43526/15fd084b-54d7-f0f6-0397-da2748b7f0b8.png)\n\n\n## リモコン信号の送信\n\n取得したリモコン信号データ(JSON形式文字列)をhttpPostする\n\nVIスニペット\n![IRKit_Messages_POST_vi.png](https://qiita-image-store.s3.amazonaws.com/0/43526/ff5dbb30-a84f-6208-0817-4e05d49b886a.png)\n\n\n# アプリケーション作ってみた\n\n簡単なアプリケーションにしてみました。githubにソース公開します。\n\n[LvIRKit github](https://github.com/alucky4416/LvIRKIT)\n\n画面イメージ\n![LvIRKit_Panel.png](https://qiita-image-store.s3.amazonaws.com/0/43526/9dfd6f69-05a4-b105-0edd-c1863967d0b7.png)\n\nLabVIEW 2014で作成。Toolkitやドライバは特に必要ありません。\n\n\n# 感想\nIRKitはAmazonで7～8千円で手に入る。電子工作しなくても手近な家電を操作できるようになるので便利。\n温度センサーと組み合わせれば、気温にあわせて扇風機のOn/Offを自動化とか手軽に実現できそう。\n\n欠点、というか不便なところもある。\nIRKitというか赤外線リモコンだと、機器の状態が取得できない。\n扇風機にしてもＴＶにしても電源ボタンを押すという操作はできても、実際にOnなのかOffなのかわからない。\n目の前にあれば人間が判定できるが、それでも反応が遅いとつい連打してしまって点いたり消えたり繰り返して気持ち悪いことがある。\nあとは、スマフォのアプリだとスマフォごとに学習操作が必要なので、データを簡単に共有できる方法があるといいなと思う。\n\n# Tips\nIRKit公式サイトでは curl を使って解説していますが、Windowsには標準では入ってません。\n\"Git for Windows\"にcurlコマンドが含まれていますので、もし、Gitを使っていて、\"Git for Windows\"をインストールしているなら、Git bashから curlコマンドが使えます。\n\n# 参考\n- [IRKit(公式)](http://getirkit.com/)\n- [Qiita記事「IRKitを使ってターミナルで家電を操作する」](http://qiita.com/kazuqqfp/items/079cdbd1e1997dedc512)\n",
    "coediting": false,
    "created_at": "2016-07-30T14:29:20+09:00",
    "group": null,
    "id": "98f154720f125395a6f2",
    "private": false,
    "tags": [
      {
        "name": "LabVIEW",
        "versions": []
      },
      {
        "name": "IRKit",
        "versions": []
      }
    ],
    "title": "LabVIEW で IRKit",
    "updated_at": "2016-07-30T14:32:12+09:00",
    "url": "http://qiita.com/alucky4416/items/98f154720f125395a6f2",
    "user": {
      "description": "LabVIEW開発がおも(一応CLA)、幅を広げるべくLinux,Qt, RubyOnRails等々、勉強中。",
      "facebook_id": "",
      "followees_count": 1,
      "followers_count": 4,
      "github_login_name": "alucky4416",
      "id": "alucky4416",
      "items_count": 21,
      "linkedin_id": "",
      "location": "",
      "name": "",
      "organization": "",
      "permanent_id": 43526,
      "profile_image_url": "https://avatars.githubusercontent.com/u/7434625?",
      "twitter_screen_name": null,
      "website_url": ""
    }
  },
  {
    "rendered_body": "\n<h1>\n<span id=\"espressoでrecyclerviewの中身を比較\" class=\"fragment\"></span><a href=\"#espresso%E3%81%A7recyclerview%E3%81%AE%E4%B8%AD%E8%BA%AB%E3%82%92%E6%AF%94%E8%BC%83\"><i class=\"fa fa-link\"></i></a>EspressoでRecyclerViewの中身を比較</h1>\n\n<p>Espressoに標準で用意されていないので、自分でmatherを作る必要があります</p>\n\n<ul>\n<li>RecyclerViewに用意されているfind系のメソッドにはこのようなものがあります\n\n<ul>\n<li><code>findChildViewUnder(float x, float y)</code></li>\n<li><code>findContainingItemView(View view)</code></li>\n<li><code>findContainingViewHolder(View view)</code></li>\n<li><code>findViewHolderForAdapterPosition(int position)</code></li>\n<li><code>findViewHolderForItemId(long id)</code></li>\n<li><code>findViewHolderForLayoutPosition(int position)</code></li>\n<li><code>findViewHolderForPosition(int position)</code></li>\n</ul>\n</li>\n</ul>\n\n<p>今回はRecyclerViewの <code>findViewHolderForAdapterPosition(int position)</code>を使用します<br>\n適宜 使いやすいメソッドを使用して下さい </p>\n\n<h2>\n<span id=\"viewholder\" class=\"fragment\"></span><a href=\"#viewholder\"><i class=\"fa fa-link\"></i></a>ViewHolder</h2>\n\n<div class=\"code-frame\" data-lang=\"kotlin\"><div class=\"highlight\"><pre>\n<span class=\"k\">class</span> <span class=\"nc\">MyViewHolder</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">:</span> <span class=\"n\">View</span><span class=\"p\">)</span> <span class=\"p\">:</span> <span class=\"n\">RecyclerView</span><span class=\"p\">.</span><span class=\"n\">ViewHolder</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">var</span> <span class=\"py\">title</span><span class=\"p\">:</span> <span class=\"n\">TextView</span>           \n            <span class=\"p\">...</span>\n<span class=\"p\">}</span>\n</pre></div></div>\n\n<h2>\n<span id=\"matcherのメソッドを作成\" class=\"fragment\"></span><a href=\"#matcher%E3%81%AE%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E3%82%92%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>matcherのメソッドを作成</h2>\n\n<div class=\"code-frame\" data-lang=\"kotlin\"><div class=\"highlight\"><pre>\n  <span class=\"k\">fun</span> <span class=\"nf\">hasText</span><span class=\"p\">(</span><span class=\"n\">position</span><span class=\"p\">:</span> <span class=\"n\">Int</span><span class=\"p\">,</span> <span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"n\">String</span><span class=\"p\">)</span> <span class=\"p\">=</span> <span class=\"k\">object</span> <span class=\"err\">: </span><span class=\"nc\">TypeSafeMatcher</span><span class=\"p\">&lt;</span><span class=\"n\">View</span><span class=\"p\">&gt;()</span> <span class=\"p\">{</span>\n        <span class=\"k\">var</span> <span class=\"py\">innerText</span><span class=\"p\">:</span> <span class=\"n\">String</span><span class=\"p\">?</span> <span class=\"p\">=</span> <span class=\"k\">null</span>\n\n        <span class=\"k\">override</span> <span class=\"k\">fun</span> <span class=\"nf\">describeTo</span><span class=\"p\">(</span><span class=\"n\">description</span><span class=\"p\">:</span> <span class=\"n\">Description</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">description</span><span class=\"p\">.</span><span class=\"n\">appendText</span><span class=\"p\">(</span><span class=\"n\">String</span><span class=\"p\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">text</span> <span class=\"p\">+</span> <span class=\"s\">\"is not equal to %s.\"</span><span class=\"p\">,</span> <span class=\"n\">text</span><span class=\"p\">))</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"k\">override</span> <span class=\"k\">fun</span> <span class=\"nf\">matchesSafely</span><span class=\"p\">(</span><span class=\"n\">view</span><span class=\"p\">:</span> <span class=\"n\">View</span><span class=\"p\">):</span> <span class=\"n\">Boolean</span> <span class=\"p\">{</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">view</span> <span class=\"p\">!</span><span class=\"k\">is</span> <span class=\"n\">RecyclerView</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"k\">false</span>\n\n            <span class=\"k\">val</span> <span class=\"py\">holder</span> <span class=\"p\">=</span> <span class=\"n\">view</span><span class=\"p\">.</span><span class=\"n\">findViewHolderForAdapterPosition</span><span class=\"p\">(</span><span class=\"n\">position</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">MyViewHolder</span>\n            <span class=\"n\">innerText</span> <span class=\"p\">=</span> <span class=\"n\">holder</span><span class=\"p\">.</span><span class=\"n\">title</span><span class=\"p\">.</span><span class=\"n\">text</span><span class=\"p\">.</span><span class=\"n\">toString</span><span class=\"p\">()</span>\n            <span class=\"k\">return</span> <span class=\"n\">holder</span><span class=\"p\">.</span><span class=\"n\">description</span><span class=\"p\">.</span><span class=\"n\">text</span> <span class=\"p\">==</span> <span class=\"n\">text</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n</pre></div></div>\n\n<h2>\n<span id=\"使用側\" class=\"fragment\"></span><a href=\"#%E4%BD%BF%E7%94%A8%E5%81%B4\"><i class=\"fa fa-link\"></i></a>使用側</h2>\n\n<div class=\"code-frame\" data-lang=\"kotlin\"><div class=\"highlight\"><pre>\n<span class=\"n\">@Test</span>\n<span class=\"k\">fun</span> <span class=\"nf\">testRecyclerView</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">val</span> <span class=\"py\">position</span> <span class=\"p\">=</span> <span class=\"m\">0</span>\n    <span class=\"k\">val</span> <span class=\"py\">text</span> <span class=\"p\">=</span> <span class=\"s\">\"hoge\"</span>\n    <span class=\"n\">onView</span><span class=\"p\">(</span><span class=\"n\">withId</span><span class=\"p\">(</span><span class=\"n\">R</span><span class=\"p\">.</span><span class=\"n\">id</span><span class=\"p\">.</span><span class=\"n\">recyclerView</span><span class=\"p\">)).</span><span class=\"n\">check</span><span class=\"p\">(</span><span class=\"n\">matches</span><span class=\"p\">(</span><span class=\"n\">hasText</span><span class=\"p\">(</span><span class=\"n\">position</span><span class=\"p\">,</span> <span class=\"n\">text</span><span class=\"p\">)))</span>\n<span class=\"p\">}</span>\n</pre></div></div>\n",
    "body": "\n# EspressoでRecyclerViewの中身を比較\n\nEspressoに標準で用意されていないので、自分でmatherを作る必要があります\n\n* RecyclerViewに用意されているfind系のメソッドにはこのようなものがあります\n - `findChildViewUnder(float x, float y)`\n - `findContainingItemView(View view)`\n - `findContainingViewHolder(View view)`\n - `findViewHolderForAdapterPosition(int position)`\n - `findViewHolderForItemId(long id)`\n - `findViewHolderForLayoutPosition(int position)`\n - `findViewHolderForPosition(int position)`\n\n今回はRecyclerViewの `findViewHolderForAdapterPosition(int position)`を使用します\n適宜 使いやすいメソッドを使用して下さい \n\n## ViewHolder\n\n```kotlin\nclass MyViewHolder(v: View) : RecyclerView.ViewHolder(v) {\n            var title: TextView           \n            ...\n}\n```\n\n## matcherのメソッドを作成\n\n``` kotlin\n  fun hasText(position: Int, text: String) = object : TypeSafeMatcher<View>() {\n        var innerText: String? = null\n\n        override fun describeTo(description: Description) {\n            description.appendText(String.format(text + \"is not equal to %s.\", text))\n        }\n\n        override fun matchesSafely(view: View): Boolean {\n            if (view !is RecyclerView) return false\n\n            val holder = view.findViewHolderForAdapterPosition(position) as MyViewHolder\n            innerText = holder.title.text.toString()\n            return holder.description.text == text\n        }\n    }\n```\n\n## 使用側\n\n```kotlin\n@Test\nfun testRecyclerView() {\n    val position = 0\n    val text = \"hoge\"\n    onView(withId(R.id.recyclerView)).check(matches(hasText(position, text)))\n}\n```\n",
    "coediting": false,
    "created_at": "2016-07-30T13:03:56+09:00",
    "group": null,
    "id": "26ee7b18b11635cfc621",
    "private": false,
    "tags": [
      {
        "name": "Android",
        "versions": []
      },
      {
        "name": "Espresso",
        "versions": []
      }
    ],
    "title": "EspressoでRecyclerViewの中身を比較",
    "updated_at": "2016-07-30T13:03:56+09:00",
    "url": "http://qiita.com/AAkira@github/items/26ee7b18b11635cfc621",
    "user": {
      "description": "",
      "facebook_id": "",
      "followees_count": 0,
      "followers_count": 3,
      "github_login_name": "AAkira",
      "id": "AAkira@github",
      "items_count": 9,
      "linkedin_id": "",
      "location": "Tokyo, Japan",
      "name": "",
      "organization": "CyberAgent, Inc.",
      "permanent_id": 22527,
      "profile_image_url": "https://secure.gravatar.com/avatar/daec7e5cd5fae384eda88037d937343b?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
      "twitter_screen_name": "_A_Akira",
      "website_url": ""
    }
  },
  {
    "rendered_body": "<p>Firebase AuthenticationをGoogle認証で試してみたのでメモ</p>\n\n<p>公式サンプルを参考にしながら<br>\n<a href=\"https://github.com/firebase/quickstart-android/tree/master/auth\" class=\"autolink\">https://github.com/firebase/quickstart-android/tree/master/auth</a></p>\n\n<h1>\n<span id=\"事前準備\" class=\"fragment\"></span><a href=\"#%E4%BA%8B%E5%89%8D%E6%BA%96%E5%82%99\"><i class=\"fa fa-link\"></i></a>事前準備</h1>\n\n<p>Android Studioでプロジェクト作成<br>\nFirebase Consoleでプロジェクト作成</p>\n\n<h1>\n<span id=\"google認証の有効化\" class=\"fragment\"></span><a href=\"#google%E8%AA%8D%E8%A8%BC%E3%81%AE%E6%9C%89%E5%8A%B9%E5%8C%96\"><i class=\"fa fa-link\"></i></a>Google認証の有効化</h1>\n\n<p>Firebase ConsoleでAuthのログイン方法からGoogleを有効にする</p>\n\n<h1>\n<span id=\"フィンガープリントの確認\" class=\"fragment\"></span><a href=\"#%E3%83%95%E3%82%A3%E3%83%B3%E3%82%AC%E3%83%BC%E3%83%97%E3%83%AA%E3%83%B3%E3%83%88%E3%81%AE%E7%A2%BA%E8%AA%8D\"><i class=\"fa fa-link\"></i></a>フィンガープリントの確認</h1>\n\n<p>Google認証を使うには証明書フィンガープリントの設定が必要</p>\n\n<p>この設定に気づかず、結構ハマった</p>\n\n<p>詳細は公式ドキュメントで<br>\n<a href=\"https://developers.google.com/android/guides/client-auth\" class=\"autolink\">https://developers.google.com/android/guides/client-auth</a></p>\n\n<p>以下のコマンドで確認する(Linux)</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>\nkeytool -exportcert -alias androiddebugkey -keystore ~/.android/debug.keystore -list -v -storepass android\n</pre></div></div>\n\n<p>表示されたフィンガープリントのSHA1を確認する</p>\n\n<h1>\n<span id=\"google-servicesjsonの生成\" class=\"fragment\"></span><a href=\"#google-servicesjson%E3%81%AE%E7%94%9F%E6%88%90\"><i class=\"fa fa-link\"></i></a>google-services.jsonの生成</h1>\n\n<p>Firebase Consoleで以下の作業を行う。</p>\n\n<ul>\n<li>Overviewにある「AndroidアプリにFirebaseを追加」をクリック</li>\n<li>Android Studioで作成したアプリのパッケージ名を入力</li>\n<li>先ほど確認したSHA1を入力</li>\n<li>「アプリを追加」をクリック</li>\n<li>\n<code>google-services.json</code>がダウンロードされる</li>\n</ul>\n\n<h1>\n<span id=\"firebaseのセットアップ\" class=\"fragment\"></span><a href=\"#firebase%E3%81%AE%E3%82%BB%E3%83%83%E3%83%88%E3%82%A2%E3%83%83%E3%83%97\"><i class=\"fa fa-link\"></i></a>Firebaseのセットアップ</h1>\n\n<p>Android Studioで以下の作業を行う。</p>\n\n<h2>\n<span id=\"google-servicesjsonをモジュール直下に配置\" class=\"fragment\"></span><a href=\"#google-servicesjson%E3%82%92%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E7%9B%B4%E4%B8%8B%E3%81%AB%E9%85%8D%E7%BD%AE\"><i class=\"fa fa-link\"></i></a><code>google-services.json</code>をモジュール直下に配置</h2>\n\n<p>デフォルトなら</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>\n&lt;PROJECT_ROOT&gt;/app/google-services.json\n</pre></div></div>\n\n<h2>\n<span id=\"プロジェクトルートのbuildgradleを編集\" class=\"fragment\"></span><a href=\"#%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%83%AB%E3%83%BC%E3%83%88%E3%81%AEbuildgradle%E3%82%92%E7%B7%A8%E9%9B%86\"><i class=\"fa fa-link\"></i></a>プロジェクトルートのbuild.gradleを編集</h2>\n\n<div class=\"code-frame\" data-lang=\"gradle\">\n<div class=\"code-lang\"><span class=\"bold\">&lt;PROJECT_ROOT&gt;/build.gradle</span></div>\n<div class=\"highlight\"><pre>\nbuildscript {\n  dependencies {\n    // 追加\n    classpath 'com.google.gms:google-services:3.0.0'\n  }\n}\n</pre></div>\n</div>\n\n<h2>\n<span id=\"モジュールのbuildgradleを編集\" class=\"fragment\"></span><a href=\"#%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E3%81%AEbuildgradle%E3%82%92%E7%B7%A8%E9%9B%86\"><i class=\"fa fa-link\"></i></a>モジュールのbuild.gradleを編集</h2>\n\n<div class=\"code-frame\" data-lang=\"gradle\">\n<div class=\"code-lang\"><span class=\"bold\">&lt;PROJECT_ROOT&gt;/&lt;APP_MODULE&gt;/build.gradle</span></div>\n<div class=\"highlight\"><pre>\ndependencies {\n  compile fileTree(dir: 'libs', include: ['*.jar'])\n  testCompile 'junit:junit:4.12'\n  compile 'com.android.support:appcompat-v7:24.1.1'\n\n  // 以下を追加\n  compile 'com.google.firebase:firebase-core:9.2.1'\n  compile 'com.google.firebase:firebase-auth:9.2.1'\n  compile 'com.google.android.gms:play-services-auth:9.2.1'\n}\n\n// 追加\napply plugin: 'com.google.gms.google-services'\n</pre></div>\n</div>\n\n<h2>\n<span id=\"manifestの編集\" class=\"fragment\"></span><a href=\"#manifest%E3%81%AE%E7%B7%A8%E9%9B%86\"><i class=\"fa fa-link\"></i></a>Manifestの編集</h2>\n\n<p>ネットワーク通信のPermissionを追加</p>\n\n<div class=\"code-frame\" data-lang=\"xml\">\n<div class=\"code-lang\"><span class=\"bold\">AndroidManifest.xml</span></div>\n<div class=\"highlight\"><pre>\n<span class=\"nt\">&lt;uses-permission</span> <span class=\"na\">android:name=</span><span class=\"s\">\"android.permission.INTERNET\"</span> <span class=\"nt\">/&gt;</span>\n</pre></div>\n</div>\n\n<h1>\n<span id=\"google認証の実装\" class=\"fragment\"></span><a href=\"#google%E8%AA%8D%E8%A8%BC%E3%81%AE%E5%AE%9F%E8%A3%85\"><i class=\"fa fa-link\"></i></a>Google認証の実装</h1>\n\n<p>ログイン画面のレイアウト作成</p>\n\n<div class=\"code-frame\" data-lang=\"xml\">\n<div class=\"code-lang\"><span class=\"bold\">activity_login.xml</span></div>\n<div class=\"highlight\"><pre>\n<span class=\"cp\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span>\n<span class=\"nt\">&lt;RelativeLayout</span> <span class=\"na\">xmlns:android=</span><span class=\"s\">\"http://schemas.android.com/apk/res/android\"</span>\n    <span class=\"na\">xmlns:tools=</span><span class=\"s\">\"http://schemas.android.com/tools\"</span>\n    <span class=\"na\">android:layout_width=</span><span class=\"s\">\"match_parent\"</span>\n    <span class=\"na\">android:layout_height=</span><span class=\"s\">\"match_parent\"</span>\n    <span class=\"na\">android:paddingBottom=</span><span class=\"s\">\"@dimen/activity_vertical_margin\"</span>\n    <span class=\"na\">android:paddingLeft=</span><span class=\"s\">\"@dimen/activity_horizontal_margin\"</span>\n    <span class=\"na\">android:paddingRight=</span><span class=\"s\">\"@dimen/activity_horizontal_margin\"</span>\n    <span class=\"na\">android:paddingTop=</span><span class=\"s\">\"@dimen/activity_vertical_margin\"</span>\n    <span class=\"na\">tools:context=</span><span class=\"s\">\".LoginActivity\"</span><span class=\"nt\">&gt;</span>\n\n    <span class=\"nt\">&lt;Button</span>\n        <span class=\"na\">android:layout_width=</span><span class=\"s\">\"wrap_content\"</span>\n        <span class=\"na\">android:layout_height=</span><span class=\"s\">\"wrap_content\"</span>\n        <span class=\"na\">android:text=</span><span class=\"s\">\"Login by Google\"</span>\n        <span class=\"na\">android:id=</span><span class=\"s\">\"@+id/googleLoginButton\"</span>\n        <span class=\"na\">android:layout_centerVertical=</span><span class=\"s\">\"true\"</span>\n        <span class=\"na\">android:layout_centerHorizontal=</span><span class=\"s\">\"true\"</span> <span class=\"nt\">/&gt;</span>\n<span class=\"nt\">&lt;/RelativeLayout&gt;</span>\n</pre></div>\n</div>\n\n<p>ログイン画面のActivityを生成</p>\n\n<div class=\"code-frame\" data-lang=\"java\">\n<div class=\"code-lang\"><span class=\"bold\">LoginActivity.java</span></div>\n<div class=\"highlight\"><pre>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">LoginActivity</span> <span class=\"kd\">extends</span> <span class=\"n\">AppCompatActivity</span> <span class=\"kd\">implements</span>\n<span class=\"n\">GoogleApiClient</span><span class=\"o\">.</span><span class=\"na\">OnConnectionFailedListener</span> <span class=\"o\">{</span>\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kd\">final</span> <span class=\"kt\">int</span> <span class=\"n\">RC_SIGN_IN</span> <span class=\"o\">=</span> <span class=\"mi\">9001</span><span class=\"o\">;</span>\n\n    <span class=\"kd\">private</span> <span class=\"n\">FirebaseAuth</span> <span class=\"n\">mAuth</span><span class=\"o\">;</span>\n\n    <span class=\"kd\">private</span> <span class=\"n\">GoogleApiClient</span> <span class=\"n\">mGoogleApiClient</span><span class=\"o\">;</span>\n\n    <span class=\"nd\">@Override</span>\n    <span class=\"kd\">protected</span> <span class=\"kt\">void</span> <span class=\"nf\">onCreate</span><span class=\"o\">(</span><span class=\"n\">Bundle</span> <span class=\"n\">savedInstanceState</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kd\">super</span><span class=\"o\">.</span><span class=\"na\">onCreate</span><span class=\"o\">(</span><span class=\"n\">savedInstanceState</span><span class=\"o\">);</span>\n        <span class=\"n\">setContentView</span><span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">.</span><span class=\"na\">layout</span><span class=\"o\">.</span><span class=\"na\">activity_login</span><span class=\"o\">);</span>\n\n        <span class=\"n\">findViewById</span><span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">.</span><span class=\"na\">id</span><span class=\"o\">.</span><span class=\"na\">googleLoginButton</span><span class=\"o\">).</span><span class=\"na\">setOnClickListener</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"n\">View</span><span class=\"o\">.</span><span class=\"na\">OnClickListener</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n            <span class=\"nd\">@Override</span>\n            <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">onClick</span><span class=\"o\">(</span><span class=\"n\">View</span> <span class=\"n\">view</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">Intent</span> <span class=\"n\">signInIntent</span> <span class=\"o\">=</span> <span class=\"n\">Auth</span><span class=\"o\">.</span><span class=\"na\">GoogleSignInApi</span><span class=\"o\">.</span><span class=\"na\">getSignInIntent</span><span class=\"o\">(</span><span class=\"n\">mGoogleApiClient</span><span class=\"o\">);</span>\n                <span class=\"n\">startActivityForResult</span><span class=\"o\">(</span><span class=\"n\">signInIntent</span><span class=\"o\">,</span> <span class=\"n\">RC_SIGN_IN</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">});</span>\n\n        <span class=\"n\">mAuth</span> <span class=\"o\">=</span> <span class=\"n\">FirebaseAuth</span><span class=\"o\">.</span><span class=\"na\">getInstance</span><span class=\"o\">();</span>\n\n        <span class=\"n\">GoogleSignInOptions</span> <span class=\"n\">gso</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">GoogleSignInOptions</span><span class=\"o\">.</span><span class=\"na\">Builder</span><span class=\"o\">(</span><span class=\"n\">GoogleSignInOptions</span><span class=\"o\">.</span><span class=\"na\">DEFAULT_SIGN_IN</span><span class=\"o\">)</span>\n                <span class=\"o\">.</span><span class=\"na\">requestIdToken</span><span class=\"o\">(</span><span class=\"n\">getString</span><span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">.</span><span class=\"na\">string</span><span class=\"o\">.</span><span class=\"na\">default_web_client_id</span><span class=\"o\">))</span>\n                <span class=\"o\">.</span><span class=\"na\">requestEmail</span><span class=\"o\">()</span>\n                <span class=\"o\">.</span><span class=\"na\">build</span><span class=\"o\">();</span>\n\n        <span class=\"n\">mGoogleApiClient</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">GoogleApiClient</span><span class=\"o\">.</span><span class=\"na\">Builder</span><span class=\"o\">(</span><span class=\"k\">this</span><span class=\"o\">)</span>\n                <span class=\"o\">.</span><span class=\"na\">enableAutoManage</span><span class=\"o\">(</span><span class=\"k\">this</span><span class=\"o\">,</span> <span class=\"k\">this</span><span class=\"o\">)</span>\n                <span class=\"o\">.</span><span class=\"na\">addApi</span><span class=\"o\">(</span><span class=\"n\">Auth</span><span class=\"o\">.</span><span class=\"na\">GOOGLE_SIGN_IN_API</span><span class=\"o\">,</span> <span class=\"n\">gso</span><span class=\"o\">)</span>\n                <span class=\"o\">.</span><span class=\"na\">build</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">private</span> <span class=\"kt\">void</span> <span class=\"nf\">changeActivity</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"n\">Intent</span> <span class=\"n\">intent</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nf\">Intent</span><span class=\"o\">(</span><span class=\"n\">LoginActivity</span><span class=\"o\">.</span><span class=\"na\">this</span><span class=\"o\">,</span> <span class=\"n\">MainActivity</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">);</span>\n        <span class=\"n\">startActivity</span><span class=\"o\">(</span><span class=\"n\">intent</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"nd\">@Override</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">onConnectionFailed</span><span class=\"o\">(</span><span class=\"nd\">@NonNull</span> <span class=\"n\">ConnectionResult</span> <span class=\"n\">connectionResult</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">Toast</span><span class=\"o\">.</span><span class=\"na\">makeText</span><span class=\"o\">(</span><span class=\"k\">this</span><span class=\"o\">,</span> <span class=\"s\">\"Google Play Services error.\"</span><span class=\"o\">,</span> <span class=\"n\">Toast</span><span class=\"o\">.</span><span class=\"na\">LENGTH_SHORT</span><span class=\"o\">).</span><span class=\"na\">show</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"nd\">@Override</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">onActivityResult</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">requestCode</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">resultCode</span><span class=\"o\">,</span> <span class=\"n\">Intent</span> <span class=\"n\">data</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kd\">super</span><span class=\"o\">.</span><span class=\"na\">onActivityResult</span><span class=\"o\">(</span><span class=\"n\">requestCode</span><span class=\"o\">,</span> <span class=\"n\">resultCode</span><span class=\"o\">,</span> <span class=\"n\">data</span><span class=\"o\">);</span>\n\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">requestCode</span> <span class=\"o\">==</span> <span class=\"n\">RC_SIGN_IN</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">GoogleSignInResult</span> <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">Auth</span><span class=\"o\">.</span><span class=\"na\">GoogleSignInApi</span><span class=\"o\">.</span><span class=\"na\">getSignInResultFromIntent</span><span class=\"o\">(</span><span class=\"n\">data</span><span class=\"o\">);</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"na\">isSuccess</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n                <span class=\"n\">GoogleSignInAccount</span> <span class=\"n\">account</span> <span class=\"o\">=</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"na\">getSignInAccount</span><span class=\"o\">();</span>\n                <span class=\"n\">firebaseAuthWithGoogle</span><span class=\"o\">(</span><span class=\"n\">account</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n                <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"na\">getStatus</span><span class=\"o\">());</span>\n                <span class=\"n\">Toast</span><span class=\"o\">.</span><span class=\"na\">makeText</span><span class=\"o\">(</span><span class=\"n\">LoginActivity</span><span class=\"o\">.</span><span class=\"na\">this</span><span class=\"o\">,</span> <span class=\"s\">\"Error\"</span><span class=\"o\">,</span> <span class=\"n\">Toast</span><span class=\"o\">.</span><span class=\"na\">LENGTH_SHORT</span><span class=\"o\">).</span><span class=\"na\">show</span><span class=\"o\">();</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">private</span> <span class=\"kt\">void</span> <span class=\"nf\">firebaseAuthWithGoogle</span><span class=\"o\">(</span><span class=\"n\">GoogleSignInAccount</span> <span class=\"n\">acct</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">AuthCredential</span> <span class=\"n\">credential</span> <span class=\"o\">=</span> <span class=\"n\">GoogleAuthProvider</span><span class=\"o\">.</span><span class=\"na\">getCredential</span><span class=\"o\">(</span><span class=\"n\">acct</span><span class=\"o\">.</span><span class=\"na\">getIdToken</span><span class=\"o\">(),</span> <span class=\"kc\">null</span><span class=\"o\">);</span>\n        <span class=\"n\">mAuth</span><span class=\"o\">.</span><span class=\"na\">signInWithCredential</span><span class=\"o\">(</span><span class=\"n\">credential</span><span class=\"o\">)</span>\n                <span class=\"o\">.</span><span class=\"na\">addOnCompleteListener</span><span class=\"o\">(</span><span class=\"k\">this</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"n\">OnCompleteListener</span><span class=\"o\">&lt;</span><span class=\"n\">AuthResult</span><span class=\"o\">&gt;()</span> <span class=\"o\">{</span>\n                    <span class=\"nd\">@Override</span>\n                    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">onComplete</span><span class=\"o\">(</span><span class=\"nd\">@NonNull</span> <span class=\"n\">Task</span><span class=\"o\">&lt;</span><span class=\"n\">AuthResult</span><span class=\"o\">&gt;</span> <span class=\"n\">task</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">task</span><span class=\"o\">.</span><span class=\"na\">isSuccessful</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n                            <span class=\"n\">changeActivity</span><span class=\"o\">();</span>\n                        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n                            <span class=\"n\">Toast</span><span class=\"o\">.</span><span class=\"na\">makeText</span><span class=\"o\">(</span><span class=\"n\">LoginActivity</span><span class=\"o\">.</span><span class=\"na\">this</span><span class=\"o\">,</span> <span class=\"n\">task</span><span class=\"o\">.</span><span class=\"na\">getException</span><span class=\"o\">().</span><span class=\"na\">getMessage</span><span class=\"o\">(),</span> <span class=\"n\">Toast</span><span class=\"o\">.</span><span class=\"na\">LENGTH_SHORT</span><span class=\"o\">).</span><span class=\"na\">show</span><span class=\"o\">();</span>\n                        <span class=\"o\">}</span>\n                    <span class=\"o\">}</span>\n                <span class=\"o\">});</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n</div>\n\n<p>ログインした後の画面も作成</p>\n\n<div class=\"code-frame\" data-lang=\"xml\">\n<div class=\"code-lang\"><span class=\"bold\">activity_main.xml</span></div>\n<div class=\"highlight\"><pre>\n<span class=\"cp\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span>\n<span class=\"nt\">&lt;RelativeLayout</span> <span class=\"na\">xmlns:android=</span><span class=\"s\">\"http://schemas.android.com/apk/res/android\"</span>\n    <span class=\"na\">xmlns:tools=</span><span class=\"s\">\"http://schemas.android.com/tools\"</span>\n    <span class=\"na\">android:layout_width=</span><span class=\"s\">\"match_parent\"</span>\n    <span class=\"na\">android:layout_height=</span><span class=\"s\">\"match_parent\"</span>\n    <span class=\"na\">android:paddingBottom=</span><span class=\"s\">\"@dimen/activity_vertical_margin\"</span>\n    <span class=\"na\">android:paddingLeft=</span><span class=\"s\">\"@dimen/activity_horizontal_margin\"</span>\n    <span class=\"na\">android:paddingRight=</span><span class=\"s\">\"@dimen/activity_horizontal_margin\"</span>\n    <span class=\"na\">android:paddingTop=</span><span class=\"s\">\"@dimen/activity_vertical_margin\"</span>\n    <span class=\"na\">tools:context=</span><span class=\"s\">\".LoginActivity\"</span><span class=\"nt\">&gt;</span>\n\n    <span class=\"nt\">&lt;TextView</span>\n        <span class=\"na\">android:layout_width=</span><span class=\"s\">\"wrap_content\"</span>\n        <span class=\"na\">android:layout_height=</span><span class=\"s\">\"wrap_content\"</span>\n        <span class=\"na\">android:text=</span><span class=\"s\">\"Login success!\"</span>\n        <span class=\"na\">android:id=</span><span class=\"s\">\"@+id/textView\"</span>\n        <span class=\"na\">android:layout_alignParentTop=</span><span class=\"s\">\"true\"</span>\n        <span class=\"na\">android:layout_centerHorizontal=</span><span class=\"s\">\"true\"</span>\n        <span class=\"na\">android:layout_marginTop=</span><span class=\"s\">\"48dp\"</span>\n        <span class=\"na\">android:textSize=</span><span class=\"s\">\"32dp\"</span> <span class=\"nt\">/&gt;</span>\n\n    <span class=\"nt\">&lt;Button</span>\n        <span class=\"na\">android:layout_width=</span><span class=\"s\">\"wrap_content\"</span>\n        <span class=\"na\">android:layout_height=</span><span class=\"s\">\"wrap_content\"</span>\n        <span class=\"na\">android:text=</span><span class=\"s\">\"Logout\"</span>\n        <span class=\"na\">android:id=</span><span class=\"s\">\"@+id/logoutButton\"</span>\n        <span class=\"na\">android:layout_centerVertical=</span><span class=\"s\">\"true\"</span>\n        <span class=\"na\">android:layout_centerHorizontal=</span><span class=\"s\">\"true\"</span>\n        <span class=\"na\">android:textSize=</span><span class=\"s\">\"26dp\"</span> <span class=\"nt\">/&gt;</span>\n<span class=\"nt\">&lt;/RelativeLayout&gt;</span>\n</pre></div>\n</div>\n\n<p>TextViewとログアウトボタンを配置</p>\n\n<p>MainActivityはログアウト処理だけ行うようにした</p>\n\n<div class=\"code-frame\" data-lang=\"java\">\n<div class=\"code-lang\"><span class=\"bold\">MainActivity.java</span></div>\n<div class=\"highlight\"><pre>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">MainActivity</span> <span class=\"kd\">extends</span> <span class=\"n\">AppCompatActivity</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">private</span> <span class=\"n\">FirebaseAuth</span> <span class=\"n\">mAuth</span><span class=\"o\">;</span>\n\n    <span class=\"nd\">@Override</span>\n    <span class=\"kd\">protected</span> <span class=\"kt\">void</span> <span class=\"nf\">onCreate</span><span class=\"o\">(</span><span class=\"n\">Bundle</span> <span class=\"n\">savedInstanceState</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kd\">super</span><span class=\"o\">.</span><span class=\"na\">onCreate</span><span class=\"o\">(</span><span class=\"n\">savedInstanceState</span><span class=\"o\">);</span>\n        <span class=\"n\">setContentView</span><span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">.</span><span class=\"na\">layout</span><span class=\"o\">.</span><span class=\"na\">activity_main</span><span class=\"o\">);</span>\n\n        <span class=\"n\">mAuth</span> <span class=\"o\">=</span> <span class=\"n\">FirebaseAuth</span><span class=\"o\">.</span><span class=\"na\">getInstance</span><span class=\"o\">();</span>\n\n        <span class=\"n\">findViewById</span><span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">.</span><span class=\"na\">id</span><span class=\"o\">.</span><span class=\"na\">logoutButton</span><span class=\"o\">).</span><span class=\"na\">setOnClickListener</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"n\">View</span><span class=\"o\">.</span><span class=\"na\">OnClickListener</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n            <span class=\"nd\">@Override</span>\n            <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">onClick</span><span class=\"o\">(</span><span class=\"n\">View</span> <span class=\"n\">view</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">mAuth</span><span class=\"o\">.</span><span class=\"na\">signOut</span><span class=\"o\">();</span>\n                <span class=\"n\">Intent</span> <span class=\"n\">intent</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nf\">Intent</span><span class=\"o\">(</span><span class=\"n\">MainActivity</span><span class=\"o\">.</span><span class=\"na\">this</span><span class=\"o\">,</span> <span class=\"n\">LoginActivity</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">);</span>\n                <span class=\"n\">startActivity</span><span class=\"o\">(</span><span class=\"n\">intent</span><span class=\"o\">);</span>\n                <span class=\"n\">finish</span><span class=\"o\">();</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">});</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n</div>\n\n<p>最後にManifestを編集</p>\n\n<div class=\"code-frame\" data-lang=\"xml\">\n<div class=\"code-lang\"><span class=\"bold\">AndroidManifest.xml</span></div>\n<div class=\"highlight\"><pre>\n        <span class=\"nt\">&lt;activity</span> <span class=\"na\">android:name=</span><span class=\"s\">\".LoginActivity\"</span><span class=\"nt\">&gt;</span>\n            <span class=\"nt\">&lt;intent-filter&gt;</span>\n                <span class=\"nt\">&lt;action</span> <span class=\"na\">android:name=</span><span class=\"s\">\"android.intent.action.MAIN\"</span> <span class=\"nt\">/&gt;</span>\n\n                <span class=\"nt\">&lt;category</span> <span class=\"na\">android:name=</span><span class=\"s\">\"android.intent.category.LAUNCHER\"</span> <span class=\"nt\">/&gt;</span>\n            <span class=\"nt\">&lt;/intent-filter&gt;</span>\n        <span class=\"nt\">&lt;/activity&gt;</span>\n        <span class=\"nt\">&lt;activity</span> <span class=\"na\">android:name=</span><span class=\"s\">\".MainActivity\"</span> <span class=\"nt\">/&gt;</span>\n</pre></div>\n</div>\n\n<p>これでアプリからGoogle認証すると、Firebase ConsoleのAuthにユーザが追加されてる</p>\n\n<p>前回のEmail・パスワード認証<br>\n<a href=\"http://qiita.com/Sert/items/36f1446afb1b694ebdaa\" class=\"autolink\" id=\"reference-5443b7b3bf01a9118b9c\">http://qiita.com/Sert/items/36f1446afb1b694ebdaa</a><br>\nに比べるとコード量が減ってるな、といった印象</p>\n\n<p>createAccountが無いのと、ログインもIntent飛ばしてるからかな、と</p>\n",
    "body": "Firebase AuthenticationをGoogle認証で試してみたのでメモ\n\n公式サンプルを参考にしながら\nhttps://github.com/firebase/quickstart-android/tree/master/auth\n\n# 事前準備\n\nAndroid Studioでプロジェクト作成\nFirebase Consoleでプロジェクト作成\n\n# Google認証の有効化\n\nFirebase ConsoleでAuthのログイン方法からGoogleを有効にする\n\n# フィンガープリントの確認\n\nGoogle認証を使うには証明書フィンガープリントの設定が必要\n\nこの設定に気づかず、結構ハマった\n\n詳細は公式ドキュメントで\nhttps://developers.google.com/android/guides/client-auth\n\n以下のコマンドで確認する(Linux)\n\n```\nkeytool -exportcert -alias androiddebugkey -keystore ~/.android/debug.keystore -list -v -storepass android\n```\n\n表示されたフィンガープリントのSHA1を確認する\n\n# google-services.jsonの生成\n\nFirebase Consoleで以下の作業を行う。\n\n- Overviewにある「AndroidアプリにFirebaseを追加」をクリック\n- Android Studioで作成したアプリのパッケージ名を入力\n- 先ほど確認したSHA1を入力\n- 「アプリを追加」をクリック\n- `google-services.json`がダウンロードされる\n\n# Firebaseのセットアップ\nAndroid Studioで以下の作業を行う。\n\n## `google-services.json`をモジュール直下に配置\n\nデフォルトなら\n\n```\n<PROJECT_ROOT>/app/google-services.json\n```\n\n## プロジェクトルートのbuild.gradleを編集\n\n```&lt;PROJECT_ROOT&gt;/build.gradle\nbuildscript {\n  dependencies {\n    // 追加\n    classpath 'com.google.gms:google-services:3.0.0'\n  }\n}\n```\n\n## モジュールのbuild.gradleを編集\n\n```&lt;PROJECT_ROOT&gt;/&lt;APP_MODULE&gt;/build.gradle\ndependencies {\n  compile fileTree(dir: 'libs', include: ['*.jar'])\n  testCompile 'junit:junit:4.12'\n  compile 'com.android.support:appcompat-v7:24.1.1'\n\n  // 以下を追加\n  compile 'com.google.firebase:firebase-core:9.2.1'\n  compile 'com.google.firebase:firebase-auth:9.2.1'\n  compile 'com.google.android.gms:play-services-auth:9.2.1'\n}\n\n// 追加\napply plugin: 'com.google.gms.google-services'\n```\n\n## Manifestの編集\n\nネットワーク通信のPermissionを追加\n\n```AndroidManifest.xml\n<uses-permission android:name=\"android.permission.INTERNET\" />\n```\n\n# Google認証の実装\n\nログイン画面のレイアウト作成\n\n```activity_login.xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:paddingBottom=\"@dimen/activity_vertical_margin\"\n    android:paddingLeft=\"@dimen/activity_horizontal_margin\"\n    android:paddingRight=\"@dimen/activity_horizontal_margin\"\n    android:paddingTop=\"@dimen/activity_vertical_margin\"\n    tools:context=\".LoginActivity\">\n\n    <Button\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Login by Google\"\n        android:id=\"@+id/googleLoginButton\"\n        android:layout_centerVertical=\"true\"\n        android:layout_centerHorizontal=\"true\" />\n</RelativeLayout>\n```\n\nログイン画面のActivityを生成\n\n```LoginActivity.java\npublic class LoginActivity extends AppCompatActivity implements\nGoogleApiClient.OnConnectionFailedListener {\n    private static final int RC_SIGN_IN = 9001;\n\n    private FirebaseAuth mAuth;\n\n    private GoogleApiClient mGoogleApiClient;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_login);\n\n        findViewById(R.id.googleLoginButton).setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                Intent signInIntent = Auth.GoogleSignInApi.getSignInIntent(mGoogleApiClient);\n                startActivityForResult(signInIntent, RC_SIGN_IN);\n            }\n        });\n\n        mAuth = FirebaseAuth.getInstance();\n\n        GoogleSignInOptions gso = new GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)\n                .requestIdToken(getString(R.string.default_web_client_id))\n                .requestEmail()\n                .build();\n\n        mGoogleApiClient = new GoogleApiClient.Builder(this)\n                .enableAutoManage(this, this)\n                .addApi(Auth.GOOGLE_SIGN_IN_API, gso)\n                .build();\n    }\n\n    private void changeActivity() {\n        Intent intent = new Intent(LoginActivity.this, MainActivity.class);\n        startActivity(intent);\n    }\n\n    @Override\n    public void onConnectionFailed(@NonNull ConnectionResult connectionResult) {\n        Toast.makeText(this, \"Google Play Services error.\", Toast.LENGTH_SHORT).show();\n    }\n\n    @Override\n    public void onActivityResult(int requestCode, int resultCode, Intent data) {\n        super.onActivityResult(requestCode, resultCode, data);\n\n        if (requestCode == RC_SIGN_IN) {\n            GoogleSignInResult result = Auth.GoogleSignInApi.getSignInResultFromIntent(data);\n            if (result.isSuccess()) {\n                GoogleSignInAccount account = result.getSignInAccount();\n                firebaseAuthWithGoogle(account);\n            } else {\n                System.out.println(result.getStatus());\n                Toast.makeText(LoginActivity.this, \"Error\", Toast.LENGTH_SHORT).show();\n            }\n        }\n    }\n\n    private void firebaseAuthWithGoogle(GoogleSignInAccount acct) {\n        AuthCredential credential = GoogleAuthProvider.getCredential(acct.getIdToken(), null);\n        mAuth.signInWithCredential(credential)\n                .addOnCompleteListener(this, new OnCompleteListener<AuthResult>() {\n                    @Override\n                    public void onComplete(@NonNull Task<AuthResult> task) {\n                        if (task.isSuccessful()) {\n                            changeActivity();\n                        } else {\n                            Toast.makeText(LoginActivity.this, task.getException().getMessage(), Toast.LENGTH_SHORT).show();\n                        }\n                    }\n                });\n    }\n}\n```\n\nログインした後の画面も作成\n\n```activity_main.xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:paddingBottom=\"@dimen/activity_vertical_margin\"\n    android:paddingLeft=\"@dimen/activity_horizontal_margin\"\n    android:paddingRight=\"@dimen/activity_horizontal_margin\"\n    android:paddingTop=\"@dimen/activity_vertical_margin\"\n    tools:context=\".LoginActivity\">\n\n    <TextView\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Login success!\"\n        android:id=\"@+id/textView\"\n        android:layout_alignParentTop=\"true\"\n        android:layout_centerHorizontal=\"true\"\n        android:layout_marginTop=\"48dp\"\n        android:textSize=\"32dp\" />\n\n    <Button\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Logout\"\n        android:id=\"@+id/logoutButton\"\n        android:layout_centerVertical=\"true\"\n        android:layout_centerHorizontal=\"true\"\n        android:textSize=\"26dp\" />\n</RelativeLayout>\n```\n\nTextViewとログアウトボタンを配置\n\nMainActivityはログアウト処理だけ行うようにした\n\n```MainActivity.java\npublic class MainActivity extends AppCompatActivity {\n\n    private FirebaseAuth mAuth;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        mAuth = FirebaseAuth.getInstance();\n\n        findViewById(R.id.logoutButton).setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                mAuth.signOut();\n                Intent intent = new Intent(MainActivity.this, LoginActivity.class);\n                startActivity(intent);\n                finish();\n            }\n        });\n    }\n}\n```\n\n最後にManifestを編集\n\n```AndroidManifest.xml\n        <activity android:name=\".LoginActivity\">\n            <intent-filter>\n                <action android:name=\"android.intent.action.MAIN\" />\n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n            </intent-filter>\n        </activity>\n        <activity android:name=\".MainActivity\" />\n```\n\nこれでアプリからGoogle認証すると、Firebase ConsoleのAuthにユーザが追加されてる\n\n前回のEmail・パスワード認証\nhttp://qiita.com/Sert/items/36f1446afb1b694ebdaa\nに比べるとコード量が減ってるな、といった印象\n\ncreateAccountが無いのと、ログインもIntent飛ばしてるからかな、と\n",
    "coediting": false,
    "created_at": "2016-07-30T01:08:14+09:00",
    "group": null,
    "id": "1fbdbf68dd087201a57b",
    "private": false,
    "tags": [
      {
        "name": "Android",
        "versions": []
      },
      {
        "name": "Firebase",
        "versions": []
      }
    ],
    "title": "Android Firebase Authentication (Google認証) メモ",
    "updated_at": "2016-07-30T01:08:14+09:00",
    "url": "http://qiita.com/Sert/items/1fbdbf68dd087201a57b",
    "user": {
      "description": "",
      "facebook_id": "",
      "followees_count": 0,
      "followers_count": 3,
      "github_login_name": null,
      "id": "Sert",
      "items_count": 8,
      "linkedin_id": "",
      "location": "",
      "name": "",
      "organization": "",
      "permanent_id": 69502,
      "profile_image_url": "https://pbs.twimg.com/profile_images/530533023578849281/5AFl9d2S_normal.jpeg",
      "twitter_screen_name": "DemoSert",
      "website_url": ""
    }
  },
  {
    "rendered_body": "\n<h1>\n<span id=\"概要\" class=\"fragment\"></span><a href=\"#%E6%A6%82%E8%A6%81\"><i class=\"fa fa-link\"></i></a>概要</h1>\n\n<p>Googleのビーコン規格EddystoneをRaspberry Pi2で使えるようにする方法</p>\n\n<h1>\n<span id=\"環境\" class=\"fragment\"></span><a href=\"#%E7%92%B0%E5%A2%83\"><i class=\"fa fa-link\"></i></a>環境</h1>\n\n<p>Raspberry Pi2 Raspbian<br>\nLBT-UAN04C1(Bluetooth4.0 USB アダプタ)<br>\nAndroid Nexus9</p>\n\n<h1>\n<span id=\"bluezをインストール\" class=\"fragment\"></span><a href=\"#bluez%E3%82%92%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\"><i class=\"fa fa-link\"></i></a>bluezをインストール</h1>\n\n<p>必要なライブラリをインストール</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>\n$sudo aptitude install libglib2.0-dev libdbus-1-dev libudev-dev libicaldev libreadline6-dev\n$sudo apt-get install libreadline-dev\n$sudo apt-get install libical-dev\n</pre></div></div>\n\n<p>bluezをインストール</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>\n$wget http://www.kernel.org/pub/linux/bluetooth/bluez-5.15.tar.gz\n$tar xvf bluez-5.11.tar.gz`\n$cd bluez-5.15\n$./configure --disable-systemd --enable-library\n$make\n$sudo make install\n$sudo reboot\n</pre></div></div>\n\n<h1>\n<span id=\"bluetoothドングル\" class=\"fragment\"></span><a href=\"#bluetooth%E3%83%89%E3%83%B3%E3%82%B0%E3%83%AB\"><i class=\"fa fa-link\"></i></a>Bluetoothドングル</h1>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>\n$hciconfig\n</pre></div></div>\n\n<p>で認識されているBluetoothアダプタを確認</p>\n\n<p><a href=\"https://qiita-image-store.s3.amazonaws.com/0/42913/5214b11d-e7eb-681b-dde1-281983198577.png\" target=\"_blank\"><img width=\"495\" alt=\"Screenshot 2016-07-29 23.37.15.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/42913/5214b11d-e7eb-681b-dde1-281983198577.png\"></a></p>\n\n<p>UP RUNNINGと書かれていればok。<br>\nDOWNと成っている場合は</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>\n$sudo hciconfig hci0 up\n</pre></div></div>\n\n<p>とすることでUP RUNNINGの状態にすることができる。</p>\n\n<h1>\n<span id=\"nodejsをインストール\" class=\"fragment\"></span><a href=\"#nodejs%E3%82%92%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\"><i class=\"fa fa-link\"></i></a>node.jsをインストール</h1>\n\n<p><a href=\"http://qiita.com/shishamo_dev/items/04d425e5d4e6accb63b8\" class=\"autolink\" id=\"reference-69ac35dd5ce42209d487\">http://qiita.com/shishamo_dev/items/04d425e5d4e6accb63b8</a> にまとめてあるのでこちらを参考に。</p>\n\n<h1>\n<span id=\"必要なnodeのライブラリをnpmでインストール\" class=\"fragment\"></span><a href=\"#%E5%BF%85%E8%A6%81%E3%81%AAnode%E3%81%AE%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E3%82%92npm%E3%81%A7%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\"><i class=\"fa fa-link\"></i></a>必要なnodeのライブラリをnpmでインストール</h1>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>\n$npm install bleacon\n$npm install eddystone-beacon\n$npm install bleno\n</pre></div></div>\n\n<h1>\n<span id=\"running-without-rootsudoで実行するためのコマンドを実行\" class=\"fragment\"></span><a href=\"#running-without-rootsudo%E3%81%A7%E5%AE%9F%E8%A1%8C%E3%81%99%E3%82%8B%E3%81%9F%E3%82%81%E3%81%AE%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%82%92%E5%AE%9F%E8%A1%8C\"><i class=\"fa fa-link\"></i></a>「Running without root/sudo」で実行するためのコマンドを実行</h1>\n\n<p>これ実行しとかないとエラーが出るっぽいので実行</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>\n$sudo setcap cap_net_raw+eip $(eval readlink -f `which node`)\n</pre></div></div>\n\n<h1>\n<span id=\"eddystoneのサンプルプログラムを実行\" class=\"fragment\"></span><a href=\"#eddystone%E3%81%AE%E3%82%B5%E3%83%B3%E3%83%97%E3%83%AB%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%A0%E3%82%92%E5%AE%9F%E8%A1%8C\"><i class=\"fa fa-link\"></i></a>Eddystoneのサンプルプログラムを実行</h1>\n\n<p>githubでnodejsで実行できるeddystoneのコードが公開されているので</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>\n$git clone https://github.com/don/node-eddystone-beacon\n</pre></div></div>\n\n<p>でダウンロードする。</p>\n\n<p>今回urlフレームを載せたビーコンを配信するとする。<br>\n以下のコマンドを実行</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>\n$cd node-eddystone-beacon/examples\n$node simple.js\n</pre></div></div>\n\n<p>コード内の<br>\n<code><br>\neddystoneBeacon.advertiseUrl('http://www.google.com');<br>\n</code><br>\nのURLを変えれば好きなURLを送信できる</p>\n\n<h1>\n<span id=\"eddystoneの受信確認\" class=\"fragment\"></span><a href=\"#eddystone%E3%81%AE%E5%8F%97%E4%BF%A1%E7%A2%BA%E8%AA%8D\"><i class=\"fa fa-link\"></i></a>Eddystoneの受信確認</h1>\n\n<p>Androidアプリの「iBeacon &amp; Eddystone Scanner」で受信してみた<br>\n<a href=\"https://play.google.com/store/apps/details?id=de.flurp.beaconscanner.app&amp;hl=ja\" class=\"autolink\">https://play.google.com/store/apps/details?id=de.flurp.beaconscanner.app&amp;hl=ja</a><br>\n<a href=\"https://qiita-image-store.s3.amazonaws.com/0/42913/679188a5-104c-8de1-da49-e12faaf148ff.png\" target=\"_blank\"><img width=\"768\" alt=\"Screenshot_20160730-000318.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/42913/679188a5-104c-8de1-da49-e12faaf148ff.png\"></a></p>\n",
    "body": "#概要\nGoogleのビーコン規格EddystoneをRaspberry Pi2で使えるようにする方法\n\n#環境\nRaspberry Pi2 Raspbian\nLBT-UAN04C1(Bluetooth4.0 USB アダプタ)\nAndroid Nexus9\n\n#bluezをインストール\n必要なライブラリをインストール\n\n```\n$sudo aptitude install libglib2.0-dev libdbus-1-dev libudev-dev libicaldev libreadline6-dev\n$sudo apt-get install libreadline-dev\n$sudo apt-get install libical-dev\n```\n\nbluezをインストール\n\n```\n$wget http://www.kernel.org/pub/linux/bluetooth/bluez-5.15.tar.gz\n$tar xvf bluez-5.11.tar.gz`\n$cd bluez-5.15\n$./configure --disable-systemd --enable-library\n$make\n$sudo make install\n$sudo reboot\n```\n\n\n#Bluetoothドングル\n\n```\n$hciconfig\n```\nで認識されているBluetoothアダプタを確認\n\n<img width=\"495\" alt=\"Screenshot 2016-07-29 23.37.15.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/42913/5214b11d-e7eb-681b-dde1-281983198577.png\">\n\nUP RUNNINGと書かれていればok。\nDOWNと成っている場合は\n\n```\n$sudo hciconfig hci0 up\n```\n\nとすることでUP RUNNINGの状態にすることができる。\n\n#node.jsをインストール\nhttp://qiita.com/shishamo_dev/items/04d425e5d4e6accb63b8 にまとめてあるのでこちらを参考に。\n\n\n#必要なnodeのライブラリをnpmでインストール\n\n```\n$npm install bleacon\n$npm install eddystone-beacon\n$npm install bleno\n```\n\n#「Running without root/sudo」で実行するためのコマンドを実行\nこれ実行しとかないとエラーが出るっぽいので実行\n\n```\n$sudo setcap cap_net_raw+eip $(eval readlink -f `which node`)\n```\n\n#Eddystoneのサンプルプログラムを実行\ngithubでnodejsで実行できるeddystoneのコードが公開されているので\n\n````\n$git clone https://github.com/don/node-eddystone-beacon\n```\n\nでダウンロードする。\n\n今回urlフレームを載せたビーコンを配信するとする。\n以下のコマンドを実行\n\n```\n$cd node-eddystone-beacon/examples\n$node simple.js\n```\n\nコード内の\n```\neddystoneBeacon.advertiseUrl('http://www.google.com');\n```\nのURLを変えれば好きなURLを送信できる\n\n#Eddystoneの受信確認\nAndroidアプリの「iBeacon & Eddystone Scanner」で受信してみた\nhttps://play.google.com/store/apps/details?id=de.flurp.beaconscanner.app&hl=ja\n<img width=\"768\" alt=\"Screenshot_20160730-000318.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/42913/679188a5-104c-8de1-da49-e12faaf148ff.png\">\n\n\n\n\n\n\n\n\n\n",
    "coediting": false,
    "created_at": "2016-07-30T00:09:22+09:00",
    "group": null,
    "id": "dfa98665ff2cdfc54412",
    "private": false,
    "tags": [
      {
        "name": "RaspberryPi",
        "versions": []
      },
      {
        "name": "bluetooth",
        "versions": []
      },
      {
        "name": "BLE",
        "versions": []
      },
      {
        "name": "eddystone",
        "versions": []
      }
    ],
    "title": "Raspberry Pi2でEddystoneを使う",
    "updated_at": "2016-07-30T00:36:18+09:00",
    "url": "http://qiita.com/shishamo_dev/items/dfa98665ff2cdfc54412",
    "user": {
      "description": "",
      "facebook_id": "bnsgny",
      "followees_count": 7,
      "followers_count": 8,
      "github_login_name": "shishamo-dev",
      "id": "shishamo_dev",
      "items_count": 44,
      "linkedin_id": "",
      "location": "Shiga",
      "name": "ししゃも",
      "organization": "立命館大学",
      "permanent_id": 42913,
      "profile_image_url": "https://avatars.githubusercontent.com/u/7261910?v=3",
      "twitter_screen_name": "shishamo_dev",
      "website_url": ""
    }
  },
  {
    "rendered_body": "<p>Firebase AuthenticationをEmailとPasswordで試してみたのでメモ</p>\n\n<p>公式サンプルを参考にしながら<br>\n<a href=\"https://github.com/firebase/quickstart-android/tree/master/auth\" class=\"autolink\">https://github.com/firebase/quickstart-android/tree/master/auth</a></p>\n\n<h1>\n<span id=\"事前準備\" class=\"fragment\"></span><a href=\"#%E4%BA%8B%E5%89%8D%E6%BA%96%E5%82%99\"><i class=\"fa fa-link\"></i></a>事前準備</h1>\n\n<p>Android Studioでプロジェクト作成<br>\nFirebase Consoleでプロジェクト作成</p>\n\n<h1>\n<span id=\"google-servicesjsonの生成\" class=\"fragment\"></span><a href=\"#google-servicesjson%E3%81%AE%E7%94%9F%E6%88%90\"><i class=\"fa fa-link\"></i></a>google-services.jsonの生成</h1>\n\n<p>Firebase Consoleで以下の作業を行う。</p>\n\n<ul>\n<li>Overviewにある「AndroidアプリにFirebaseを追加」をクリック</li>\n<li>Android Studioで作成したアプリのパッケージ名を入力</li>\n<li>「アプリを追加」をクリック</li>\n<li>\n<code>google-services.json</code>がダウンロードされる</li>\n</ul>\n\n<h1>\n<span id=\"firebaseのセットアップ\" class=\"fragment\"></span><a href=\"#firebase%E3%81%AE%E3%82%BB%E3%83%83%E3%83%88%E3%82%A2%E3%83%83%E3%83%97\"><i class=\"fa fa-link\"></i></a>Firebaseのセットアップ</h1>\n\n<p>Android Studioで以下の作業を行う。</p>\n\n<h2>\n<span id=\"google-servicesjsonをモジュール直下に配置\" class=\"fragment\"></span><a href=\"#google-servicesjson%E3%82%92%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E7%9B%B4%E4%B8%8B%E3%81%AB%E9%85%8D%E7%BD%AE\"><i class=\"fa fa-link\"></i></a><code>google-services.json</code>をモジュール直下に配置</h2>\n\n<p>デフォルトなら</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>\n&lt;PROJECT_ROOT&gt;/app/google-services.json\n</pre></div></div>\n\n<h2>\n<span id=\"プロジェクトルートのbuildgradleを編集\" class=\"fragment\"></span><a href=\"#%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%83%AB%E3%83%BC%E3%83%88%E3%81%AEbuildgradle%E3%82%92%E7%B7%A8%E9%9B%86\"><i class=\"fa fa-link\"></i></a>プロジェクトルートのbuild.gradleを編集</h2>\n\n<div class=\"code-frame\" data-lang=\"gradle\">\n<div class=\"code-lang\"><span class=\"bold\">&lt;PROJECT_ROOT&gt;/build.gradle</span></div>\n<div class=\"highlight\"><pre>\nbuildscript {\n  dependencies {\n    // 追加\n    classpath 'com.google.gms:google-services:3.0.0'\n  }\n}\n</pre></div>\n</div>\n\n<h2>\n<span id=\"モジュールのbuildgradleを編集\" class=\"fragment\"></span><a href=\"#%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E3%81%AEbuildgradle%E3%82%92%E7%B7%A8%E9%9B%86\"><i class=\"fa fa-link\"></i></a>モジュールのbuild.gradleを編集</h2>\n\n<div class=\"code-frame\" data-lang=\"gradle\">\n<div class=\"code-lang\"><span class=\"bold\">&lt;PROJECT_ROOT&gt;/&lt;APP_MODULE&gt;/build.gradle</span></div>\n<div class=\"highlight\"><pre>\ndependencies {\n  compile fileTree(dir: 'libs', include: ['*.jar'])\n  testCompile 'junit:junit:4.12'\n  compile 'com.android.support:appcompat-v7:24.1.1'\n\n  // 以下を追加\n  compile 'com.google.firebase:firebase-core:9.2.1'\n  compile 'com.google.firebase:firebase-auth:9.2.1'\n}\n\n// 追加\napply plugin: 'com.google.gms.google-services'\n</pre></div>\n</div>\n\n<h2>\n<span id=\"manifestの編集\" class=\"fragment\"></span><a href=\"#manifest%E3%81%AE%E7%B7%A8%E9%9B%86\"><i class=\"fa fa-link\"></i></a>Manifestの編集</h2>\n\n<p>ネットワーク通信のPermissionを追加</p>\n\n<div class=\"code-frame\" data-lang=\"xml\">\n<div class=\"code-lang\"><span class=\"bold\">AndroidManifest.xml</span></div>\n<div class=\"highlight\"><pre>\n<span class=\"nt\">&lt;uses-permission</span> <span class=\"na\">android:name=</span><span class=\"s\">\"android.permission.INTERNET\"</span> <span class=\"nt\">/&gt;</span>\n</pre></div>\n</div>\n\n<h1>\n<span id=\"emailpasswordでの認証機能の実装\" class=\"fragment\"></span><a href=\"#emailpassword%E3%81%A7%E3%81%AE%E8%AA%8D%E8%A8%BC%E6%A9%9F%E8%83%BD%E3%81%AE%E5%AE%9F%E8%A3%85\"><i class=\"fa fa-link\"></i></a>Email・Passwordでの認証機能の実装</h1>\n\n<p>ログイン画面のレイアウト作成</p>\n\n<div class=\"code-frame\" data-lang=\"xml\">\n<div class=\"code-lang\"><span class=\"bold\">activity_login.xml</span></div>\n<div class=\"highlight\"><pre>\n<span class=\"cp\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span>\n<span class=\"nt\">&lt;RelativeLayout</span> <span class=\"na\">xmlns:android=</span><span class=\"s\">\"http://schemas.android.com/apk/res/android\"</span>\n    <span class=\"na\">xmlns:tools=</span><span class=\"s\">\"http://schemas.android.com/tools\"</span>\n    <span class=\"na\">android:layout_width=</span><span class=\"s\">\"match_parent\"</span>\n    <span class=\"na\">android:layout_height=</span><span class=\"s\">\"match_parent\"</span>\n    <span class=\"na\">android:paddingBottom=</span><span class=\"s\">\"@dimen/activity_vertical_margin\"</span>\n    <span class=\"na\">android:paddingLeft=</span><span class=\"s\">\"@dimen/activity_horizontal_margin\"</span>\n    <span class=\"na\">android:paddingRight=</span><span class=\"s\">\"@dimen/activity_horizontal_margin\"</span>\n    <span class=\"na\">android:paddingTop=</span><span class=\"s\">\"@dimen/activity_vertical_margin\"</span>\n    <span class=\"na\">tools:context=</span><span class=\"s\">\".LoginActivity\"</span><span class=\"nt\">&gt;</span>\n\n    <span class=\"nt\">&lt;EditText</span>\n        <span class=\"na\">android:layout_width=</span><span class=\"s\">\"wrap_content\"</span>\n        <span class=\"na\">android:layout_height=</span><span class=\"s\">\"wrap_content\"</span>\n        <span class=\"na\">android:inputType=</span><span class=\"s\">\"textEmailAddress\"</span>\n        <span class=\"na\">android:ems=</span><span class=\"s\">\"10\"</span>\n        <span class=\"na\">android:id=</span><span class=\"s\">\"@+id/emailField\"</span>\n        <span class=\"na\">android:layout_alignParentTop=</span><span class=\"s\">\"true\"</span>\n        <span class=\"na\">android:hint=</span><span class=\"s\">\"E-mail\"</span>\n        <span class=\"na\">android:layout_alignParentEnd=</span><span class=\"s\">\"true\"</span>\n        <span class=\"na\">android:layout_alignParentStart=</span><span class=\"s\">\"true\"</span> <span class=\"nt\">/&gt;</span>\n\n    <span class=\"nt\">&lt;EditText</span>\n        <span class=\"na\">android:layout_width=</span><span class=\"s\">\"wrap_content\"</span>\n        <span class=\"na\">android:layout_height=</span><span class=\"s\">\"wrap_content\"</span>\n        <span class=\"na\">android:inputType=</span><span class=\"s\">\"textPassword\"</span>\n        <span class=\"na\">android:ems=</span><span class=\"s\">\"10\"</span>\n        <span class=\"na\">android:id=</span><span class=\"s\">\"@+id/passwdField\"</span>\n        <span class=\"na\">android:layout_below=</span><span class=\"s\">\"@+id/emailField\"</span>\n        <span class=\"na\">android:hint=</span><span class=\"s\">\"Password\"</span>\n        <span class=\"na\">android:layout_alignParentStart=</span><span class=\"s\">\"true\"</span>\n        <span class=\"na\">android:layout_alignEnd=</span><span class=\"s\">\"@+id/emailField\"</span> <span class=\"nt\">/&gt;</span>\n\n    <span class=\"nt\">&lt;Button</span>\n        <span class=\"na\">android:layout_width=</span><span class=\"s\">\"wrap_content\"</span>\n        <span class=\"na\">android:layout_height=</span><span class=\"s\">\"wrap_content\"</span>\n        <span class=\"na\">android:text=</span><span class=\"s\">\"Login by E-mail\"</span>\n        <span class=\"na\">android:id=</span><span class=\"s\">\"@+id/emailLoginButton\"</span>\n        <span class=\"na\">android:layout_marginTop=</span><span class=\"s\">\"31dp\"</span>\n        <span class=\"na\">android:layout_below=</span><span class=\"s\">\"@+id/passwdField\"</span>\n        <span class=\"na\">android:layout_centerHorizontal=</span><span class=\"s\">\"true\"</span> <span class=\"nt\">/&gt;</span>\n\n    <span class=\"nt\">&lt;Button</span>\n        <span class=\"na\">android:layout_width=</span><span class=\"s\">\"wrap_content\"</span>\n        <span class=\"na\">android:layout_height=</span><span class=\"s\">\"wrap_content\"</span>\n        <span class=\"na\">android:text=</span><span class=\"s\">\"Sign up by E-mail\"</span>\n        <span class=\"na\">android:id=</span><span class=\"s\">\"@+id/emailSignUpButton\"</span>\n        <span class=\"na\">android:layout_below=</span><span class=\"s\">\"@+id/emailLoginButton\"</span>\n        <span class=\"na\">android:layout_centerHorizontal=</span><span class=\"s\">\"true\"</span>\n        <span class=\"na\">android:layout_marginTop=</span><span class=\"s\">\"24dp\"</span> <span class=\"nt\">/&gt;</span>\n<span class=\"nt\">&lt;/RelativeLayout&gt;</span>\n</pre></div>\n</div>\n\n<p>ログイン画面のActivityを生成</p>\n\n<div class=\"code-frame\" data-lang=\"java\">\n<div class=\"code-lang\"><span class=\"bold\">LoginActivity.java</span></div>\n<div class=\"highlight\"><pre>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">LoginActivity</span> <span class=\"kd\">extends</span> <span class=\"n\">AppCompatActivity</span> <span class=\"kd\">implements</span> <span class=\"n\">View</span><span class=\"o\">.</span><span class=\"na\">OnClickListener</span> <span class=\"o\">{</span>\n    <span class=\"kd\">private</span> <span class=\"n\">FirebaseAuth</span> <span class=\"n\">mAuth</span><span class=\"o\">;</span>\n\n    <span class=\"kd\">private</span> <span class=\"n\">EditText</span> <span class=\"n\">mEmailField</span><span class=\"o\">;</span>\n    <span class=\"kd\">private</span> <span class=\"n\">EditText</span> <span class=\"n\">mPasswdField</span><span class=\"o\">;</span>\n\n    <span class=\"nd\">@Override</span>\n    <span class=\"kd\">protected</span> <span class=\"kt\">void</span> <span class=\"nf\">onCreate</span><span class=\"o\">(</span><span class=\"n\">Bundle</span> <span class=\"n\">savedInstanceState</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kd\">super</span><span class=\"o\">.</span><span class=\"na\">onCreate</span><span class=\"o\">(</span><span class=\"n\">savedInstanceState</span><span class=\"o\">);</span>\n        <span class=\"n\">setContentView</span><span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">.</span><span class=\"na\">layout</span><span class=\"o\">.</span><span class=\"na\">activity_login</span><span class=\"o\">);</span>\n\n        <span class=\"n\">mEmailField</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">EditText</span><span class=\"o\">)</span> <span class=\"n\">findViewById</span><span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">.</span><span class=\"na\">id</span><span class=\"o\">.</span><span class=\"na\">emailField</span><span class=\"o\">);</span>\n        <span class=\"n\">mPasswdField</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">EditText</span><span class=\"o\">)</span> <span class=\"n\">findViewById</span><span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">.</span><span class=\"na\">id</span><span class=\"o\">.</span><span class=\"na\">passwdField</span><span class=\"o\">);</span>\n\n        <span class=\"n\">findViewById</span><span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">.</span><span class=\"na\">id</span><span class=\"o\">.</span><span class=\"na\">emailLoginButton</span><span class=\"o\">).</span><span class=\"na\">setOnClickListener</span><span class=\"o\">(</span><span class=\"k\">this</span><span class=\"o\">);</span>\n        <span class=\"n\">findViewById</span><span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">.</span><span class=\"na\">id</span><span class=\"o\">.</span><span class=\"na\">emailSignUpButton</span><span class=\"o\">).</span><span class=\"na\">setOnClickListener</span><span class=\"o\">(</span><span class=\"k\">this</span><span class=\"o\">);</span>\n\n        <span class=\"n\">mAuth</span> <span class=\"o\">=</span> <span class=\"n\">FirebaseAuth</span><span class=\"o\">.</span><span class=\"na\">getInstance</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"nd\">@Override</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">onClick</span><span class=\"o\">(</span><span class=\"n\">View</span> <span class=\"n\">view</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">switch</span> <span class=\"o\">(</span><span class=\"n\">view</span><span class=\"o\">.</span><span class=\"na\">getId</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n            <span class=\"k\">case</span> <span class=\"n\">R</span><span class=\"o\">.</span><span class=\"na\">id</span><span class=\"o\">.</span><span class=\"na\">emailLoginButton</span><span class=\"o\">:</span>\n                <span class=\"n\">signIn</span><span class=\"o\">(</span><span class=\"n\">mEmailField</span><span class=\"o\">.</span><span class=\"na\">getText</span><span class=\"o\">().</span><span class=\"na\">toString</span><span class=\"o\">(),</span> <span class=\"n\">mPasswdField</span><span class=\"o\">.</span><span class=\"na\">getText</span><span class=\"o\">().</span><span class=\"na\">toString</span><span class=\"o\">());</span>\n                <span class=\"k\">break</span><span class=\"o\">;</span>\n            <span class=\"k\">case</span> <span class=\"n\">R</span><span class=\"o\">.</span><span class=\"na\">id</span><span class=\"o\">.</span><span class=\"na\">emailSignUpButton</span><span class=\"o\">:</span>\n                <span class=\"n\">createAccount</span><span class=\"o\">(</span><span class=\"n\">mEmailField</span><span class=\"o\">.</span><span class=\"na\">getText</span><span class=\"o\">().</span><span class=\"na\">toString</span><span class=\"o\">(),</span> <span class=\"n\">mPasswdField</span><span class=\"o\">.</span><span class=\"na\">getText</span><span class=\"o\">().</span><span class=\"na\">toString</span><span class=\"o\">());</span>\n                <span class=\"k\">break</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">private</span> <span class=\"kt\">void</span> <span class=\"nf\">createAccount</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">email</span><span class=\"o\">,</span> <span class=\"n\">String</span> <span class=\"n\">password</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(!</span><span class=\"n\">validateForm</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"n\">mAuth</span><span class=\"o\">.</span><span class=\"na\">createUserWithEmailAndPassword</span><span class=\"o\">(</span><span class=\"n\">email</span><span class=\"o\">,</span> <span class=\"n\">password</span><span class=\"o\">)</span>\n                <span class=\"o\">.</span><span class=\"na\">addOnCompleteListener</span><span class=\"o\">(</span><span class=\"k\">this</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"n\">OnCompleteListener</span><span class=\"o\">&lt;</span><span class=\"n\">AuthResult</span><span class=\"o\">&gt;()</span> <span class=\"o\">{</span>\n                    <span class=\"nd\">@Override</span>\n                    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">onComplete</span><span class=\"o\">(</span><span class=\"nd\">@NonNull</span> <span class=\"n\">Task</span><span class=\"o\">&lt;</span><span class=\"n\">AuthResult</span><span class=\"o\">&gt;</span> <span class=\"n\">task</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">task</span><span class=\"o\">.</span><span class=\"na\">isSuccessful</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n                            <span class=\"n\">changeActivity</span><span class=\"o\">();</span>\n                        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n                            <span class=\"n\">Toast</span><span class=\"o\">.</span><span class=\"na\">makeText</span><span class=\"o\">(</span><span class=\"n\">LoginActivity</span><span class=\"o\">.</span><span class=\"na\">this</span><span class=\"o\">,</span> <span class=\"n\">task</span><span class=\"o\">.</span><span class=\"na\">getException</span><span class=\"o\">().</span><span class=\"na\">getMessage</span><span class=\"o\">(),</span> <span class=\"n\">Toast</span><span class=\"o\">.</span><span class=\"na\">LENGTH_SHORT</span><span class=\"o\">).</span><span class=\"na\">show</span><span class=\"o\">();</span>\n                        <span class=\"o\">}</span>\n                    <span class=\"o\">}</span>\n                <span class=\"o\">});</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">private</span> <span class=\"kt\">void</span> <span class=\"nf\">signIn</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">email</span><span class=\"o\">,</span> <span class=\"n\">String</span> <span class=\"n\">password</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(!</span><span class=\"n\">validateForm</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"n\">mAuth</span><span class=\"o\">.</span><span class=\"na\">signInWithEmailAndPassword</span><span class=\"o\">(</span><span class=\"n\">email</span><span class=\"o\">,</span> <span class=\"n\">password</span><span class=\"o\">)</span>\n                <span class=\"o\">.</span><span class=\"na\">addOnCompleteListener</span><span class=\"o\">(</span><span class=\"k\">this</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"n\">OnCompleteListener</span><span class=\"o\">&lt;</span><span class=\"n\">AuthResult</span><span class=\"o\">&gt;()</span> <span class=\"o\">{</span>\n                    <span class=\"nd\">@Override</span>\n                    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">onComplete</span><span class=\"o\">(</span><span class=\"nd\">@NonNull</span> <span class=\"n\">Task</span><span class=\"o\">&lt;</span><span class=\"n\">AuthResult</span><span class=\"o\">&gt;</span> <span class=\"n\">task</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">task</span><span class=\"o\">.</span><span class=\"na\">isSuccessful</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n                            <span class=\"n\">changeActivity</span><span class=\"o\">();</span>\n                        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n                            <span class=\"n\">Toast</span><span class=\"o\">.</span><span class=\"na\">makeText</span><span class=\"o\">(</span><span class=\"n\">LoginActivity</span><span class=\"o\">.</span><span class=\"na\">this</span><span class=\"o\">,</span> <span class=\"n\">task</span><span class=\"o\">.</span><span class=\"na\">getException</span><span class=\"o\">().</span><span class=\"na\">getMessage</span><span class=\"o\">(),</span> <span class=\"n\">Toast</span><span class=\"o\">.</span><span class=\"na\">LENGTH_SHORT</span><span class=\"o\">).</span><span class=\"na\">show</span><span class=\"o\">();</span>\n                        <span class=\"o\">}</span>\n                    <span class=\"o\">}</span>\n                <span class=\"o\">});</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">private</span> <span class=\"kt\">boolean</span> <span class=\"nf\">validateForm</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"kt\">boolean</span> <span class=\"n\">valid</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n\n        <span class=\"n\">String</span> <span class=\"n\">email</span> <span class=\"o\">=</span> <span class=\"n\">mEmailField</span><span class=\"o\">.</span><span class=\"na\">getText</span><span class=\"o\">().</span><span class=\"na\">toString</span><span class=\"o\">();</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">TextUtils</span><span class=\"o\">.</span><span class=\"na\">isEmpty</span><span class=\"o\">(</span><span class=\"n\">email</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n            <span class=\"n\">mEmailField</span><span class=\"o\">.</span><span class=\"na\">setError</span><span class=\"o\">(</span><span class=\"s\">\"Required.\"</span><span class=\"o\">);</span>\n            <span class=\"n\">valid</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n            <span class=\"n\">mEmailField</span><span class=\"o\">.</span><span class=\"na\">setError</span><span class=\"o\">(</span><span class=\"kc\">null</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"n\">String</span> <span class=\"n\">password</span> <span class=\"o\">=</span> <span class=\"n\">mPasswdField</span><span class=\"o\">.</span><span class=\"na\">getText</span><span class=\"o\">().</span><span class=\"na\">toString</span><span class=\"o\">();</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">TextUtils</span><span class=\"o\">.</span><span class=\"na\">isEmpty</span><span class=\"o\">(</span><span class=\"n\">password</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n            <span class=\"n\">mPasswdField</span><span class=\"o\">.</span><span class=\"na\">setError</span><span class=\"o\">(</span><span class=\"s\">\"Required.\"</span><span class=\"o\">);</span>\n            <span class=\"n\">valid</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n            <span class=\"n\">mPasswdField</span><span class=\"o\">.</span><span class=\"na\">setError</span><span class=\"o\">(</span><span class=\"kc\">null</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">valid</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">private</span> <span class=\"kt\">void</span> <span class=\"nf\">changeActivity</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"n\">Intent</span> <span class=\"n\">intent</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nf\">Intent</span><span class=\"o\">(</span><span class=\"n\">LoginActivity</span><span class=\"o\">.</span><span class=\"na\">this</span><span class=\"o\">,</span> <span class=\"n\">MainActivity</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">);</span>\n        <span class=\"n\">startActivity</span><span class=\"o\">(</span><span class=\"n\">intent</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n</div>\n\n<p>サンプルでは<code>FirebaseAuth.AuthStateListener</code>を生成していたが、</p>\n\n<p>今回はログイン状態の変化を検知するつもりは無いので省く</p>\n\n<p><code>FirebaseAuth</code>のメソッドで<code>createUserWithEmailAndPassword</code>と<code>signInWithEmailAndPassword</code>が用意されているので</p>\n\n<p>それを使うだけでいいみたい</p>\n\n<p><code>OnCompleteListener</code>の<code>onComplete(@NonNull Task&lt;AuthResult&gt;  task)</code></p>\n\n<p>で渡される<code>task</code>がエラーメッセージなどを保持しているので</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>\nToast.makeText(LoginActivity.this, task.getException().getMessage(), Toast.LENGTH_SHORT).show();\n</pre></div></div>\n\n<p>としておけば、エラーメッセージのToastの表示も簡単</p>\n\n<p>ログインした後の画面も作成</p>\n\n<div class=\"code-frame\" data-lang=\"xml\">\n<div class=\"code-lang\"><span class=\"bold\">activity_main.xml</span></div>\n<div class=\"highlight\"><pre>\n<span class=\"cp\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span>\n<span class=\"nt\">&lt;RelativeLayout</span> <span class=\"na\">xmlns:android=</span><span class=\"s\">\"http://schemas.android.com/apk/res/android\"</span>\n    <span class=\"na\">xmlns:tools=</span><span class=\"s\">\"http://schemas.android.com/tools\"</span>\n    <span class=\"na\">android:layout_width=</span><span class=\"s\">\"match_parent\"</span>\n    <span class=\"na\">android:layout_height=</span><span class=\"s\">\"match_parent\"</span>\n    <span class=\"na\">android:paddingBottom=</span><span class=\"s\">\"@dimen/activity_vertical_margin\"</span>\n    <span class=\"na\">android:paddingLeft=</span><span class=\"s\">\"@dimen/activity_horizontal_margin\"</span>\n    <span class=\"na\">android:paddingRight=</span><span class=\"s\">\"@dimen/activity_horizontal_margin\"</span>\n    <span class=\"na\">android:paddingTop=</span><span class=\"s\">\"@dimen/activity_vertical_margin\"</span>\n    <span class=\"na\">tools:context=</span><span class=\"s\">\".LoginActivity\"</span><span class=\"nt\">&gt;</span>\n\n    <span class=\"nt\">&lt;TextView</span>\n        <span class=\"na\">android:layout_width=</span><span class=\"s\">\"wrap_content\"</span>\n        <span class=\"na\">android:layout_height=</span><span class=\"s\">\"wrap_content\"</span>\n        <span class=\"na\">android:text=</span><span class=\"s\">\"Login success!\"</span>\n        <span class=\"na\">android:id=</span><span class=\"s\">\"@+id/textView\"</span>\n        <span class=\"na\">android:layout_alignParentTop=</span><span class=\"s\">\"true\"</span>\n        <span class=\"na\">android:layout_centerHorizontal=</span><span class=\"s\">\"true\"</span>\n        <span class=\"na\">android:layout_marginTop=</span><span class=\"s\">\"48dp\"</span>\n        <span class=\"na\">android:textSize=</span><span class=\"s\">\"32dp\"</span> <span class=\"nt\">/&gt;</span>\n\n    <span class=\"nt\">&lt;Button</span>\n        <span class=\"na\">android:layout_width=</span><span class=\"s\">\"wrap_content\"</span>\n        <span class=\"na\">android:layout_height=</span><span class=\"s\">\"wrap_content\"</span>\n        <span class=\"na\">android:text=</span><span class=\"s\">\"Logout\"</span>\n        <span class=\"na\">android:id=</span><span class=\"s\">\"@+id/logoutButton\"</span>\n        <span class=\"na\">android:layout_centerVertical=</span><span class=\"s\">\"true\"</span>\n        <span class=\"na\">android:layout_centerHorizontal=</span><span class=\"s\">\"true\"</span>\n        <span class=\"na\">android:textSize=</span><span class=\"s\">\"26dp\"</span> <span class=\"nt\">/&gt;</span>\n<span class=\"nt\">&lt;/RelativeLayout&gt;</span>\n</pre></div>\n</div>\n\n<p>TextViewとログアウトボタンを配置</p>\n\n<p>MainActivityはログアウト処理だけ行うようにした</p>\n\n<div class=\"code-frame\" data-lang=\"java\">\n<div class=\"code-lang\"><span class=\"bold\">MainActivity.java</span></div>\n<div class=\"highlight\"><pre>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">MainActivity</span> <span class=\"kd\">extends</span> <span class=\"n\">AppCompatActivity</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">private</span> <span class=\"n\">FirebaseAuth</span> <span class=\"n\">mAuth</span><span class=\"o\">;</span>\n\n    <span class=\"nd\">@Override</span>\n    <span class=\"kd\">protected</span> <span class=\"kt\">void</span> <span class=\"nf\">onCreate</span><span class=\"o\">(</span><span class=\"n\">Bundle</span> <span class=\"n\">savedInstanceState</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kd\">super</span><span class=\"o\">.</span><span class=\"na\">onCreate</span><span class=\"o\">(</span><span class=\"n\">savedInstanceState</span><span class=\"o\">);</span>\n        <span class=\"n\">setContentView</span><span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">.</span><span class=\"na\">layout</span><span class=\"o\">.</span><span class=\"na\">activity_main</span><span class=\"o\">);</span>\n\n        <span class=\"n\">mAuth</span> <span class=\"o\">=</span> <span class=\"n\">FirebaseAuth</span><span class=\"o\">.</span><span class=\"na\">getInstance</span><span class=\"o\">();</span>\n\n        <span class=\"n\">findViewById</span><span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">.</span><span class=\"na\">id</span><span class=\"o\">.</span><span class=\"na\">logoutButton</span><span class=\"o\">).</span><span class=\"na\">setOnClickListener</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"n\">View</span><span class=\"o\">.</span><span class=\"na\">OnClickListener</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n            <span class=\"nd\">@Override</span>\n            <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">onClick</span><span class=\"o\">(</span><span class=\"n\">View</span> <span class=\"n\">view</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">mAuth</span><span class=\"o\">.</span><span class=\"na\">signOut</span><span class=\"o\">();</span>\n                <span class=\"n\">Intent</span> <span class=\"n\">intent</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nf\">Intent</span><span class=\"o\">(</span><span class=\"n\">MainActivity</span><span class=\"o\">.</span><span class=\"na\">this</span><span class=\"o\">,</span> <span class=\"n\">LoginActivity</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">);</span>\n                <span class=\"n\">startActivity</span><span class=\"o\">(</span><span class=\"n\">intent</span><span class=\"o\">);</span>\n                <span class=\"n\">finish</span><span class=\"o\">();</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">});</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n</div>\n\n<p>最後にManifestを編集</p>\n\n<div class=\"code-frame\" data-lang=\"xml\">\n<div class=\"code-lang\"><span class=\"bold\">AndroidManifest.xml</span></div>\n<div class=\"highlight\"><pre>\n        <span class=\"nt\">&lt;activity</span> <span class=\"na\">android:name=</span><span class=\"s\">\".LoginActivity\"</span><span class=\"nt\">&gt;</span>\n            <span class=\"nt\">&lt;intent-filter&gt;</span>\n                <span class=\"nt\">&lt;action</span> <span class=\"na\">android:name=</span><span class=\"s\">\"android.intent.action.MAIN\"</span> <span class=\"nt\">/&gt;</span>\n\n                <span class=\"nt\">&lt;category</span> <span class=\"na\">android:name=</span><span class=\"s\">\"android.intent.category.LAUNCHER\"</span> <span class=\"nt\">/&gt;</span>\n            <span class=\"nt\">&lt;/intent-filter&gt;</span>\n        <span class=\"nt\">&lt;/activity&gt;</span>\n        <span class=\"nt\">&lt;activity</span> <span class=\"na\">android:name=</span><span class=\"s\">\".MainActivity\"</span> <span class=\"nt\">/&gt;</span>\n</pre></div>\n</div>\n\n<p>これでアプリからSign Upすると、Firebase ConsoleのAuthにユーザが追加されてる</p>\n",
    "body": "Firebase AuthenticationをEmailとPasswordで試してみたのでメモ\n\n公式サンプルを参考にしながら\nhttps://github.com/firebase/quickstart-android/tree/master/auth\n\n# 事前準備\n\nAndroid Studioでプロジェクト作成\nFirebase Consoleでプロジェクト作成\n\n# google-services.jsonの生成\nFirebase Consoleで以下の作業を行う。\n\n- Overviewにある「AndroidアプリにFirebaseを追加」をクリック\n- Android Studioで作成したアプリのパッケージ名を入力\n- 「アプリを追加」をクリック\n- `google-services.json`がダウンロードされる\n\n# Firebaseのセットアップ\nAndroid Studioで以下の作業を行う。\n\n## `google-services.json`をモジュール直下に配置\n\nデフォルトなら\n\n```\n<PROJECT_ROOT>/app/google-services.json\n```\n\n## プロジェクトルートのbuild.gradleを編集\n\n```&lt;PROJECT_ROOT&gt;/build.gradle\nbuildscript {\n  dependencies {\n    // 追加\n    classpath 'com.google.gms:google-services:3.0.0'\n  }\n}\n```\n\n## モジュールのbuild.gradleを編集\n\n```&lt;PROJECT_ROOT&gt;/&lt;APP_MODULE&gt;/build.gradle\ndependencies {\n  compile fileTree(dir: 'libs', include: ['*.jar'])\n  testCompile 'junit:junit:4.12'\n  compile 'com.android.support:appcompat-v7:24.1.1'\n\n  // 以下を追加\n  compile 'com.google.firebase:firebase-core:9.2.1'\n  compile 'com.google.firebase:firebase-auth:9.2.1'\n}\n\n// 追加\napply plugin: 'com.google.gms.google-services'\n```\n\n## Manifestの編集\n\nネットワーク通信のPermissionを追加\n\n```AndroidManifest.xml\n<uses-permission android:name=\"android.permission.INTERNET\" />\n```\n\n# Email・Passwordでの認証機能の実装\n\nログイン画面のレイアウト作成\n\n```activity_login.xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:paddingBottom=\"@dimen/activity_vertical_margin\"\n    android:paddingLeft=\"@dimen/activity_horizontal_margin\"\n    android:paddingRight=\"@dimen/activity_horizontal_margin\"\n    android:paddingTop=\"@dimen/activity_vertical_margin\"\n    tools:context=\".LoginActivity\">\n\n    <EditText\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:inputType=\"textEmailAddress\"\n        android:ems=\"10\"\n        android:id=\"@+id/emailField\"\n        android:layout_alignParentTop=\"true\"\n        android:hint=\"E-mail\"\n        android:layout_alignParentEnd=\"true\"\n        android:layout_alignParentStart=\"true\" />\n\n    <EditText\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:inputType=\"textPassword\"\n        android:ems=\"10\"\n        android:id=\"@+id/passwdField\"\n        android:layout_below=\"@+id/emailField\"\n        android:hint=\"Password\"\n        android:layout_alignParentStart=\"true\"\n        android:layout_alignEnd=\"@+id/emailField\" />\n\n    <Button\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Login by E-mail\"\n        android:id=\"@+id/emailLoginButton\"\n        android:layout_marginTop=\"31dp\"\n        android:layout_below=\"@+id/passwdField\"\n        android:layout_centerHorizontal=\"true\" />\n\n    <Button\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Sign up by E-mail\"\n        android:id=\"@+id/emailSignUpButton\"\n        android:layout_below=\"@+id/emailLoginButton\"\n        android:layout_centerHorizontal=\"true\"\n        android:layout_marginTop=\"24dp\" />\n</RelativeLayout>\n```\n\nログイン画面のActivityを生成\n\n```LoginActivity.java\npublic class LoginActivity extends AppCompatActivity implements View.OnClickListener {\n    private FirebaseAuth mAuth;\n\n    private EditText mEmailField;\n    private EditText mPasswdField;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_login);\n\n        mEmailField = (EditText) findViewById(R.id.emailField);\n        mPasswdField = (EditText) findViewById(R.id.passwdField);\n\n        findViewById(R.id.emailLoginButton).setOnClickListener(this);\n        findViewById(R.id.emailSignUpButton).setOnClickListener(this);\n\n        mAuth = FirebaseAuth.getInstance();\n    }\n\n    @Override\n    public void onClick(View view) {\n        switch (view.getId()) {\n            case R.id.emailLoginButton:\n                signIn(mEmailField.getText().toString(), mPasswdField.getText().toString());\n                break;\n            case R.id.emailSignUpButton:\n                createAccount(mEmailField.getText().toString(), mPasswdField.getText().toString());\n                break;\n        }\n    }\n\n    private void createAccount(String email, String password) {\n        if (!validateForm()) {\n            return;\n        }\n\n        mAuth.createUserWithEmailAndPassword(email, password)\n                .addOnCompleteListener(this, new OnCompleteListener<AuthResult>() {\n                    @Override\n                    public void onComplete(@NonNull Task<AuthResult> task) {\n                        if (task.isSuccessful()) {\n                            changeActivity();\n                        } else {\n                            Toast.makeText(LoginActivity.this, task.getException().getMessage(), Toast.LENGTH_SHORT).show();\n                        }\n                    }\n                });\n    }\n\n    private void signIn(String email, String password) {\n        if (!validateForm()) {\n            return;\n        }\n\n        mAuth.signInWithEmailAndPassword(email, password)\n                .addOnCompleteListener(this, new OnCompleteListener<AuthResult>() {\n                    @Override\n                    public void onComplete(@NonNull Task<AuthResult> task) {\n                        if (task.isSuccessful()) {\n                            changeActivity();\n                        } else {\n                            Toast.makeText(LoginActivity.this, task.getException().getMessage(), Toast.LENGTH_SHORT).show();\n                        }\n                    }\n                });\n    }\n\n    private boolean validateForm() {\n        boolean valid = true;\n\n        String email = mEmailField.getText().toString();\n        if (TextUtils.isEmpty(email)) {\n            mEmailField.setError(\"Required.\");\n            valid = false;\n        } else {\n            mEmailField.setError(null);\n        }\n\n        String password = mPasswdField.getText().toString();\n        if (TextUtils.isEmpty(password)) {\n            mPasswdField.setError(\"Required.\");\n            valid = false;\n        } else {\n            mPasswdField.setError(null);\n        }\n\n        return valid;\n    }\n\n    private void changeActivity() {\n        Intent intent = new Intent(LoginActivity.this, MainActivity.class);\n        startActivity(intent);\n    }\n}\n```\n\nサンプルでは`FirebaseAuth.AuthStateListener`を生成していたが、\n\n今回はログイン状態の変化を検知するつもりは無いので省く\n\n`FirebaseAuth`のメソッドで`createUserWithEmailAndPassword`と`signInWithEmailAndPassword`が用意されているので\n\nそれを使うだけでいいみたい\n\n`OnCompleteListener`の`onComplete(@NonNull Task<AuthResult>  task)`\n\nで渡される`task`がエラーメッセージなどを保持しているので\n\n```\nToast.makeText(LoginActivity.this, task.getException().getMessage(), Toast.LENGTH_SHORT).show();\n```\n\nとしておけば、エラーメッセージのToastの表示も簡単\n\nログインした後の画面も作成\n\n```activity_main.xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:paddingBottom=\"@dimen/activity_vertical_margin\"\n    android:paddingLeft=\"@dimen/activity_horizontal_margin\"\n    android:paddingRight=\"@dimen/activity_horizontal_margin\"\n    android:paddingTop=\"@dimen/activity_vertical_margin\"\n    tools:context=\".LoginActivity\">\n\n    <TextView\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Login success!\"\n        android:id=\"@+id/textView\"\n        android:layout_alignParentTop=\"true\"\n        android:layout_centerHorizontal=\"true\"\n        android:layout_marginTop=\"48dp\"\n        android:textSize=\"32dp\" />\n\n    <Button\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Logout\"\n        android:id=\"@+id/logoutButton\"\n        android:layout_centerVertical=\"true\"\n        android:layout_centerHorizontal=\"true\"\n        android:textSize=\"26dp\" />\n</RelativeLayout>\n```\n\nTextViewとログアウトボタンを配置\n\nMainActivityはログアウト処理だけ行うようにした\n\n```MainActivity.java\npublic class MainActivity extends AppCompatActivity {\n\n    private FirebaseAuth mAuth;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        mAuth = FirebaseAuth.getInstance();\n\n        findViewById(R.id.logoutButton).setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                mAuth.signOut();\n                Intent intent = new Intent(MainActivity.this, LoginActivity.class);\n                startActivity(intent);\n                finish();\n            }\n        });\n    }\n}\n```\n\n最後にManifestを編集\n\n```AndroidManifest.xml\n        <activity android:name=\".LoginActivity\">\n            <intent-filter>\n                <action android:name=\"android.intent.action.MAIN\" />\n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n            </intent-filter>\n        </activity>\n        <activity android:name=\".MainActivity\" />\n```\n\nこれでアプリからSign Upすると、Firebase ConsoleのAuthにユーザが追加されてる\n",
    "coediting": false,
    "created_at": "2016-07-29T19:30:28+09:00",
    "group": null,
    "id": "9e9d5d10b68bc94942be",
    "private": false,
    "tags": [
      {
        "name": "Android",
        "versions": []
      },
      {
        "name": "Firebase",
        "versions": []
      }
    ],
    "title": "Android Firebase Authentication (EmailとPassword) メモ",
    "updated_at": "2016-07-29T19:30:28+09:00",
    "url": "http://qiita.com/Sert/items/9e9d5d10b68bc94942be",
    "user": {
      "description": "",
      "facebook_id": "",
      "followees_count": 0,
      "followers_count": 3,
      "github_login_name": null,
      "id": "Sert",
      "items_count": 8,
      "linkedin_id": "",
      "location": "",
      "name": "",
      "organization": "",
      "permanent_id": 69502,
      "profile_image_url": "https://pbs.twimg.com/profile_images/530533023578849281/5AFl9d2S_normal.jpeg",
      "twitter_screen_name": "DemoSert",
      "website_url": ""
    }
  },
  {
    "rendered_body": "<p>Java8が登場してはや2年半（！）、気づけばラムダ式すらろくに知らないまま今になってしまったので、改めて勉強してみました。</p>\n\n<p>読んだのはこのあたり。</p>\n\n<ul>\n<li><a href=\"https://community.oracle.com/docs/DOC-1003597\">Getting Started with Lambda Expressions</a></li>\n<li><a href=\"http://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html\">\"Lambda Expressions\" - The Java Tutorials</a></li>\n</ul>\n\n<p>見た感じ Android の Listener なんかでよく使う匿名クラスの記述が楽になるよ、という感じでしたが、それによってrubyなど他のスクリプト言語のようにコレクションを絞り込んだり反復処理したり、といったことがかなり簡潔に書けるようになる例を目にしたので、勉強がてら selectメソッドと eachメソッド自体を簡単に実装してみました。</p>\n\n<p>で、書いたのがこちら。</p>\n\n<div class=\"code-frame\" data-lang=\"java\">\n<div class=\"code-lang\"><span class=\"bold\">SelectableList.java</span></div>\n<div class=\"highlight\"><pre>\n<span class=\"c1\">// 任意のロジックで絞り込み可能なリスト</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">SelectableList</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span> <span class=\"o\">{</span>\n\n    <span class=\"c1\">// 「絞り込み方」を使う側で実装するためのインターフェイス</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">interface</span> <span class=\"nc\">SelectLogic</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span> <span class=\"o\">{</span>\n        <span class=\"kt\">boolean</span> <span class=\"nf\">isTarget</span><span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"n\">item</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"c1\">// 「反復処理の内容」を使う側で実装するためのインターフェイス</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">interface</span> <span class=\"nc\">EachLogic</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span> <span class=\"o\">{</span>\n        <span class=\"kt\">void</span> <span class=\"nf\">exec</span><span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"n\">item</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">private</span> <span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span> <span class=\"n\">list</span><span class=\"o\">;</span>\n\n    <span class=\"kd\">public</span> <span class=\"nf\">SelectableList</span> <span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"n\">list</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">ArrayList</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;();</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">add</span><span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"n\">item</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">list</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">item</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"c1\">// 任意のロジックでリストを絞り込みます</span>\n    <span class=\"kd\">public</span> <span class=\"n\">SelectableList</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span> <span class=\"nf\">select</span><span class=\"o\">(</span><span class=\"n\">SelectLogic</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span> <span class=\"n\">logic</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">SelectableList</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span> <span class=\"n\">selectedList</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">SelectableList</span><span class=\"o\">&lt;&gt;();</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"n\">item</span> <span class=\"o\">:</span> <span class=\"n\">list</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">logic</span><span class=\"o\">.</span><span class=\"na\">isTarget</span><span class=\"o\">(</span><span class=\"n\">item</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n                <span class=\"n\">selectedList</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">item</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">selectedList</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"c1\">// 任意のロジックで反復処理します</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">each</span><span class=\"o\">(</span><span class=\"n\">EachLogic</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span> <span class=\"n\">logic</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"n\">item</span> <span class=\"o\">:</span> <span class=\"n\">list</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">logic</span><span class=\"o\">.</span><span class=\"na\">exec</span><span class=\"o\">(</span><span class=\"n\">item</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n</div>\n\n<p>SelectableListクラスを使うクラスはこんな感じ。<br>\nPersonクラスは、nameとageを持ったシンプルなデータクラスです。<br>\nここでは5人を適当に登録して、30歳未満の若者の名前を出力しています。</p>\n\n<div class=\"code-frame\" data-lang=\"java\">\n<div class=\"code-lang\"><span class=\"bold\">ListUser.java</span></div>\n<div class=\"highlight\"><pre>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">ListUser</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">use</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"n\">SelectableList</span><span class=\"o\">&lt;</span><span class=\"n\">Person</span><span class=\"o\">&gt;</span> <span class=\"n\">personList</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">SelectableList</span><span class=\"o\">&lt;&gt;();</span>\n        <span class=\"n\">personList</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"nf\">Person</span><span class=\"o\">(</span><span class=\"s\">\"foo\"</span><span class=\"o\">,</span> <span class=\"mi\">24</span><span class=\"o\">));</span>\n        <span class=\"n\">personList</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"nf\">Person</span><span class=\"o\">(</span><span class=\"s\">\"bar\"</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">));</span>\n        <span class=\"n\">personList</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"nf\">Person</span><span class=\"o\">(</span><span class=\"s\">\"bazz\"</span><span class=\"o\">,</span> <span class=\"mi\">12</span><span class=\"o\">));</span>\n        <span class=\"n\">personList</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"nf\">Person</span><span class=\"o\">(</span><span class=\"s\">\"hoge\"</span><span class=\"o\">,</span> <span class=\"mi\">56</span><span class=\"o\">));</span>\n        <span class=\"n\">personList</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"nf\">Person</span><span class=\"o\">(</span><span class=\"s\">\"piyo\"</span><span class=\"o\">,</span> <span class=\"mi\">88</span><span class=\"o\">));</span>\n\n        <span class=\"c1\">// 30歳未満の人を出力</span>\n        <span class=\"n\">personList</span><span class=\"o\">.</span><span class=\"na\">select</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">-&gt;</span> <span class=\"o\">{</span><span class=\"k\">return</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"na\">getAge</span><span class=\"o\">()</span> <span class=\"o\">&lt;</span> <span class=\"mi\">30</span><span class=\"o\">;})</span>\n                  <span class=\"o\">.</span><span class=\"na\">each</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">-&gt;</span> <span class=\"o\">{</span><span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"na\">getName</span><span class=\"o\">());});</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n</div>\n\n<p>実行結果</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>\nfoo\nbar\nbazz\n</pre></div></div>\n\n<p>最初にラムダ式の書き方を見たときは、今まで通りインターフェースを宣言しなければならない点は変わらないこともあって、「ちょっと実装クラスの記述が楽になるかな？」程度の感想だったのですが、「ちょっと実装クラスの記述が楽になる」だけでこんなに考え方や書き方が変わるのか！というのが今回の発見でした。</p>\n\n<p>なお、今回は勉強用に selectメソッドと eachメソッドを自作してみましたが、実際はStream APIというものが用意されていて、そちらを使うと絞り込みや反復処理を含めた色々なことができるようです（未勉強。。。）</p>\n\n<p>（余談）Java EEの方はまだ7までしか出ていないんですね。そんなことも知りませんでした。。。</p>\n",
    "body": "Java8が登場してはや2年半（！）、気づけばラムダ式すらろくに知らないまま今になってしまったので、改めて勉強してみました。\n\n読んだのはこのあたり。\n\n* [Getting Started with Lambda Expressions](https://community.oracle.com/docs/DOC-1003597)\n* [\"Lambda Expressions\" - The Java Tutorials](http://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html)\n\n見た感じ Android の Listener なんかでよく使う匿名クラスの記述が楽になるよ、という感じでしたが、それによってrubyなど他のスクリプト言語のようにコレクションを絞り込んだり反復処理したり、といったことがかなり簡潔に書けるようになる例を目にしたので、勉強がてら selectメソッドと eachメソッド自体を簡単に実装してみました。\n\nで、書いたのがこちら。\n\n```java:SelectableList.java\n// 任意のロジックで絞り込み可能なリスト\npublic class SelectableList<T> {\n\n    // 「絞り込み方」を使う側で実装するためのインターフェイス\n\tpublic interface SelectLogic<T> {\n\t\tboolean isTarget(T item);\n\t}\n\n    // 「反復処理の内容」を使う側で実装するためのインターフェイス\n\tpublic interface EachLogic<T> {\n\t\tvoid exec(T item);\n\t}\n\n\tprivate List<T> list;\n\n\tpublic SelectableList () {\n\t\tlist = new ArrayList<T>();\n\t}\n\n\tpublic void add(T item) {\n\t\tlist.add(item);\n\t}\n\n    // 任意のロジックでリストを絞り込みます\n\tpublic SelectableList<T> select(SelectLogic<T> logic) {\n\t\tSelectableList<T> selectedList = new SelectableList<>();\n\t\tfor (T item : list) {\n\t\t\tif (logic.isTarget(item)) {\n\t\t\t\tselectedList.add(item);\n\t\t\t}\n\t\t}\n\t\treturn selectedList;\n\t}\n\n    // 任意のロジックで反復処理します\n\tpublic void each(EachLogic<T> logic) {\n\t\tfor (T item : list) {\n\t\t\tlogic.exec(item);\n\t\t}\n\t}\n}\n```\n\nSelectableListクラスを使うクラスはこんな感じ。\nPersonクラスは、nameとageを持ったシンプルなデータクラスです。\nここでは5人を適当に登録して、30歳未満の若者の名前を出力しています。\n\n```java:ListUser.java\npublic class ListUser {\n\n\tpublic void use() {\n\t\tSelectableList<Person> personList = new SelectableList<>();\n\t\tpersonList.add(new Person(\"foo\", 24));\n\t\tpersonList.add(new Person(\"bar\", 3));\n\t\tpersonList.add(new Person(\"bazz\", 12));\n\t\tpersonList.add(new Person(\"hoge\", 56));\n\t\tpersonList.add(new Person(\"piyo\", 88));\n\n\t\t// 30歳未満の人を出力\n\t\tpersonList.select(p -> {return p.getAge() < 30;})\n                  .each(p -> {System.out.println(p.getName());});\n\t}\n}\n```\n\n実行結果\n\n```\nfoo\nbar\nbazz\n```\n\n最初にラムダ式の書き方を見たときは、今まで通りインターフェースを宣言しなければならない点は変わらないこともあって、「ちょっと実装クラスの記述が楽になるかな？」程度の感想だったのですが、「ちょっと実装クラスの記述が楽になる」だけでこんなに考え方や書き方が変わるのか！というのが今回の発見でした。\n\nなお、今回は勉強用に selectメソッドと eachメソッドを自作してみましたが、実際はStream APIというものが用意されていて、そちらを使うと絞り込みや反復処理を含めた色々なことができるようです（未勉強。。。）\n\n（余談）Java EEの方はまだ7までしか出ていないんですね。そんなことも知りませんでした。。。\n",
    "coediting": false,
    "created_at": "2016-07-29T13:05:29+09:00",
    "group": null,
    "id": "f3a9275296f575c67656",
    "private": false,
    "tags": [
      {
        "name": "Java",
        "versions": []
      },
      {
        "name": "lambda",
        "versions": []
      },
      {
        "name": "java8",
        "versions": []
      }
    ],
    "title": "Java8のラムダ式を覚えるために selectメソッドとeachメソッド実装してみた",
    "updated_at": "2016-07-29T13:05:29+09:00",
    "url": "http://qiita.com/chooyan_eng/items/f3a9275296f575c67656",
    "user": {
      "description": null,
      "facebook_id": null,
      "followees_count": 0,
      "followers_count": 2,
      "github_login_name": null,
      "id": "chooyan_eng",
      "items_count": 4,
      "linkedin_id": null,
      "location": null,
      "name": "",
      "organization": null,
      "permanent_id": 134943,
      "profile_image_url": "https://pbs.twimg.com/profile_images/755571529077751808/pJhiVrbI_normal.jpg",
      "twitter_screen_name": "chooyan_eng",
      "website_url": null
    }
  },
  {
    "rendered_body": "\n<h1>\n<span id=\"目的\" class=\"fragment\"></span><a href=\"#%E7%9B%AE%E7%9A%84\"><i class=\"fa fa-link\"></i></a>目的</h1>\n\n<p><a href=\"https://qiita-image-store.s3.amazonaws.com/0/132699/031d9cc0-a052-7c0c-a943-5db97b507987.gif\" target=\"_blank\"><img src=\"https://qiita-image-store.s3.amazonaws.com/0/132699/031d9cc0-a052-7c0c-a943-5db97b507987.gif\" alt=\"overlay_2.gif\"></a></p>\n\n<p>こんな風にオーバーレイ表示させたViewをドラッグ＆ドロップで好きな位置に移動させたい。<br>\nかつ、他のレイヤーのタッチイベントも正常に動作させたい。</p>\n\n<ul>\n<li>このViewの名前を便宜上movableViewと呼びます。</li>\n<li>以下で紹介するコードはKotlinで書いています。ポイントは基本的に変わらないので適宜読み替えてください。</li>\n<li>オーバーレイの方法とViewのドラッグ＆ドロップの方法は知っているという前提で話を進めちゃいます。</li>\n</ul>\n\n<h1>\n<span id=\"そもそもの話\" class=\"fragment\"></span><a href=\"#%E3%81%9D%E3%82%82%E3%81%9D%E3%82%82%E3%81%AE%E8%A9%B1\"><i class=\"fa fa-link\"></i></a>そもそもの話</h1>\n\n<p>そもそもどうやってオーバーレイやるの？って話はこちらを参考にしました。<br>\n<a href=\"http://techbooster.org/android/ui/13182/\">画面上にアプリの情報を常時表示する</a></p>\n\n<p>そもそもドラッグ＆ドロップでViewを移動するにはどうするの？って話はこちらを参考に。<br>\n<a href=\"http://kurukurupapa.hatenablog.com/entry/20120422/1335098811\">こんなに簡単だとは思わなかった！Viewのドラッグ方法</a></p>\n\n<h1>\n<span id=\"はまったぞいや\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%BE%E3%81%A3%E3%81%9F%E3%81%9E%E3%81%84%E3%82%84\"><i class=\"fa fa-link\"></i></a>はまったぞいや。</h1>\n\n<p>上記の二つを組み合わせたようなものをやりたいんだけど、はまった。</p>\n\n<p>単純にViewをオーバーレイさせるだけなら、<br>\nViewのタッチイベントと他のレイヤーのタッチイベントを両方拾うことができる。</p>\n\n<p>普通にmovableViewを置くだけだと、画面全体で移動させることはできなかった。</p>\n\n<p>今回はViewを画面全体で動かしたいので、画面全体を覆うような親ビューの子にmovableViewを置いた。<br>\nそうすると、今度は他のレイヤーのタッチイベントが拾えなくなる。</p>\n\n<p>まったく同じ悩みを持っている記事があったけど、結局明確な解決策は載ってなかった。<br>\n<a href=\"http://ja.stackoverflow.com/questions/14544/android%E3%81%A7overlay%E8%A1%A8%E7%A4%BA%E3%81%95%E3%81%9B%E3%81%9Fview%E3%81%AB%E3%82%BF%E3%83%83%E3%83%81%E3%82%A4%E3%83%99%E3%83%B3%E3%83%88%E3%82%92%E6%B6%88%E8%B2%BB%E3%81%95%E3%81%9B%E3%81%AA%E3%81%84%E3%82%88%E3%81%86%E3%81%AB%E3%81%99%E3%82%8B\">Androidでoverlay表示させたViewにタッチイベントを消費させないようにする</a></p>\n\n<p>これを解決するためのポイントは以下。</p>\n\n<p>・WindowManager#addView()でオーバーレイに適応される領域はaddViewしたときのViewの領域だけ。<br>\n・オーバーレイ表示領域はGravityの指定がなければ画面の中心になる。（Gravity.CENTERと同じ）<br>\n・addViewしたあとにViewを移動してもオーバーレイ領域は移動しない</p>\n\n<h1>\n<span id=\"解決法\" class=\"fragment\"></span><a href=\"#%E8%A7%A3%E6%B1%BA%E6%B3%95\"><i class=\"fa fa-link\"></i></a>解決法</h1>\n\n<p>結論から言うと、Viewの位置を移動させるのではなく、<br>\nオーバーレイの表示領域自体を移動させることで解決しました。</p>\n\n<p>まずはコードから。必要な部分だけ抜粋。</p>\n\n<div class=\"code-frame\" data-lang=\"kotlin\">\n<div class=\"code-lang\"><span class=\"bold\">OverlayService.kt</span></div>\n<div class=\"highlight\"><pre>\n\n<span class=\"k\">class</span> <span class=\"nc\">OverlayService</span> <span class=\"p\">:</span> <span class=\"n\">Service</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n\n<span class=\"c1\">// オーバーレイ表示させるビュー</span>\n<span class=\"k\">val</span> <span class=\"py\">overlayView</span><span class=\"p\">:</span> <span class=\"n\">ViewGroup</span> <span class=\"k\">by</span> <span class=\"n\">lazy</span> <span class=\"p\">{</span> <span class=\"n\">LayoutInflater</span><span class=\"p\">.</span><span class=\"n\">from</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">).</span><span class=\"n\">inflate</span><span class=\"p\">(</span><span class=\"n\">R</span><span class=\"p\">.</span><span class=\"n\">layout</span><span class=\"p\">.</span><span class=\"n\">timer_overlay_layout</span><span class=\"p\">,</span> <span class=\"k\">null</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">ViewGroup</span> <span class=\"p\">}</span>\n\n<span class=\"c1\">// WindowManager</span>\n<span class=\"k\">val</span> <span class=\"py\">windowManager</span><span class=\"p\">:</span> <span class=\"n\">WindowManager</span> <span class=\"k\">by</span> <span class=\"n\">lazy</span> <span class=\"p\">{</span> <span class=\"n\">applicationContext</span><span class=\"p\">.</span><span class=\"n\">getSystemService</span><span class=\"p\">(</span><span class=\"n\">Context</span><span class=\"p\">.</span><span class=\"n\">WINDOW_SERVICE</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">WindowManager</span> <span class=\"p\">}</span>\n\n<span class=\"c1\">// WindowManagerに設定するレイアウトパラメータ</span>\n<span class=\"k\">var</span> <span class=\"py\">params</span><span class=\"p\">:</span> <span class=\"n\">WindowManager</span><span class=\"p\">.</span><span class=\"n\">LayoutParams</span><span class=\"p\">?</span> <span class=\"p\">=</span> <span class=\"k\">null</span>\n\n<span class=\"c1\">// ディスプレイのサイズを格納する</span>\n<span class=\"k\">val</span> <span class=\"py\">displaySize</span><span class=\"p\">:</span> <span class=\"n\">Point</span> <span class=\"k\">by</span> <span class=\"n\">lazy</span> <span class=\"p\">{</span>\n    <span class=\"k\">val</span> <span class=\"py\">display</span> <span class=\"p\">=</span> <span class=\"n\">windowManager</span><span class=\"p\">.</span><span class=\"n\">defaultDisplay</span>\n    <span class=\"k\">val</span> <span class=\"py\">size</span> <span class=\"p\">=</span> <span class=\"n\">Point</span><span class=\"p\">()</span>\n    <span class=\"n\">display</span><span class=\"p\">.</span><span class=\"n\">getSize</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"p\">)</span>\n    <span class=\"n\">size</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// ロングタップ判定用</span>\n<span class=\"k\">var</span> <span class=\"py\">isLongClick</span><span class=\"p\">:</span> <span class=\"n\">Boolean</span> <span class=\"p\">=</span> <span class=\"k\">false</span>\n\n<span class=\"c1\">// 中略 //</span>\n\n<span class=\"k\">override</span> <span class=\"k\">fun</span> <span class=\"nf\">onStartCommand</span><span class=\"p\">(</span><span class=\"n\">intent</span><span class=\"p\">:</span> <span class=\"n\">Intent</span><span class=\"p\">?,</span> <span class=\"n\">flags</span><span class=\"p\">:</span> <span class=\"n\">Int</span><span class=\"p\">,</span> <span class=\"n\">startId</span><span class=\"p\">:</span> <span class=\"n\">Int</span><span class=\"p\">):</span> <span class=\"n\">Int</span> <span class=\"p\">{</span>\n\n    <span class=\"n\">overlayView</span><span class=\"p\">.</span><span class=\"n\">apply</span><span class=\"p\">(</span><span class=\"n\">clickListener</span><span class=\"p\">())</span>\n    <span class=\"c1\">// オーバーレイViewの設定をする</span>\n    <span class=\"n\">params</span> <span class=\"p\">=</span> <span class=\"n\">WindowManager</span><span class=\"p\">.</span><span class=\"n\">LayoutParams</span><span class=\"p\">(</span>\n            <span class=\"n\">WindowManager</span><span class=\"p\">.</span><span class=\"n\">LayoutParams</span><span class=\"p\">.</span><span class=\"n\">WRAP_CONTENT</span><span class=\"p\">,</span>\n            <span class=\"n\">WindowManager</span><span class=\"p\">.</span><span class=\"n\">LayoutParams</span><span class=\"p\">.</span><span class=\"n\">WRAP_CONTENT</span><span class=\"p\">,</span>\n            <span class=\"n\">WindowManager</span><span class=\"p\">.</span><span class=\"n\">LayoutParams</span><span class=\"p\">.</span><span class=\"n\">TYPE_SYSTEM_ALERT</span><span class=\"p\">,</span>\n            <span class=\"n\">WindowManager</span><span class=\"p\">.</span><span class=\"n\">LayoutParams</span><span class=\"p\">.</span><span class=\"n\">FLAG_NOT_FOCUSABLE</span> <span class=\"n\">or</span>\n                    <span class=\"n\">WindowManager</span><span class=\"p\">.</span><span class=\"n\">LayoutParams</span><span class=\"p\">.</span><span class=\"n\">FLAG_LAYOUT_IN_SCREEN</span> <span class=\"n\">or</span>\n                    <span class=\"n\">WindowManager</span><span class=\"p\">.</span><span class=\"n\">LayoutParams</span><span class=\"p\">.</span><span class=\"n\">FLAG_NOT_TOUCH_MODAL</span> <span class=\"n\">or</span>\n                    <span class=\"n\">WindowManager</span><span class=\"p\">.</span><span class=\"n\">LayoutParams</span><span class=\"p\">.</span><span class=\"n\">FLAG_WATCH_OUTSIDE_TOUCH</span><span class=\"p\">,</span>\n            <span class=\"n\">PixelFormat</span><span class=\"p\">.</span><span class=\"n\">TRANSLUCENT</span><span class=\"p\">)</span>\n\n　　<span class=\"c1\">// ここでビューをオーバーレイ領域に追加する</span>\n    <span class=\"n\">windowManager</span><span class=\"p\">.</span><span class=\"n\">addView</span><span class=\"p\">(</span><span class=\"n\">overlayView</span><span class=\"p\">,</span> <span class=\"n\">params</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">START_STICKY</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">private</span> <span class=\"k\">fun</span> <span class=\"nf\">clickListener</span><span class=\"p\">():</span> <span class=\"n\">View</span><span class=\"p\">.()</span> <span class=\"p\">-&gt;</span> <span class=\"n\">Unit</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span>\n        <span class=\"n\">setOnLongClickListener</span> <span class=\"p\">{</span> <span class=\"n\">view</span> <span class=\"p\">-&gt;</span>\n　　　　　　 <span class=\"c1\">// ロングタップ状態にする</span>\n            <span class=\"n\">isLongClick</span> <span class=\"p\">=</span> <span class=\"k\">true</span>\n            <span class=\"c1\">// ロングタップ状態が分かりやすいように背景色を変える</span>\n            <span class=\"n\">view</span><span class=\"p\">.</span><span class=\"n\">setBackgroundResource</span><span class=\"p\">(</span><span class=\"n\">R</span><span class=\"p\">.</span><span class=\"n\">color</span><span class=\"p\">.</span><span class=\"n\">selectedColor</span><span class=\"p\">)</span>\n            <span class=\"k\">false</span>\n        <span class=\"p\">}.</span><span class=\"n\">apply</span> <span class=\"p\">{</span>\n            <span class=\"n\">setOnTouchListener</span> <span class=\"p\">{</span> <span class=\"n\">view</span><span class=\"p\">,</span> <span class=\"n\">motionEvent</span> <span class=\"p\">-&gt;</span>\n\n　　　　　　　   <span class=\"c1\">// タップした位置を取得する</span>\n                <span class=\"k\">val</span> <span class=\"py\">x</span> <span class=\"p\">=</span> <span class=\"n\">motionEvent</span><span class=\"p\">.</span><span class=\"n\">rawX</span><span class=\"p\">.</span><span class=\"n\">toInt</span><span class=\"p\">()</span>\n                <span class=\"k\">val</span> <span class=\"py\">y</span> <span class=\"p\">=</span> <span class=\"n\">motionEvent</span><span class=\"p\">.</span><span class=\"n\">rawY</span><span class=\"p\">.</span><span class=\"n\">toInt</span><span class=\"p\">()</span>\n\n                <span class=\"k\">when</span> <span class=\"p\">(</span><span class=\"n\">motionEvent</span><span class=\"p\">.</span><span class=\"n\">action</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n　　　　　　　　　　　<span class=\"c1\">// Viewを移動させてるときに呼ばれる</span>\n                    <span class=\"n\">MotionEvent</span><span class=\"p\">.</span><span class=\"n\">ACTION_MOVE</span> <span class=\"p\">-&gt;</span> <span class=\"p\">{</span>\n                        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">isLongClick</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n　　　　　　　　　　　　　　　 <span class=\"c1\">// 中心からの移動量を計算する</span>\n                            <span class=\"k\">val</span> <span class=\"py\">centerX</span> <span class=\"p\">=</span> <span class=\"n\">x</span> <span class=\"p\">-</span> <span class=\"p\">(</span><span class=\"n\">displaySize</span><span class=\"p\">.</span><span class=\"n\">x</span> <span class=\"p\">/</span> <span class=\"m\">2</span><span class=\"p\">)</span>\n                            <span class=\"k\">val</span> <span class=\"py\">centerY</span> <span class=\"p\">=</span> <span class=\"n\">y</span> <span class=\"p\">-</span> <span class=\"p\">(</span><span class=\"n\">displaySize</span><span class=\"p\">.</span><span class=\"n\">y</span> <span class=\"p\">/</span> <span class=\"m\">2</span><span class=\"p\">)</span>\n\n                            <span class=\"c1\">// オーバーレイ表示領域を移動量分だけ移動させる</span>\n                            <span class=\"n\">params</span><span class=\"o\">?.</span><span class=\"n\">x</span> <span class=\"p\">=</span> <span class=\"n\">centerX</span>\n                            <span class=\"n\">params</span><span class=\"o\">?.</span><span class=\"n\">y</span> <span class=\"p\">=</span> <span class=\"n\">centerY</span>\n\n　　　　　　　　　　　　　　　 <span class=\"c1\">// 移動した分を更新する</span>\n                            <span class=\"n\">windowManager</span><span class=\"p\">.</span><span class=\"n\">updateViewLayout</span><span class=\"p\">(</span><span class=\"n\">overlayView</span><span class=\"p\">,</span> <span class=\"n\">params</span><span class=\"p\">)</span>\n                        <span class=\"p\">}</span>\n                    <span class=\"p\">}</span>\n\n                    <span class=\"c1\">// Viewの移動が終わったときに呼ばれる</span>\n                    <span class=\"n\">MotionEvent</span><span class=\"p\">.</span><span class=\"n\">ACTION_UP</span> <span class=\"p\">-&gt;</span> <span class=\"p\">{</span>\n                        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">isLongClick</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n                            <span class=\"c1\">// 背景色を戻す</span>\n                            <span class=\"n\">view</span><span class=\"p\">.</span><span class=\"n\">setBackgroundResource</span><span class=\"p\">(</span><span class=\"n\">android</span><span class=\"p\">.</span><span class=\"n\">R</span><span class=\"p\">.</span><span class=\"n\">color</span><span class=\"p\">.</span><span class=\"n\">transparent</span><span class=\"p\">)</span>\n                        <span class=\"p\">}</span>\n                        <span class=\"n\">isLongClick</span> <span class=\"p\">=</span> <span class=\"k\">false</span>\n                    <span class=\"p\">}</span>\n                <span class=\"p\">}</span>\n                <span class=\"k\">false</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<p>長くなってしまったけど、ポイントは二つだけです。</p>\n\n<div class=\"code-frame\" data-lang=\"kotlin\">\n<div class=\"code-lang\"><span class=\"bold\">points.kt</span></div>\n<div class=\"highlight\"><pre>\n<span class=\"c1\">// ディスプレイのサイズを格納する</span>\n<span class=\"k\">val</span> <span class=\"py\">displaySize</span><span class=\"p\">:</span> <span class=\"n\">Point</span> <span class=\"k\">by</span> <span class=\"n\">lazy</span> <span class=\"p\">{</span>\n    <span class=\"k\">val</span> <span class=\"py\">display</span> <span class=\"p\">=</span> <span class=\"n\">windowManager</span><span class=\"p\">.</span><span class=\"n\">defaultDisplay</span>\n    <span class=\"k\">val</span> <span class=\"py\">size</span> <span class=\"p\">=</span> <span class=\"n\">Point</span><span class=\"p\">()</span>\n    <span class=\"n\">display</span><span class=\"p\">.</span><span class=\"n\">getSize</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"p\">)</span>\n    <span class=\"n\">size</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// タップした位置を取得する</span>\n<span class=\"k\">val</span> <span class=\"py\">x</span> <span class=\"p\">=</span> <span class=\"n\">motionEvent</span><span class=\"p\">.</span><span class=\"n\">rawX</span><span class=\"p\">.</span><span class=\"n\">toInt</span><span class=\"p\">()</span>\n<span class=\"k\">val</span> <span class=\"py\">y</span> <span class=\"p\">=</span> <span class=\"n\">motionEvent</span><span class=\"p\">.</span><span class=\"n\">rawY</span><span class=\"p\">.</span><span class=\"n\">toInt</span><span class=\"p\">()</span>\n\n<span class=\"c1\">// 中心からの移動量を計算する</span>\n<span class=\"k\">val</span> <span class=\"py\">centerX</span> <span class=\"p\">=</span> <span class=\"n\">x</span> <span class=\"p\">-</span> <span class=\"p\">(</span><span class=\"n\">displaySize</span><span class=\"p\">.</span><span class=\"n\">x</span> <span class=\"p\">/</span> <span class=\"m\">2</span><span class=\"p\">)</span>\n<span class=\"k\">val</span> <span class=\"py\">centerY</span> <span class=\"p\">=</span> <span class=\"n\">y</span> <span class=\"p\">-</span> <span class=\"p\">(</span><span class=\"n\">displaySize</span><span class=\"p\">.</span><span class=\"n\">y</span> <span class=\"p\">/</span> <span class=\"m\">2</span><span class=\"p\">)</span>\n\n<span class=\"c1\">// オーバーレイ表示領域を移動量分だけ移動させる</span>\n<span class=\"n\">params</span><span class=\"o\">?.</span><span class=\"n\">x</span> <span class=\"p\">=</span> <span class=\"n\">centerX</span>\n<span class=\"n\">params</span><span class=\"o\">?.</span><span class=\"n\">y</span> <span class=\"p\">=</span> <span class=\"n\">centerY</span>\n\n<span class=\"c1\">// 移動した分を更新する</span>\n<span class=\"n\">windowManager</span><span class=\"p\">.</span><span class=\"n\">updateViewLayout</span><span class=\"p\">(</span><span class=\"n\">overlayView</span><span class=\"p\">,</span> <span class=\"n\">params</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n\n<h3>\n<span id=\"ポイント1中心からの移動量を計算してparamsのxとyに入れる\" class=\"fragment\"></span><a href=\"#%E3%83%9D%E3%82%A4%E3%83%B3%E3%83%881%E4%B8%AD%E5%BF%83%E3%81%8B%E3%82%89%E3%81%AE%E7%A7%BB%E5%8B%95%E9%87%8F%E3%82%92%E8%A8%88%E7%AE%97%E3%81%97%E3%81%A6params%E3%81%AEx%E3%81%A8y%E3%81%AB%E5%85%A5%E3%82%8C%E3%82%8B\"><i class=\"fa fa-link\"></i></a>ポイント1：中心からの移動量を計算して、paramsのxとyに入れる</h3>\n\n<p>注意すべきは、タップ位置計算の座標系と、オーバーレイ領域位置計算の座標系が異なる点。</p>\n\n<p>タップ位置はディスプレイの左上が座標の起点（数学っぽく言うと(0,0)）<br>\nオーバーレイ領域位置はディスプレイの中心の座標が起点になってる。<br>\nparamsのxとyにはオーバーレイの座標系を元にした座標が入ります。</p>\n\n<p>これらをまとめるとこんなイメージ<br>\n<a href=\"https://qiita-image-store.s3.amazonaws.com/0/132699/b97158fc-1b7d-74b0-7948-233c1fb2c984.png\" target=\"_blank\"><img src=\"https://qiita-image-store.s3.amazonaws.com/0/132699/b97158fc-1b7d-74b0-7948-233c1fb2c984.png\" alt=\"0999541b-ed7b-dc27-d738-fd525be22412.png\"></a></p>\n\n<p>そこで、タップ位置の座標系とオーバーレイの座標系を合わせるために<br>\n<code>val centerX = x - (displaySize.x / 2)</code><br>\n<code>val centerY = y - (displaySize.y / 2)</code></p>\n\n<p>で、中心から移動させたい移動量を計算します。</p>\n\n<h3>\n<span id=\"ポイント2移動させた分をupdateviewlayoutで更新する\" class=\"fragment\"></span><a href=\"#%E3%83%9D%E3%82%A4%E3%83%B3%E3%83%882%E7%A7%BB%E5%8B%95%E3%81%95%E3%81%9B%E3%81%9F%E5%88%86%E3%82%92updateviewlayout%E3%81%A7%E6%9B%B4%E6%96%B0%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>ポイント2：移動させた分をupdateViewLayoutで更新する</h3>\n\n<p>ただparamsを変えただけだとオーバーレイの領域は変わらないので、<br>\nWindowManager#updateViewLayout()を呼んであげて、描画の更新をします。</p>\n\n<p>表示される領域そのものが移動しているので、Viewの位置を移動させる必要はありません。<br>\n（Viewの位置は表示領域の左上を起点にして計算されるから）</p>\n\n<p>Viewを移動させるよりもシンプルな実装で、実現することができましたね！</p>\n",
    "body": "# 目的\n![overlay_2.gif](https://qiita-image-store.s3.amazonaws.com/0/132699/031d9cc0-a052-7c0c-a943-5db97b507987.gif)\n\nこんな風にオーバーレイ表示させたViewをドラッグ＆ドロップで好きな位置に移動させたい。\nかつ、他のレイヤーのタッチイベントも正常に動作させたい。\n\n- このViewの名前を便宜上movableViewと呼びます。\n- 以下で紹介するコードはKotlinで書いています。ポイントは基本的に変わらないので適宜読み替えてください。\n- オーバーレイの方法とViewのドラッグ＆ドロップの方法は知っているという前提で話を進めちゃいます。\n\n# そもそもの話\n\nそもそもどうやってオーバーレイやるの？って話はこちらを参考にしました。\n[画面上にアプリの情報を常時表示する](http://techbooster.org/android/ui/13182/)\n\nそもそもドラッグ＆ドロップでViewを移動するにはどうするの？って話はこちらを参考に。\n[こんなに簡単だとは思わなかった！Viewのドラッグ方法](http://kurukurupapa.hatenablog.com/entry/20120422/1335098811)\n\n# はまったぞいや。\n\n上記の二つを組み合わせたようなものをやりたいんだけど、はまった。\n\n単純にViewをオーバーレイさせるだけなら、\nViewのタッチイベントと他のレイヤーのタッチイベントを両方拾うことができる。\n\n普通にmovableViewを置くだけだと、画面全体で移動させることはできなかった。\n\n今回はViewを画面全体で動かしたいので、画面全体を覆うような親ビューの子にmovableViewを置いた。\nそうすると、今度は他のレイヤーのタッチイベントが拾えなくなる。\n\nまったく同じ悩みを持っている記事があったけど、結局明確な解決策は載ってなかった。\n[Androidでoverlay表示させたViewにタッチイベントを消費させないようにする](\nhttp://ja.stackoverflow.com/questions/14544/android%E3%81%A7overlay%E8%A1%A8%E7%A4%BA%E3%81%95%E3%81%9B%E3%81%9Fview%E3%81%AB%E3%82%BF%E3%83%83%E3%83%81%E3%82%A4%E3%83%99%E3%83%B3%E3%83%88%E3%82%92%E6%B6%88%E8%B2%BB%E3%81%95%E3%81%9B%E3%81%AA%E3%81%84%E3%82%88%E3%81%86%E3%81%AB%E3%81%99%E3%82%8B)\n\nこれを解決するためのポイントは以下。\n\n・WindowManager#addView()でオーバーレイに適応される領域はaddViewしたときのViewの領域だけ。\n・オーバーレイ表示領域はGravityの指定がなければ画面の中心になる。（Gravity.CENTERと同じ）\n・addViewしたあとにViewを移動してもオーバーレイ領域は移動しない\n\n# 解決法\n結論から言うと、Viewの位置を移動させるのではなく、\nオーバーレイの表示領域自体を移動させることで解決しました。\n\nまずはコードから。必要な部分だけ抜粋。\n\n``` OverlayService.kt\n\nclass OverlayService : Service() {\n\n// オーバーレイ表示させるビュー\nval overlayView: ViewGroup by lazy { LayoutInflater.from(this).inflate(R.layout.timer_overlay_layout, null) as ViewGroup }\n\n// WindowManager\nval windowManager: WindowManager by lazy { applicationContext.getSystemService(Context.WINDOW_SERVICE) as WindowManager }\n\n// WindowManagerに設定するレイアウトパラメータ\nvar params: WindowManager.LayoutParams? = null\n\n// ディスプレイのサイズを格納する\nval displaySize: Point by lazy {\n    val display = windowManager.defaultDisplay\n    val size = Point()\n    display.getSize(size)\n    size\n}\n\n// ロングタップ判定用\nvar isLongClick: Boolean = false\n\n// 中略 //\n\noverride fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {\n\n    overlayView.apply(clickListener())\n    // オーバーレイViewの設定をする\n    params = WindowManager.LayoutParams(\n            WindowManager.LayoutParams.WRAP_CONTENT,\n            WindowManager.LayoutParams.WRAP_CONTENT,\n            WindowManager.LayoutParams.TYPE_SYSTEM_ALERT,\n            WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE or\n                    WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN or\n                    WindowManager.LayoutParams.FLAG_NOT_TOUCH_MODAL or\n                    WindowManager.LayoutParams.FLAG_WATCH_OUTSIDE_TOUCH,\n            PixelFormat.TRANSLUCENT)\n\n　　// ここでビューをオーバーレイ領域に追加する\n    windowManager.addView(overlayView, params)\n\n    return START_STICKY\n}\n\nprivate fun clickListener(): View.() -> Unit {\n    return {\n        setOnLongClickListener { view ->\n　　　　　　 // ロングタップ状態にする\n            isLongClick = true\n            // ロングタップ状態が分かりやすいように背景色を変える\n            view.setBackgroundResource(R.color.selectedColor)\n            false\n        }.apply {\n            setOnTouchListener { view, motionEvent ->\n\n　　　　　　　   // タップした位置を取得する\n                val x = motionEvent.rawX.toInt()\n                val y = motionEvent.rawY.toInt()\n\n                when (motionEvent.action) {\n\n　　　　　　　　　　　// Viewを移動させてるときに呼ばれる\n                    MotionEvent.ACTION_MOVE -> {\n                        if (isLongClick) {\n\n　　　　　　　　　　　　　　　 // 中心からの移動量を計算する\n                            val centerX = x - (displaySize.x / 2)\n                            val centerY = y - (displaySize.y / 2)\n\n                            // オーバーレイ表示領域を移動量分だけ移動させる\n                            params?.x = centerX\n                            params?.y = centerY\n\n　　　　　　　　　　　　　　　 // 移動した分を更新する\n                            windowManager.updateViewLayout(overlayView, params)\n                        }\n                    }\n                    \n                    // Viewの移動が終わったときに呼ばれる\n                    MotionEvent.ACTION_UP -> {\n                        if (isLongClick) {\n\n                            // 背景色を戻す\n                            view.setBackgroundResource(android.R.color.transparent)\n                        }\n                        isLongClick = false\n                    }\n                }\n                false\n            }\n        }\n    }\n}\n```\n\n長くなってしまったけど、ポイントは二つだけです。\n\n```points.kt\n// ディスプレイのサイズを格納する\nval displaySize: Point by lazy {\n    val display = windowManager.defaultDisplay\n    val size = Point()\n    display.getSize(size)\n    size\n}\n\n// タップした位置を取得する\nval x = motionEvent.rawX.toInt()\nval y = motionEvent.rawY.toInt()\n\n// 中心からの移動量を計算する\nval centerX = x - (displaySize.x / 2)\nval centerY = y - (displaySize.y / 2)\n\n// オーバーレイ表示領域を移動量分だけ移動させる\nparams?.x = centerX\nparams?.y = centerY\n\n// 移動した分を更新する\nwindowManager.updateViewLayout(overlayView, params)\n```\n### ポイント1：中心からの移動量を計算して、paramsのxとyに入れる\n注意すべきは、タップ位置計算の座標系と、オーバーレイ領域位置計算の座標系が異なる点。\n\nタップ位置はディスプレイの左上が座標の起点（数学っぽく言うと(0,0)）\nオーバーレイ領域位置はディスプレイの中心の座標が起点になってる。\nparamsのxとyにはオーバーレイの座標系を元にした座標が入ります。\n\nこれらをまとめるとこんなイメージ\n![0999541b-ed7b-dc27-d738-fd525be22412.png](https://qiita-image-store.s3.amazonaws.com/0/132699/b97158fc-1b7d-74b0-7948-233c1fb2c984.png)\n\nそこで、タップ位置の座標系とオーバーレイの座標系を合わせるために\n`val centerX = x - (displaySize.x / 2)`\n`val centerY = y - (displaySize.y / 2)`\n\nで、中心から移動させたい移動量を計算します。\n\n### ポイント2：移動させた分をupdateViewLayoutで更新する\nただparamsを変えただけだとオーバーレイの領域は変わらないので、\nWindowManager#updateViewLayout()を呼んであげて、描画の更新をします。\n\n表示される領域そのものが移動しているので、Viewの位置を移動させる必要はありません。\n（Viewの位置は表示領域の左上を起点にして計算されるから）\n\nViewを移動させるよりもシンプルな実装で、実現することができましたね！\n",
    "coediting": false,
    "created_at": "2016-07-29T10:11:08+09:00",
    "group": null,
    "id": "ce547821dd2e16e4399e",
    "private": false,
    "tags": [
      {
        "name": "Android",
        "versions": []
      },
      {
        "name": "UI",
        "versions": []
      },
      {
        "name": "Kotlin",
        "versions": []
      }
    ],
    "title": "オーバーレイ表示したViewをドラッグ＆ドロップする方法と、はまったポイント",
    "updated_at": "2016-07-29T12:56:22+09:00",
    "url": "http://qiita.com/farman0629/items/ce547821dd2e16e4399e",
    "user": {
      "description": "とあるSIerでAndroidアプリやら業務用システムの開発をしてます\r\nアイデアは浮かぶけど、なかなか時間が取れないのが悩み。",
      "facebook_id": "",
      "followees_count": 0,
      "followers_count": 0,
      "github_login_name": null,
      "id": "farman0629",
      "items_count": 6,
      "linkedin_id": "",
      "location": "",
      "name": "",
      "organization": "",
      "permanent_id": 132699,
      "profile_image_url": "https://pbs.twimg.com/profile_images/2329994051/xp2dvf6yxp9s72pp2v14_normal.jpeg",
      "twitter_screen_name": "farman0629",
      "website_url": ""
    }
  },
  {
    "rendered_body": "<p>アニメーションはモダンなアプリ体験に不可欠なものになってますよね。<br>\n手のひらのなかのツールの使い心地に鈍感な人は減ってきてるのではないでしょうか。</p>\n\n<p>JSでモバイルアプリを作る時、「アニメーションは実装できるけど、カクカクしてたりして、それないほうが良いよね」みたいな話になったことはありませんでしたか？ 僕もTitanium,Ionic Frameworkと触ってきて、こういうフレームワークは割りきって使うものという印象をずっと持ってました。</p>\n\n<p>ただ、去年React Nativeを使って<a href=\"https://itunes.apple.com/us/app/minnano-duan-ge-tou-gaokomyuniti/id675671254?mt=8\">iOS</a>, <a href=\"https://play.google.com/store/apps/details?id=com.plasticaromantica.utayomin&amp;hl=ja\">Androidアプリ</a>（短歌を投稿するSNSアプリです）をリリースしてみて、とても気に入って、今回アニメーションやらインタラクション、どこまで出来るのが実験的にアプリを出してみました。</p>\n\n<p><a href=\"https://launchkit.io/websites/28D-wVkgDV4/\">Phrasal Verbs Flashcard</a><br>\n最近ロンドンに来て、英語学習者の友達が増えたのもあって内容はFlashcardです。一人でデザインしてから作り始めました。２プラットフォーム作っても、一人でまかなえるのがJSベースのフレームワークの良いところです。</p>\n\n<p><a href=\"https://qiita-image-store.s3.amazonaws.com/0/29793/c9cfc25c-4270-eb22-a012-4fda45f73b46.jpeg\" target=\"_blank\"><img src=\"https://qiita-image-store.s3.amazonaws.com/0/29793/c9cfc25c-4270-eb22-a012-4fda45f73b46.jpeg\" alt=\"A4.jpg\"></a></p>\n\n<p>今回活用したLibraryを実際どこで使ってるかを含め紹介していきます。<br>\n触れるのは、<strong>Animated</strong>、<strong>PanResponder</strong>、<strong>ReactArt</strong>、そして<strong>OpenGL</strong>です。</p>\n\n<p>それぞれ、<strong>アニメーション全般</strong>、<strong>カードインタラクション</strong>、<strong>チャート</strong>、<strong>カードの背景のブラー</strong>で使っています。<br>\n参考にアプリのGIFアニメーションを置いておきます。</p>\n\n<p><a href=\"https://qiita-image-store.s3.amazonaws.com/0/29793/a79bc1be-1bdb-9171-ab74-2e7405b6b53c.gif\" target=\"_blank\"><img src=\"https://qiita-image-store.s3.amazonaws.com/0/29793/a79bc1be-1bdb-9171-ab74-2e7405b6b53c.gif\" alt=\"2016-07-28 16_45_43.gif\"></a></p>\n\n<h3>\n<span id=\"animated\" class=\"fragment\"></span><a href=\"#animated\"><i class=\"fa fa-link\"></i></a>Animated</h3>\n\n<p>メニューのトグル、チャートのアニメーションなど、アニメーション全てでお世話になってます。<br>\nReact Nativeでアニメーションを扱う場合、基本的にこのAnimated libraryを使うことになります。</p>\n\n<p><a href=\"https://facebook.github.io/react-native/docs/animated.html\" class=\"autolink\">https://facebook.github.io/react-native/docs/animated.html</a></p>\n\n<p>過去に別の<a href=\"http://qiita.com/imaimiami/items/1ad4170c06b1922604dd\" id=\"reference-e30e2fce9763e26d805f\">投稿</a>でも触れました。</p>\n\n<h3>\n<span id=\"panresponder\" class=\"fragment\"></span><a href=\"#panresponder\"><i class=\"fa fa-link\"></i></a>PanResponder</h3>\n\n<p>カードへのジェスチャーを扱う為に使ってます。ジェスチャー後にカードが元の位置に戻る動きはAnimatedを使います。</p>\n\n<p>ジェスチャーを簡単に扱う為に用意されたlibrary。tinderのようなカードアニメーションのデモを作ってる人は沢山いますね。</p>\n\n<p><a href=\"https://facebook.github.io/react-native/docs/panresponder.html\" class=\"autolink\">https://facebook.github.io/react-native/docs/panresponder.html</a></p>\n\n<p>こちらも過去<a href=\"http://qiita.com/imaimiami/items/450ce7bfa0c365a5d1dc\" id=\"reference-b85db81e0219caad5645\">別記事</a>で触れています。</p>\n\n<h3>\n<span id=\"reactart\" class=\"fragment\"></span><a href=\"#reactart\"><i class=\"fa fa-link\"></i></a>ReactArt</h3>\n\n<p>グラフを描画するために使ってます。図形をアニメーションさせたかったので、画像ではなくてDrawingライブラリで図形を描画してみました。アニメーションは変わらずAnimatedライブラリを使っています。</p>\n\n<p>ReactARTはDrawingライブラリであるARTのブリッジライブラリ。これをReactNativeから扱えるようにしたLibraryがReactNativeに含まれています。</p>\n\n<p><a href=\"https://github.com/facebook/react-native/tree/master/Libraries/ART\" class=\"autolink\">https://github.com/facebook/react-native/tree/master/Libraries/ART</a></p>\n\n<p>このReactARTはReactNativeのDocsにも登場しないので、最近は別のライブラリもウォッチしています。</p>\n\n<p><a href=\"https://github.com/magicismight/react-native-svg\" class=\"autolink\">https://github.com/magicismight/react-native-svg</a></p>\n\n<h3>\n<span id=\"opengl\" class=\"fragment\"></span><a href=\"#opengl\"><i class=\"fa fa-link\"></i></a>OpenGL</h3>\n\n<p>カードの背景画像にブラーをかけるのに使っています。今回はOpenGLのSurface自体にAnimationの値を渡すみたいな果敢な事はしていないです。親のViewごとAnimationさせてます。</p>\n\n<p>ReactNative用のOpenGLバインディングです。</p>\n\n<p><a href=\"https://github.com/ProjectSeptemberInc/gl-react-native\" class=\"autolink\">https://github.com/ProjectSeptemberInc/gl-react-native</a></p>\n\n<h4>\n<span id=\"まとめ\" class=\"fragment\"></span><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\"><i class=\"fa fa-link\"></i></a>まとめ</h4>\n\n<p>ReactNativeのHotReloadを使ってアニメーションを試しながらサクサク開発出来るのは楽しいです。</p>\n\n<p>今回のアプリはもちろんAndroid版もリリースしています。Androidでは正直削った機能もあるけど、箇所によっては何ら問題なく気持ち良い体験が提供できる感触がありました。</p>\n\n<p><a href=\"https://qiita-image-store.s3.amazonaws.com/0/29793/03fd4779-b282-75f5-5568-ff542c0af398.png\" target=\"_blank\"><img width=\"640\" alt=\"iPhone_6_-_iPhone_6___iOS_9_3__13E230_ 2.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/29793/03fd4779-b282-75f5-5568-ff542c0af398.png\"></a></p>\n\n<p>以前JSでモバイルアプリ開発して絶望した経験がある人は、今一度イメージを更新して採用を考慮にいれてみればいいのではと思います。</p>\n\n<p>ちなみに、<a href=\"http://qiita.com/imaimiami/items/8e62a5111fe48a65b911\" id=\"reference-0274ac4a7d79b346f128\">React Nativeでどんな事出来るの？って記事</a>も最近投稿したので良ければどうぞ！</p>\n\n<p>では、またいつか！ :)</p>\n",
    "body": "アニメーションはモダンなアプリ体験に不可欠なものになってますよね。\n手のひらのなかのツールの使い心地に鈍感な人は減ってきてるのではないでしょうか。\n\nJSでモバイルアプリを作る時、「アニメーションは実装できるけど、カクカクしてたりして、それないほうが良いよね」みたいな話になったことはありませんでしたか？ 僕もTitanium,Ionic Frameworkと触ってきて、こういうフレームワークは割りきって使うものという印象をずっと持ってました。\n\nただ、去年React Nativeを使って[iOS](https://itunes.apple.com/us/app/minnano-duan-ge-tou-gaokomyuniti/id675671254?mt=8), [Androidアプリ](https://play.google.com/store/apps/details?id=com.plasticaromantica.utayomin&hl=ja)（短歌を投稿するSNSアプリです）をリリースしてみて、とても気に入って、今回アニメーションやらインタラクション、どこまで出来るのが実験的にアプリを出してみました。\n\n[Phrasal Verbs Flashcard](https://launchkit.io/websites/28D-wVkgDV4/)\n最近ロンドンに来て、英語学習者の友達が増えたのもあって内容はFlashcardです。一人でデザインしてから作り始めました。２プラットフォーム作っても、一人でまかなえるのがJSベースのフレームワークの良いところです。\n\n![A4.jpg](https://qiita-image-store.s3.amazonaws.com/0/29793/c9cfc25c-4270-eb22-a012-4fda45f73b46.jpeg)\n\n今回活用したLibraryを実際どこで使ってるかを含め紹介していきます。\n触れるのは、**Animated**、**PanResponder**、**ReactArt**、そして**OpenGL**です。\n\nそれぞれ、**アニメーション全般**、**カードインタラクション**、**チャート**、**カードの背景のブラー**で使っています。\n参考にアプリのGIFアニメーションを置いておきます。\n\n![2016-07-28 16_45_43.gif](https://qiita-image-store.s3.amazonaws.com/0/29793/a79bc1be-1bdb-9171-ab74-2e7405b6b53c.gif)\n\n### Animated\n\nメニューのトグル、チャートのアニメーションなど、アニメーション全てでお世話になってます。\nReact Nativeでアニメーションを扱う場合、基本的にこのAnimated libraryを使うことになります。\n\nhttps://facebook.github.io/react-native/docs/animated.html\n\n過去に別の[投稿](http://qiita.com/imaimiami/items/1ad4170c06b1922604dd)でも触れました。\n\n### PanResponder\n\nカードへのジェスチャーを扱う為に使ってます。ジェスチャー後にカードが元の位置に戻る動きはAnimatedを使います。\n\nジェスチャーを簡単に扱う為に用意されたlibrary。tinderのようなカードアニメーションのデモを作ってる人は沢山いますね。\n\nhttps://facebook.github.io/react-native/docs/panresponder.html\n\nこちらも過去[別記事](http://qiita.com/imaimiami/items/450ce7bfa0c365a5d1dc)で触れています。\n\n### ReactArt\n\nグラフを描画するために使ってます。図形をアニメーションさせたかったので、画像ではなくてDrawingライブラリで図形を描画してみました。アニメーションは変わらずAnimatedライブラリを使っています。\n\nReactARTはDrawingライブラリであるARTのブリッジライブラリ。これをReactNativeから扱えるようにしたLibraryがReactNativeに含まれています。\n\nhttps://github.com/facebook/react-native/tree/master/Libraries/ART\n\nこのReactARTはReactNativeのDocsにも登場しないので、最近は別のライブラリもウォッチしています。\n\nhttps://github.com/magicismight/react-native-svg\n\n### OpenGL\n\nカードの背景画像にブラーをかけるのに使っています。今回はOpenGLのSurface自体にAnimationの値を渡すみたいな果敢な事はしていないです。親のViewごとAnimationさせてます。\n\nReactNative用のOpenGLバインディングです。\n\nhttps://github.com/ProjectSeptemberInc/gl-react-native\n\n#### まとめ\n\nReactNativeのHotReloadを使ってアニメーションを試しながらサクサク開発出来るのは楽しいです。\n\n今回のアプリはもちろんAndroid版もリリースしています。Androidでは正直削った機能もあるけど、箇所によっては何ら問題なく気持ち良い体験が提供できる感触がありました。\n\n<img width=\"640\" alt=\"iPhone_6_-_iPhone_6___iOS_9_3__13E230_ 2.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/29793/03fd4779-b282-75f5-5568-ff542c0af398.png\">\n\n以前JSでモバイルアプリ開発して絶望した経験がある人は、今一度イメージを更新して採用を考慮にいれてみればいいのではと思います。\n\nちなみに、[React Nativeでどんな事出来るの？って記事](http://qiita.com/imaimiami/items/8e62a5111fe48a65b911)も最近投稿したので良ければどうぞ！\n\nでは、またいつか！ :)\n",
    "coediting": false,
    "created_at": "2016-07-29T07:31:53+09:00",
    "group": null,
    "id": "618dab3071a42fc42bca",
    "private": false,
    "tags": [
      {
        "name": "JavaScript",
        "versions": []
      },
      {
        "name": "Android",
        "versions": []
      },
      {
        "name": "iOS",
        "versions": []
      },
      {
        "name": "reactjs",
        "versions": []
      },
      {
        "name": "reactnative",
        "versions": []
      }
    ],
    "title": "JSでもモバイルアプリらしい体験は実装できるのでしょうか？ with React Native",
    "updated_at": "2016-07-29T07:31:53+09:00",
    "url": "http://qiita.com/imaimiami/items/618dab3071a42fc42bca",
    "user": {
      "description": null,
      "facebook_id": null,
      "followees_count": 2,
      "followers_count": 32,
      "github_login_name": "imaimiami",
      "id": "imaimiami",
      "items_count": 23,
      "linkedin_id": null,
      "location": null,
      "name": "",
      "organization": null,
      "permanent_id": 29793,
      "profile_image_url": "https://0.gravatar.com/avatar/1bacc16e3879ad4f5f1c923c60dc32f5?d=https%3A%2F%2Fidenticons.github.com%2F67ad8af2181fe40edf49370d90291945.png",
      "twitter_screen_name": "imaimiami",
      "website_url": null
    }
  },
  {
    "rendered_body": "<p>今の時代、スマートフォン（Android/iPhone）ですらデバイス全体のデータに暗号化が掛かっているのに、PCはセットアップしないと暗号化がなされない。<br>\nせっかくCPUにAES-NI命令も乗っててほとんどオーバーヘッドがないので暗号化を掛けよう。</p>\n\n<p>Linuxにはdm-crypt/luksでシステムの起動ディスク全体に暗号化を掛ける機能がある。これは、Linux起動前にパスワードの入力を必要とする。<br>\nPCはともかく、サーバなどに暗号化を掛けるときは、遠隔でパスワードを入力できないと不便なので、その部分をSSHで入力できるようにする。</p>\n\n<hr>\n\n<h1>\n<span id=\"サーバー側の準備\" class=\"fragment\"></span><a href=\"#%E3%82%B5%E3%83%BC%E3%83%90%E3%83%BC%E5%81%B4%E3%81%AE%E6%BA%96%E5%82%99\"><i class=\"fa fa-link\"></i></a>サーバー側の準備</h1>\n\n<p>debian を想定。</p>\n\n<h2>\n<span id=\"11-インストール\" class=\"fragment\"></span><a href=\"#11-%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\"><i class=\"fa fa-link\"></i></a>1.1 インストール</h2>\n\n<p>必要なパッケージをインストール。 dropbear がキモ。組み込み用のSSHサーバー。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>\napt-get install openssh-server dropbear busybox\n</pre></div></div>\n\n<h2>\n<span id=\"12-鍵のコピー\" class=\"fragment\"></span><a href=\"#12-%E9%8D%B5%E3%81%AE%E3%82%B3%E3%83%94%E3%83%BC\"><i class=\"fa fa-link\"></i></a>1.2 鍵のコピー</h2>\n\n<p>勝手に秘密鍵・公開鍵を作ってくれるので、秘密鍵 <code>/etc/initramfs-tools/root/.ssh/id_rsa</code> をSSH接続したい接続元マシンにrsync/sftpなどでコピーする。</p>\n\n<h1>\n<span id=\"grubをいじる\" class=\"fragment\"></span><a href=\"#grub%E3%82%92%E3%81%84%E3%81%98%E3%82%8B\"><i class=\"fa fa-link\"></i></a>GRUBをいじる</h1>\n\n<h2>\n<span id=\"21-grub設定の書き換え\" class=\"fragment\"></span><a href=\"#21-grub%E8%A8%AD%E5%AE%9A%E3%81%AE%E6%9B%B8%E3%81%8D%E6%8F%9B%E3%81%88\"><i class=\"fa fa-link\"></i></a>2.1 GRUB設定の書き換え</h2>\n\n<p><code>/etc/default/grub</code> をvimなどで開いて、 <code>GRUB_CMDLINE_LINUX=</code> の部分を以下のように変更。</p>\n\n<p><code>GRUB_CMDLINE_LINUX=\"ip=IPアドレス:空:ゲートウェイIP:ネットマスク:ホスト名:インターフェイス:none\"</code></p>\n\n<h3>\n<span id=\"例\" class=\"fragment\"></span><a href=\"#%E4%BE%8B\"><i class=\"fa fa-link\"></i></a>例</h3>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>\nGRUB_CMDLINE_LINUX=\"ip=192.168.122.192::192.168.122.1:255.255.255.0::eth0:none\" \n</pre></div></div>\n\n<h2>\n<span id=\"22-grubinitramを更新\" class=\"fragment\"></span><a href=\"#22-grubinitram%E3%82%92%E6%9B%B4%E6%96%B0\"><i class=\"fa fa-link\"></i></a>2.2 GRUB/initramを更新</h2>\n\n<p>root権限またはsudoした権限で</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>\nupdate-grub\nupdate-initramfs -u # 一応（なくていいかも）\n</pre></div></div>\n\n<p>をしてgrub/initramfs等をアップデート。</p>\n\n<hr>\n\n<h1>\n<span id=\"サーバーに接続-ディスク暗号化解除\" class=\"fragment\"></span><a href=\"#%E3%82%B5%E3%83%BC%E3%83%90%E3%83%BC%E3%81%AB%E6%8E%A5%E7%B6%9A-%E3%83%87%E3%82%A3%E3%82%B9%E3%82%AF%E6%9A%97%E5%8F%B7%E5%8C%96%E8%A7%A3%E9%99%A4\"><i class=\"fa fa-link\"></i></a>サーバーに接続 (ディスク暗号化解除)</h1>\n\n<p>サーバーの秘密鍵 <code>/etc/initramfs-tools/root/.ssh/id_rsa</code> を手元に持ってきて <code>-i</code> で指定して接続をする。</p>\n\n<p>SSHをすでにマシンに入れていた場合、initramfsで起動するSSHのホスト鍵と異なるので、 <code>StrictHostKeyChecking=no</code> にしないと接続されないことがある。</p>\n\n<h2>\n<span id=\"ちょい危険な方法\" class=\"fragment\"></span><a href=\"#%E3%81%A1%E3%82%87%E3%81%84%E5%8D%B1%E9%99%BA%E3%81%AA%E6%96%B9%E6%B3%95\"><i class=\"fa fa-link\"></i></a>ちょい危険な方法</h2>\n\n<p>パスワードが接続元 history に残るので、接続元マシンが絶対に安全なとき以外は微妙。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>\n$ ssh -i ~/id_rsa.initramfs \\ \n -o StrictHostKeyChecking=no \\\n -o UserKnownHostsFile=/dev/null \\\n host.example.com \\\n \"echo -ne \"PASSWORD\" &gt; /lib/cryptsetup/passfifo\"\n\nWarning: Permanently added '130.158.xxx.xxx' (RSA) to the list of known hosts.\n</pre></div></div>\n\n<h2>\n<span id=\"ちょっと安全な方法-接続後に入力\" class=\"fragment\"></span><a href=\"#%E3%81%A1%E3%82%87%E3%81%A3%E3%81%A8%E5%AE%89%E5%85%A8%E3%81%AA%E6%96%B9%E6%B3%95-%E6%8E%A5%E7%B6%9A%E5%BE%8C%E3%81%AB%E5%85%A5%E5%8A%9B\"><i class=\"fa fa-link\"></i></a>ちょっと安全な方法 (接続後に入力)</h2>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>\n$ ssh -i ~/id_rsa.initramfs \\ \n -o StrictHostKeyChecking=no \\\n -o UserKnownHostsFile=/dev/null \\\n host.example.com\n\nWarning: Permanently added '130.158.xxx.xxx' (RSA) to the list of known hosts.\n\n\nBusyBox v1.22.1 (Debian 1:1.22.0-9+deb8u1) built-in shell (ash)\nEnter 'help' for a list of built-in commands.\n\n~ # echo -ne \"PASSWORD\" &gt; /lib/cryptsetup/passfifo\n</pre></div></div>\n\n<p>以上のどちらかを実行すると、勝手に暗号化ロックが解除されて普通のrootドライブのLinuxが立ち上がってくる。</p>\n\n<h3>\n<span id=\"sshconfig\" class=\"fragment\"></span><a href=\"#sshconfig\"><i class=\"fa fa-link\"></i></a>~/.ssh/config</h3>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>\nHost host.example.com\n        Hostname host.example.com\n        User root\n        UserKnownHostsFile ~/.ssh/know_hosts.initramfs\n        IdentityFile ~/.ssh/id_rsa.initramfs\n</pre></div></div>\n\n<h1>\n<span id=\"参考\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83\"><i class=\"fa fa-link\"></i></a>参考</h1>\n\n<ul>\n<li><a href=\"http://blog.neutrino.es/2011/unlocking-a-luks-encrypted-root-partition-remotely-via-ssh/\" class=\"autolink\">http://blog.neutrino.es/2011/unlocking-a-luks-encrypted-root-partition-remotely-via-ssh/</a></li>\n<li><a href=\"https://stinkyparkia.wordpress.com/2014/10/14/remote-unlocking-luks-encrypted-lvm-using-dropbear-ssh-in-ubuntu-server-14-04-1-with-static-ipst/\" class=\"autolink\">https://stinkyparkia.wordpress.com/2014/10/14/remote-unlocking-luks-encrypted-lvm-using-dropbear-ssh-in-ubuntu-server-14-04-1-with-static-ipst/</a></li>\n</ul>\n",
    "body": "今の時代、スマートフォン（Android/iPhone）ですらデバイス全体のデータに暗号化が掛かっているのに、PCはセットアップしないと暗号化がなされない。\nせっかくCPUにAES-NI命令も乗っててほとんどオーバーヘッドがないので暗号化を掛けよう。\n\nLinuxにはdm-crypt/luksでシステムの起動ディスク全体に暗号化を掛ける機能がある。これは、Linux起動前にパスワードの入力を必要とする。\nPCはともかく、サーバなどに暗号化を掛けるときは、遠隔でパスワードを入力できないと不便なので、その部分をSSHで入力できるようにする。\n\n----\n\n# サーバー側の準備\ndebian を想定。\n\n## 1.1 インストール\n必要なパッケージをインストール。 dropbear がキモ。組み込み用のSSHサーバー。\n\n```\napt-get install openssh-server dropbear busybox\n```\n\n## 1.2 鍵のコピー\n勝手に秘密鍵・公開鍵を作ってくれるので、秘密鍵 `/etc/initramfs-tools/root/.ssh/id_rsa` をSSH接続したい接続元マシンにrsync/sftpなどでコピーする。\n\n# GRUBをいじる\n## 2.1 GRUB設定の書き換え\n\n`/etc/default/grub` をvimなどで開いて、 `GRUB_CMDLINE_LINUX=` の部分を以下のように変更。\n\n`GRUB_CMDLINE_LINUX=\"ip=IPアドレス:空:ゲートウェイIP:ネットマスク:ホスト名:インターフェイス:none\" `\n\n### 例\n\n```\nGRUB_CMDLINE_LINUX=\"ip=192.168.122.192::192.168.122.1:255.255.255.0::eth0:none\" \n```\n\n## 2.2 GRUB/initramを更新\nroot権限またはsudoした権限で\n\n```\nupdate-grub\nupdate-initramfs -u # 一応（なくていいかも）\n```\n\nをしてgrub/initramfs等をアップデート。\n\n----\n\n# サーバーに接続 (ディスク暗号化解除)\nサーバーの秘密鍵 `/etc/initramfs-tools/root/.ssh/id_rsa` を手元に持ってきて `-i` で指定して接続をする。\n\nSSHをすでにマシンに入れていた場合、initramfsで起動するSSHのホスト鍵と異なるので、 `StrictHostKeyChecking=no` にしないと接続されないことがある。\n\n## ちょい危険な方法\nパスワードが接続元 history に残るので、接続元マシンが絶対に安全なとき以外は微妙。\n\n```\n$ ssh -i ~/id_rsa.initramfs \\ \n -o StrictHostKeyChecking=no \\\n -o UserKnownHostsFile=/dev/null \\\n host.example.com \\\n \"echo -ne \"PASSWORD\" > /lib/cryptsetup/passfifo\"\n\nWarning: Permanently added '130.158.xxx.xxx' (RSA) to the list of known hosts.\n```\n\n## ちょっと安全な方法 (接続後に入力)\n\n```\n$ ssh -i ~/id_rsa.initramfs \\ \n -o StrictHostKeyChecking=no \\\n -o UserKnownHostsFile=/dev/null \\\n host.example.com\n\nWarning: Permanently added '130.158.xxx.xxx' (RSA) to the list of known hosts.\n\n\nBusyBox v1.22.1 (Debian 1:1.22.0-9+deb8u1) built-in shell (ash)\nEnter 'help' for a list of built-in commands.\n\n~ # echo -ne \"PASSWORD\" > /lib/cryptsetup/passfifo\n```\n\n以上のどちらかを実行すると、勝手に暗号化ロックが解除されて普通のrootドライブのLinuxが立ち上がってくる。\n\n### ~/.ssh/config\n\n```\nHost host.example.com\n        Hostname host.example.com\n        User root\n        UserKnownHostsFile ~/.ssh/know_hosts.initramfs\n        IdentityFile ~/.ssh/id_rsa.initramfs\n```\n\n# 参考\n* http://blog.neutrino.es/2011/unlocking-a-luks-encrypted-root-partition-remotely-via-ssh/\n* https://stinkyparkia.wordpress.com/2014/10/14/remote-unlocking-luks-encrypted-lvm-using-dropbear-ssh-in-ubuntu-server-14-04-1-with-static-ipst/\n",
    "coediting": false,
    "created_at": "2016-07-29T06:06:46+09:00",
    "group": null,
    "id": "bcc2a71e6b14cde7fe39",
    "private": false,
    "tags": [
      {
        "name": "SSH",
        "versions": []
      },
      {
        "name": "boot",
        "versions": []
      },
      {
        "name": "encryption",
        "versions": []
      },
      {
        "name": "luks",
        "versions": []
      },
      {
        "name": "dm-crypt",
        "versions": []
      }
    ],
    "title": "dm-crypt/luksの起動前パスフレーズ入力(暗号化解除)をSSH経由で行う",
    "updated_at": "2016-07-29T09:29:49+09:00",
    "url": "http://qiita.com/keiya/items/bcc2a71e6b14cde7fe39",
    "user": {
      "description": null,
      "facebook_id": null,
      "followees_count": 4,
      "followers_count": 4,
      "github_login_name": "keiya",
      "id": "keiya",
      "items_count": 9,
      "linkedin_id": null,
      "location": null,
      "name": "",
      "organization": null,
      "permanent_id": 19148,
      "profile_image_url": "https://secure.gravatar.com/avatar/db735de7fb5d3961b26ce704cf41028e",
      "twitter_screen_name": "keiya",
      "website_url": null
    }
  },
  {
    "rendered_body": "<p>Jackじゃなくても、関数型プログラミング的な何かをしてみたい！っておもったのでFunction#apply()とStreamクラスをつくってみました。</p>\n\n<p>自作してみたい人は、ご参考までに。</p>\n\n<p>↓こんな感じにしてみたかった。</p>\n\n<div class=\"code-frame\" data-lang=\"java\">\n<div class=\"code-lang\"><span class=\"bold\">MainActivity.java</span></div>\n<div class=\"highlight\"><pre>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">MainActivity</span> <span class=\"kd\">extends</span> <span class=\"n\">AppCompatActivity</span> <span class=\"o\">{</span>\n    <span class=\"kd\">private</span> <span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"n\">Integer</span><span class=\"o\">&gt;</span> <span class=\"n\">integers</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">ArrayList</span><span class=\"o\">&lt;&gt;();</span>\n    <span class=\"nd\">@Override</span>\n    <span class=\"kd\">protected</span> <span class=\"kt\">void</span> <span class=\"nf\">onCreate</span><span class=\"o\">(</span><span class=\"n\">Bundle</span> <span class=\"n\">savedInstanceState</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kd\">super</span><span class=\"o\">.</span><span class=\"na\">onCreate</span><span class=\"o\">(</span><span class=\"n\">savedInstanceState</span><span class=\"o\">);</span>\n        <span class=\"n\">setContentView</span><span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">.</span><span class=\"na\">layout</span><span class=\"o\">.</span><span class=\"na\">activity_main</span><span class=\"o\">);</span>\n        <span class=\"n\">integers</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">);</span>\n        <span class=\"n\">integers</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">);</span>\n        <span class=\"n\">integers</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">);</span>\n\n        <span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">list</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Stream</span><span class=\"o\">&lt;&gt;(</span><span class=\"n\">integers</span><span class=\"o\">).</span><span class=\"na\">apply</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"n\">Function</span><span class=\"o\">&lt;</span><span class=\"n\">Integer</span><span class=\"o\">,</span> <span class=\"n\">String</span><span class=\"o\">&gt;()</span> <span class=\"o\">{</span>\n            <span class=\"nd\">@Override</span>\n            <span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">apply</span><span class=\"o\">(</span><span class=\"n\">Integer</span> <span class=\"n\">integer</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"k\">return</span> <span class=\"n\">integer</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">();</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}).</span><span class=\"na\">toList</span><span class=\"o\">();</span>\n\n        <span class=\"k\">for</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"nl\">s:</span> <span class=\"n\">list</span><span class=\"o\">)</span> <span class=\"n\">Log</span><span class=\"o\">.</span><span class=\"na\">d</span><span class=\"o\">(</span><span class=\"s\">\"debug\"</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n</div>\n\n<p>つくったもの</p>\n\n<div class=\"code-frame\" data-lang=\"java\">\n<div class=\"code-lang\"><span class=\"bold\">Function.java</span></div>\n<div class=\"highlight\"><pre>\n<span class=\"kd\">public</span> <span class=\"kd\">interface</span> <span class=\"nc\">Function</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"n\">R</span><span class=\"o\">&gt;</span> <span class=\"o\">{</span>\n    <span class=\"n\">R</span> <span class=\"nf\">apply</span><span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"n\">t</span><span class=\"o\">);</span>\n<span class=\"o\">}</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"java\">\n<div class=\"code-lang\"><span class=\"bold\">Stream.java</span></div>\n<div class=\"highlight\"><pre>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Stream</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span> <span class=\"o\">{</span>\n    <span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span> <span class=\"n\">mList</span><span class=\"o\">;</span>\n\n    <span class=\"kd\">public</span> <span class=\"nf\">Stream</span><span class=\"o\">(</span><span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span> <span class=\"n\">list</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">checkNotNull</span><span class=\"o\">(</span><span class=\"n\">list</span><span class=\"o\">);</span>\n        <span class=\"n\">mList</span> <span class=\"o\">=</span> <span class=\"n\">list</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"o\">&lt;</span><span class=\"n\">E</span><span class=\"o\">&gt;</span> <span class=\"n\">Stream</span><span class=\"o\">&lt;</span><span class=\"n\">E</span><span class=\"o\">&gt;</span> <span class=\"nf\">apply</span><span class=\"o\">(</span><span class=\"n\">Function</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"n\">E</span><span class=\"o\">&gt;</span> <span class=\"n\">function</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"n\">E</span><span class=\"o\">&gt;</span> <span class=\"n\">newList</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">ArrayList</span><span class=\"o\">&lt;&gt;(</span><span class=\"n\">mList</span><span class=\"o\">.</span><span class=\"na\">size</span><span class=\"o\">());</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"n\">item</span> <span class=\"o\">:</span> <span class=\"n\">mList</span><span class=\"o\">)</span> <span class=\"n\">newList</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">function</span><span class=\"o\">.</span><span class=\"na\">apply</span><span class=\"o\">(</span><span class=\"n\">item</span><span class=\"o\">));</span>\n        <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"n\">Stream</span><span class=\"o\">&lt;&gt;(</span><span class=\"n\">newList</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span> <span class=\"nf\">toList</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">mList</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n</div>\n\n<p>結果の出力はこんな感じです！</p>\n\n<div class=\"code-frame\" data-lang=\"logos\">\n<div class=\"code-lang\"><span class=\"bold\">LogCat</span></div>\n<div class=\"highlight\"><pre>\n<span class=\"n\">D</span><span class=\"o\">/</span><span class=\"nl\">debug</span><span class=\"p\">:</span> <span class=\"mi\">1</span>\n<span class=\"n\">D</span><span class=\"o\">/</span><span class=\"nl\">debug</span><span class=\"p\">:</span> <span class=\"mi\">2</span>\n<span class=\"n\">D</span><span class=\"o\">/</span><span class=\"nl\">debug</span><span class=\"p\">:</span> <span class=\"mi\">3</span>\n</pre></div>\n</div>\n\n<p>おし！明日仕事でつかってみよっと！！</p>\n\n<p>次回はmapやflatMapやなんか作ってみたいな。</p>\n\n<p>ではおつー。</p>\n\n<p>追記Qiitaの中の人にお願い＞＜<br>\n<code>&lt;T,R&gt;</code> ←ここの色がかわるようにしてください！</p>\n",
    "body": "Jackじゃなくても、関数型プログラミング的な何かをしてみたい！っておもったのでFunction#apply()とStreamクラスをつくってみました。\n\n自作してみたい人は、ご参考までに。\n\n\n\n\n↓こんな感じにしてみたかった。\n\n```java:MainActivity.java\npublic class MainActivity extends AppCompatActivity {\n    private List<Integer> integers = new ArrayList<>();\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        integers.add(1);\n        integers.add(2);\n        integers.add(3);\n\n        List<String> list = new Stream<>(integers).apply(new Function<Integer, String>() {\n            @Override\n            public String apply(Integer integer) {\n                return integer.toString();\n            }\n        }).toList();\n\n        for(String s: list) Log.d(\"debug\", s);\n    }\n}\n```\n\n\n\nつくったもの\n\n```java:Function.java\npublic interface Function<T, R> {\n    R apply(T t);\n}\n```\n\n```java:Stream.java\npublic class Stream<T> {\n    List<T> mList;\n\n    public Stream(List<T> list) {\n        checkNotNull(list);\n        mList = list;\n    }\n\n    public <E> Stream<E> apply(Function<T, E> function) {\n        List<E> newList = new ArrayList<>(mList.size());\n        for (T item : mList) newList.add(function.apply(item));\n        return new Stream<>(newList);\n    }\n\n    public List<T> toList() {\n        return mList;\n    }\n}\n```\n\n結果の出力はこんな感じです！\n\n```logos:LogCat\nD/debug: 1\nD/debug: 2\nD/debug: 3\n```\n\n\nおし！明日仕事でつかってみよっと！！\n\n次回はmapやflatMapやなんか作ってみたいな。\n\nではおつー。\n\n\n追記Qiitaの中の人にお願い＞＜\n```<T,R>``` ←ここの色がかわるようにしてください！\n",
    "coediting": false,
    "created_at": "2016-07-29T00:55:00+09:00",
    "group": null,
    "id": "b30eccdb44abbabf3bed",
    "private": false,
    "tags": [
      {
        "name": "Android",
        "versions": []
      },
      {
        "name": "関数型プログラミング",
        "versions": []
      }
    ],
    "title": "Androidで関数型っぽくListのキャストできるもの自作した！",
    "updated_at": "2016-07-29T09:26:00+09:00",
    "url": "http://qiita.com/Pooh3Mobi/items/b30eccdb44abbabf3bed",
    "user": {
      "description": "実際の開発現場で得た知見や、過去の開発の問題点を元にちょっと開発が楽になる情報や提案、ちょっと楽になる系を中心に情報展開できたらと思います。",
      "facebook_id": "",
      "followees_count": 5,
      "followers_count": 6,
      "github_login_name": null,
      "id": "Pooh3Mobi",
      "items_count": 6,
      "linkedin_id": "",
      "location": "",
      "name": "",
      "organization": "無職（求職中）",
      "permanent_id": 4493,
      "profile_image_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/4493/6e9e973fc388c16e31f3429417299226aa6a87e1/medium.png?1459926094",
      "twitter_screen_name": "Pooh3Mobi",
      "website_url": ""
    }
  },
  {
    "rendered_body": "\n<h1>\n<span id=\"概要\" class=\"fragment\"></span><a href=\"#%E6%A6%82%E8%A6%81\"><i class=\"fa fa-link\"></i></a>概要</h1>\n\n<p>　非同期処理を読みやすくしたい自分メモです。</p>\n\n<h1>\n<span id=\"定義側\" class=\"fragment\"></span><a href=\"#%E5%AE%9A%E7%BE%A9%E5%81%B4\"><i class=\"fa fa-link\"></i></a>定義側</h1>\n\n<div class=\"code-frame\" data-lang=\"kotlin\"><div class=\"highlight\"><pre>\n<span class=\"k\">class</span> <span class=\"nc\">Thread</span><span class=\"p\">&lt;</span><span class=\"n\">Type_</span><span class=\"p\">&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">fun</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"n\">Background_</span><span class=\"p\">:</span> <span class=\"p\">((</span><span class=\"n\">Type_</span><span class=\"p\">?)</span> <span class=\"p\">-&gt;</span> <span class=\"n\">Any</span><span class=\"p\">)</span> <span class=\"p\">-&gt;</span> <span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">Main_</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"n\">Type_</span><span class=\"p\">?,</span> <span class=\"n\">Throwable</span><span class=\"p\">?)</span> <span class=\"p\">-&gt;</span> <span class=\"n\">Unit</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">var</span> <span class=\"py\">result</span><span class=\"p\">:</span> <span class=\"n\">Type_</span><span class=\"p\">?</span> <span class=\"p\">=</span> <span class=\"k\">null</span>\n        <span class=\"k\">var</span> <span class=\"py\">err</span><span class=\"p\">:</span> <span class=\"n\">Throwable</span><span class=\"p\">?</span> <span class=\"p\">=</span> <span class=\"k\">null</span>\n        <span class=\"n\">Observable</span>\n                <span class=\"p\">.</span><span class=\"n\">create</span><span class=\"p\">&lt;</span><span class=\"n\">Type_</span><span class=\"p\">&gt;</span> <span class=\"p\">{</span> <span class=\"n\">subscriber_</span> <span class=\"p\">-&gt;</span>\n                    <span class=\"n\">Background_</span> <span class=\"p\">{</span> <span class=\"n\">value_</span> <span class=\"p\">-&gt;</span>\n                        <span class=\"n\">subscriber_</span><span class=\"p\">.</span><span class=\"n\">onNext</span><span class=\"p\">(</span><span class=\"n\">value_</span><span class=\"p\">)</span>\n                        <span class=\"n\">subscriber_</span><span class=\"p\">.</span><span class=\"n\">onCompleted</span><span class=\"p\">()</span>\n                    <span class=\"p\">}</span>\n                <span class=\"p\">}</span>\n                <span class=\"p\">.</span><span class=\"n\">subscribeOn</span><span class=\"p\">(</span><span class=\"n\">Schedulers</span><span class=\"p\">.</span><span class=\"n\">newThread</span><span class=\"p\">())</span>\n                <span class=\"p\">.</span><span class=\"n\">observeOn</span><span class=\"p\">(</span><span class=\"n\">AndroidSchedulers</span><span class=\"p\">.</span><span class=\"n\">mainThread</span><span class=\"p\">())</span>\n                <span class=\"p\">.</span><span class=\"n\">subscribe</span><span class=\"p\">({</span> <span class=\"n\">result_</span> <span class=\"p\">-&gt;</span>\n                    <span class=\"n\">result</span> <span class=\"p\">=</span> <span class=\"n\">result_</span>\n                <span class=\"p\">},</span> <span class=\"p\">{</span> <span class=\"n\">err_</span><span class=\"p\">:</span> <span class=\"n\">Throwable</span> <span class=\"p\">-&gt;</span>\n                    <span class=\"n\">err</span> <span class=\"p\">=</span> <span class=\"n\">err_</span>\n                <span class=\"p\">},</span> <span class=\"p\">{</span>\n                    <span class=\"n\">Main_</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">,</span> <span class=\"n\">err</span><span class=\"p\">)</span>\n                <span class=\"p\">})</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div></div>\n\n<h1>\n<span id=\"呼び出し側\" class=\"fragment\"></span><a href=\"#%E5%91%BC%E3%81%B3%E5%87%BA%E3%81%97%E5%81%B4\"><i class=\"fa fa-link\"></i></a>呼び出し側</h1>\n\n<div class=\"code-frame\" data-lang=\"kotlin\"><div class=\"highlight\"><pre>\n<span class=\"n\">Thread</span><span class=\"p\">&lt;</span><span class=\"n\">String</span><span class=\"p\">&gt;().</span><span class=\"n\">run</span><span class=\"p\">(</span>\n        <span class=\"n\">Background_</span> <span class=\"p\">=</span> <span class=\"p\">{</span> <span class=\"n\">Callback_</span> <span class=\"p\">-&gt;</span>\n            <span class=\"k\">val</span> <span class=\"py\">result</span> <span class=\"p\">=</span> <span class=\"s\">\"\"</span> <span class=\"c1\">// 重い処理</span>\n            <span class=\"n\">Callback_</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n        <span class=\"p\">},</span>\n        <span class=\"n\">Main_</span> <span class=\"p\">=</span> <span class=\"p\">{</span> <span class=\"n\">result_</span><span class=\"p\">,</span> <span class=\"n\">error_</span> <span class=\"p\">-&gt;</span>\n            <span class=\"k\">when</span> <span class=\"p\">(</span><span class=\"n\">error_</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"k\">null</span> <span class=\"p\">-&gt;</span> <span class=\"p\">{</span>\n                    <span class=\"n\">hoge</span><span class=\"p\">(</span><span class=\"n\">result_</span><span class=\"p\">)</span> <span class=\"c1\">// 結果受け取り</span>\n                <span class=\"p\">}</span>\n                <span class=\"k\">else</span> <span class=\"p\">-&gt;</span> <span class=\"p\">{</span>\n                    <span class=\"c1\">// エラー処理</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n<span class=\"p\">)</span>\n</pre></div></div>\n",
    "body": "# 概要\n　非同期処理を読みやすくしたい自分メモです。\n\n# 定義側\n```kotlin\nclass Thread<Type_> {\n\tfun run(Background_: ((Type_?) -> Any) -> Any, Main_: (Type_?, Throwable?) -> Unit) {\n\t\tvar result: Type_? = null\n\t\tvar err: Throwable? = null\n\t\tObservable\n\t\t\t\t.create<Type_> { subscriber_ ->\n\t\t\t\t\tBackground_ { value_ ->\n\t\t\t\t\t\tsubscriber_.onNext(value_)\n\t\t\t\t\t\tsubscriber_.onCompleted()\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t.subscribeOn(Schedulers.newThread())\n\t\t\t\t.observeOn(AndroidSchedulers.mainThread())\n\t\t\t\t.subscribe({ result_ ->\n\t\t\t\t\tresult = result_\n\t\t\t\t}, { err_: Throwable ->\n\t\t\t\t\terr = err_\n\t\t\t\t}, {\n\t\t\t\t\tMain_(result, err)\n\t\t\t\t})\n\t}\n}\n```\n\n# 呼び出し側\n```kotlin\nThread<String>().run(\n\t\tBackground_ = { Callback_ ->\n\t\t\tval result = \"\" // 重い処理\n\t\t\tCallback_(result)\n\t\t},\n\t\tMain_ = { result_, error_ ->\n\t\t\twhen (error_) {\n\t\t\t\tnull -> {\n\t\t\t\t\thoge(result_) // 結果受け取り\n\t\t\t\t}\n\t\t\t\telse -> {\n\t\t\t\t\t// エラー処理\n\t\t\t\t}\n\t\t\t}\n\t\t}\n)\n```\n",
    "coediting": false,
    "created_at": "2016-07-29T00:41:47+09:00",
    "group": null,
    "id": "5b21495b03bd20e3224a",
    "private": false,
    "tags": [
      {
        "name": "Android",
        "versions": []
      },
      {
        "name": "Kotlin",
        "versions": []
      },
      {
        "name": "RxJava",
        "versions": []
      },
      {
        "name": "RxAndroid",
        "versions": []
      }
    ],
    "title": "RxAndroidのObservableを使った非同期処理を簡略にするメモ(Kotlin)",
    "updated_at": "2016-07-29T00:41:47+09:00",
    "url": "http://qiita.com/kenichi_odo/items/5b21495b03bd20e3224a",
    "user": {
      "description": "1990.08.11: Apple, Braun, Font / Frontend Engineer: Salesforce, ES2015, React, Heroku, Swift, Android Kotlin",
      "facebook_id": "kenichi.odo",
      "followees_count": 0,
      "followers_count": 1,
      "github_login_name": "kenichi-odo",
      "id": "kenichi_odo",
      "items_count": 5,
      "linkedin_id": "",
      "location": "",
      "name": "",
      "organization": "",
      "permanent_id": 110768,
      "profile_image_url": "https://pbs.twimg.com/profile_images/728925887559651328/ALS9ZWPv_normal.jpg",
      "twitter_screen_name": "kenichi_odo",
      "website_url": ""
    }
  },
  {
    "rendered_body": "\n<h1>\n<span id=\"きっかけ\" class=\"fragment\"></span><a href=\"#%E3%81%8D%E3%81%A3%E3%81%8B%E3%81%91\"><i class=\"fa fa-link\"></i></a>きっかけ</h1>\n\n<p>Androidの実行ファイルにコンパイルするDexをプロセス内で行うことにより、Androidアプリのビルドを高速化するDexInProcessですが、いつ有効になったりならなかったりするのかがよくわかりません。(詳しい仕組みはわかっていません)<br>\n詳しい判定をちょっとソース見たら分かりそうじゃないかなと思って見てみました。</p>\n\n<h1>\n<span id=\"まとめ\" class=\"fragment\"></span><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\"><i class=\"fa fa-link\"></i></a>まとめ</h1>\n\n<ul>\n<li>Android Gradle Pluginを2.1.2以上を使っている(この仕様になったのがどのバージョンからなのかは調べられていません) 設定場所:プロジェクト/build.gradleで設定</li>\n<li>Build Tools Versionが23.0.2以上 設定場所:プロジェクト/app/build.gradleで設定</li>\n<li>自分でdexInProcess falseにしていない</li>\n</ul>\n\n<p><code>./gradlew clean asseDeb</code>などでビルドして以下のような<strong>警告文が出なければ有効になっている</strong></p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>\nRunning dex as a separate process.\n\nTo run dex in process, the Gradle daemon needs a larger heap.\nIt currently has 520 MB.\nFor faster builds, increase the maximum heap size for the Gradle daemon to at least 1536 MB.\nTo do this set org.gradle.jvmargs=-Xmx1536M in the project gradle.properties.\nFor more information see https://docs.gradle.org/current/userguide/build_environment.html\n\n</pre></div></div>\n\n<p>また警告文が出た場合は、この<code>To do this set org.gradle.jvmargs=-Xmx1536M in the project gradle.properties.</code>に従って、</p>\n\n<p>プロジェクト/gradle.propertiesに</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>\norg.gradle.jvmargs=-Xmx1536M\n</pre></div></div>\n\n<p>を書けばOK(<strong>状況によって違うようなので1536Mの部分はコピペしないでください</strong>)</p>\n\n<p>ただAndroid Gradle Plugin 2.1.2だと計算にバグがあり、javaMaxHeapSizeを設定していると、gradle.propertiesに記述しても有効にならない場合があるようです。Android Gradle Plugin 2.2で修正されているみたいです。<br>\n<a href=\"https://code.google.com/p/android/issues/detail?id=208214\" class=\"autolink\">https://code.google.com/p/android/issues/detail?id=208214</a></p>\n\n<h1>\n<span id=\"読んでみた\" class=\"fragment\"></span><a href=\"#%E8%AA%AD%E3%82%93%E3%81%A7%E3%81%BF%E3%81%9F\"><i class=\"fa fa-link\"></i></a>読んでみた</h1>\n\n<p>ソースコードを読んでみたらshouldDexInProcessというメソッドで判定しているようです。<br>\n<a href=\"https://android.googlesource.com/platform/tools/base/+/028ba07/build-system/builder/src/main/java/com/android/builder/core/DexByteCodeConverter.java#250\" class=\"autolink\">https://android.googlesource.com/platform/tools/base/+/028ba07/build-system/builder/src/main/java/com/android/builder/core/DexByteCodeConverter.java#250</a></p>\n\n<div class=\"code-frame\" data-lang=\"java\"><div class=\"highlight\"><pre>\n    <span class=\"cm\">/**</span>\n<span class=\"cm\">     * Determine whether to dex in process.</span>\n<span class=\"cm\">     */</span>\n    <span class=\"nd\">@VisibleForTesting</span>\n    <span class=\"kd\">synchronized</span> <span class=\"kt\">boolean</span> <span class=\"nf\">shouldDexInProcess</span><span class=\"o\">(</span>\n            <span class=\"nd\">@NonNull</span> <span class=\"n\">DexOptions</span> <span class=\"n\">dexOptions</span><span class=\"o\">,</span>\n            <span class=\"nd\">@NonNull</span> <span class=\"n\">Revision</span> <span class=\"n\">buildToolsVersion</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n</pre></div></div>\n\n<p>自分でgradleでdexInProcessを無効に設定していたらそっちを優先する(デフォルトは有効)</p>\n\n<div class=\"code-frame\" data-lang=\"java\"><div class=\"highlight\"><pre>\n        <span class=\"k\">if</span> <span class=\"o\">(!</span><span class=\"n\">dexOptions</span><span class=\"o\">.</span><span class=\"na\">getDexInProcess</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n            <span class=\"n\">mIsDexInProcess</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n            <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n</pre></div></div>\n\n<p>Build Tools Versionが23.0.2未満だったら警告文出して無効にする</p>\n\n<div class=\"code-frame\" data-lang=\"java\"><div class=\"highlight\"><pre>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">buildToolsVersion</span><span class=\"o\">.</span><span class=\"na\">compareTo</span><span class=\"o\">(</span><span class=\"n\">DexProcessBuilder</span><span class=\"o\">.</span><span class=\"na\">FIXED_DX_MERGER</span><span class=\"o\">)</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"c1\">// We substitute Dex &gt; 23.0.2 with the local implementation.</span>\n            <span class=\"n\">mLogger</span><span class=\"o\">.</span><span class=\"na\">warning</span><span class=\"o\">(</span><span class=\"s\">\"Running dex in-process requires build tools %1$s.\\n\"</span>\n                            <span class=\"o\">+</span> <span class=\"s\">\"For faster builds update this project to use the latest build tools.\"</span><span class=\"o\">,</span>\n                    <span class=\"n\">DexProcessBuilder</span><span class=\"o\">.</span><span class=\"na\">FIXED_DX_MERGER</span><span class=\"o\">.</span><span class=\"na\">toShortString</span><span class=\"o\">());</span>\n            <span class=\"n\">mIsDexInProcess</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n            <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n\n</pre></div></div>\n\n<p>ちなみにFIXED_DX_MERGERは以下のようになっている</p>\n\n<div class=\"code-frame\" data-lang=\"java\"><div class=\"highlight\"><pre>\n<span class=\"n\">ublic</span> <span class=\"kd\">static</span> <span class=\"kd\">final</span> <span class=\"n\">Revision</span> <span class=\"n\">FIXED_DX_MERGER</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nf\">Revision</span><span class=\"o\">(</span><span class=\"mi\">23</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">);</span>\n</pre></div></div>\n\n<p>あとは自分が動いているVMの最大ヒープサイズ(gradle.propertiesのorg.gradle.jvmargsで設定)と Gradleで以下のように宣言できるjavaMaxHeapSizeを比較して、javaMaxHeapSize以上でないと警告文を出す感じです。<br>\n自分のプロセス内でビルドするので、その時にこのヒープサイズが必要になるということだと思いました。<br>\nちなみに<code>javaMaxHeapSize '4g'</code>しているとgradle.propertiesに<code>org.gradle.jvmargs=-Xmx4608M</code>を記述するように言われました。</p>\n\n<div class=\"code-frame\" data-lang=\"groovy\"><div class=\"highlight\"><pre>\n    <span class=\"n\">dexOptions</span> <span class=\"o\">{</span>\n        <span class=\"n\">javaMaxHeapSize</span> <span class=\"s1\">'4g'</span>\n    <span class=\"o\">}</span>\n\n</pre></div></div>\n\n<div class=\"code-frame\" data-lang=\"java\"><div class=\"highlight\"><pre>\n        <span class=\"c1\">// Requested memory for dex.</span>\n        <span class=\"kt\">long</span> <span class=\"n\">requestedHeapSize</span> <span class=\"o\">=</span> <span class=\"n\">parseHeapSize</span><span class=\"o\">(</span><span class=\"n\">dexOptions</span><span class=\"o\">.</span><span class=\"na\">getJavaMaxHeapSize</span><span class=\"o\">(),</span> <span class=\"n\">mLogger</span><span class=\"o\">);</span>\n        <span class=\"c1\">// Approximate heap size requested.</span>\n        <span class=\"kt\">long</span> <span class=\"n\">requiredHeapSizeHeuristic</span> <span class=\"o\">=</span> <span class=\"n\">requestedHeapSize</span> <span class=\"o\">+</span> <span class=\"n\">NON_DEX_HEAP_SIZE</span><span class=\"o\">;</span>\n        <span class=\"c1\">// Get the approximate heap size that was specified by the user.</span>\n        <span class=\"c1\">// It is important that this be close to the -Xmx value specified, as is is compared with</span>\n        <span class=\"c1\">// the requiredHeapSizeHeuristic, which we suggest the user sets in their gradle.properties.</span>\n        <span class=\"kt\">long</span> <span class=\"n\">maxMemory</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"n\">MemoryPoolMXBean</span> <span class=\"nl\">mpBean:</span> <span class=\"n\">ManagementFactory</span><span class=\"o\">.</span><span class=\"na\">getMemoryPoolMXBeans</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">mpBean</span><span class=\"o\">.</span><span class=\"na\">getType</span><span class=\"o\">()</span> <span class=\"o\">==</span> <span class=\"n\">MemoryType</span><span class=\"o\">.</span><span class=\"na\">HEAP</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">maxMemory</span> <span class=\"o\">+=</span> <span class=\"n\">mpBean</span><span class=\"o\">.</span><span class=\"na\">getUsage</span><span class=\"o\">().</span><span class=\"na\">getMax</span><span class=\"o\">();</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"c1\">// Allow a little extra overhead (50M) as in practice the sum of the heap pools is</span>\n        <span class=\"c1\">// slightly lower than the Xmx setting specified by the user.</span>\n        <span class=\"kd\">final</span> <span class=\"kt\">long</span> <span class=\"n\">EXTRA_HEAP_OVERHEAD</span> <span class=\"o\">=</span>  <span class=\"mi\">50</span> <span class=\"o\">*</span> <span class=\"mi\">1024</span> <span class=\"o\">*</span> <span class=\"mi\">1024</span><span class=\"o\">;</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">requiredHeapSizeHeuristic</span> <span class=\"o\">&gt;</span> <span class=\"n\">maxMemory</span> <span class=\"o\">+</span> <span class=\"n\">EXTRA_HEAP_OVERHEAD</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">String</span> <span class=\"n\">dexOptionsComment</span> <span class=\"o\">=</span> <span class=\"s\">\"\"</span><span class=\"o\">;</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">dexOptions</span><span class=\"o\">.</span><span class=\"na\">getJavaMaxHeapSize</span><span class=\"o\">()</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">dexOptionsComment</span> <span class=\"o\">=</span> <span class=\"n\">String</span><span class=\"o\">.</span><span class=\"na\">format</span><span class=\"o\">(</span>\n                        <span class=\"s\">\" (based on the dexOptions.javaMaxHeapSize = %s)\"</span><span class=\"o\">,</span>\n                        <span class=\"n\">dexOptions</span><span class=\"o\">.</span><span class=\"na\">getJavaMaxHeapSize</span><span class=\"o\">());</span>\n            <span class=\"o\">}</span>\n            <span class=\"n\">mLogger</span><span class=\"o\">.</span><span class=\"na\">warning</span><span class=\"o\">(</span><span class=\"s\">\"\\nRunning dex as a separate process.\\n\\n\"</span>\n                            <span class=\"o\">+</span> <span class=\"s\">\"To run dex in process, the Gradle daemon needs a larger heap.\\n\"</span>\n                            <span class=\"o\">+</span> <span class=\"s\">\"It currently has approximately %1$d MB.\\n\"</span>\n                            <span class=\"o\">+</span> <span class=\"s\">\"For faster builds, increase the maximum heap size for the \"</span>\n                            <span class=\"o\">+</span> <span class=\"s\">\"Gradle daemon to more than %2$s MB%3$s.\\n\"</span>\n                            <span class=\"o\">+</span> <span class=\"s\">\"To do this set org.gradle.jvmargs=-Xmx%2$sM in the \"</span>\n                            <span class=\"o\">+</span> <span class=\"s\">\"project gradle.properties.\\n\"</span>\n                            <span class=\"o\">+</span> <span class=\"s\">\"For more information see \"</span>\n                            <span class=\"o\">+</span> <span class=\"s\">\"https://docs.gradle.org/current/userguide/build_environment.html\\n\"</span><span class=\"o\">,</span>\n                    <span class=\"n\">maxMemory</span> <span class=\"o\">/</span> <span class=\"o\">(</span><span class=\"mi\">1024</span> <span class=\"o\">*</span> <span class=\"mi\">1024</span><span class=\"o\">),</span>\n                    <span class=\"n\">requiredHeapSizeHeuristic</span> <span class=\"o\">/</span> <span class=\"o\">(</span><span class=\"mi\">1024</span> <span class=\"o\">*</span> <span class=\"mi\">1024</span><span class=\"o\">),</span>\n                    <span class=\"n\">dexOptionsComment</span><span class=\"o\">);</span>\n            <span class=\"n\">mIsDexInProcess</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n            <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"n\">mIsDexInProcess</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n        <span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n\n</pre></div></div>\n",
    "body": "# きっかけ\nAndroidの実行ファイルにコンパイルするDexをプロセス内で行うことにより、Androidアプリのビルドを高速化するDexInProcessですが、いつ有効になったりならなかったりするのかがよくわかりません。(詳しい仕組みはわかっていません)\n詳しい判定をちょっとソース見たら分かりそうじゃないかなと思って見てみました。\n\n# まとめ\n\n* Android Gradle Pluginを2.1.2以上を使っている(この仕様になったのがどのバージョンからなのかは調べられていません) 設定場所:プロジェクト/build.gradleで設定\n* Build Tools Versionが23.0.2以上 設定場所:プロジェクト/app/build.gradleで設定\n* 自分でdexInProcess falseにしていない\n\n`./gradlew clean asseDeb`などでビルドして以下のような**警告文が出なければ有効になっている**\n\n```\nRunning dex as a separate process.\n\nTo run dex in process, the Gradle daemon needs a larger heap.\nIt currently has 520 MB.\nFor faster builds, increase the maximum heap size for the Gradle daemon to at least 1536 MB.\nTo do this set org.gradle.jvmargs=-Xmx1536M in the project gradle.properties.\nFor more information see https://docs.gradle.org/current/userguide/build_environment.html\n\n```\n\nまた警告文が出た場合は、この`To do this set org.gradle.jvmargs=-Xmx1536M in the project gradle.properties.`に従って、\n\nプロジェクト/gradle.propertiesに\n\n```\norg.gradle.jvmargs=-Xmx1536M\n```\n\nを書けばOK(**状況によって違うようなので1536Mの部分はコピペしないでください**)\n\n\nただAndroid Gradle Plugin 2.1.2だと計算にバグがあり、javaMaxHeapSizeを設定していると、gradle.propertiesに記述しても有効にならない場合があるようです。Android Gradle Plugin 2.2で修正されているみたいです。\nhttps://code.google.com/p/android/issues/detail?id=208214\n\n# 読んでみた\nソースコードを読んでみたらshouldDexInProcessというメソッドで判定しているようです。\nhttps://android.googlesource.com/platform/tools/base/+/028ba07/build-system/builder/src/main/java/com/android/builder/core/DexByteCodeConverter.java#250\n\n```java\n    /**\n     * Determine whether to dex in process.\n     */\n    @VisibleForTesting\n    synchronized boolean shouldDexInProcess(\n            @NonNull DexOptions dexOptions,\n            @NonNull Revision buildToolsVersion) {\n```\n\n自分でgradleでdexInProcessを無効に設定していたらそっちを優先する(デフォルトは有効)\n\n```java\n        if (!dexOptions.getDexInProcess()) {\n            mIsDexInProcess = false;\n            return false;\n        }\n```\n\nBuild Tools Versionが23.0.2未満だったら警告文出して無効にする\n\n```java\n        if (buildToolsVersion.compareTo(DexProcessBuilder.FIXED_DX_MERGER) < 0) {\n            // We substitute Dex > 23.0.2 with the local implementation.\n            mLogger.warning(\"Running dex in-process requires build tools %1$s.\\n\"\n                            + \"For faster builds update this project to use the latest build tools.\",\n                    DexProcessBuilder.FIXED_DX_MERGER.toShortString());\n            mIsDexInProcess = false;\n            return false;\n        }\n\n```\n\nちなみにFIXED_DX_MERGERは以下のようになっている\n\n```java\nublic static final Revision FIXED_DX_MERGER = new Revision(23, 0, 2);\n```\n\nあとは自分が動いているVMの最大ヒープサイズ(gradle.propertiesのorg.gradle.jvmargsで設定)と Gradleで以下のように宣言できるjavaMaxHeapSizeを比較して、javaMaxHeapSize以上でないと警告文を出す感じです。\n自分のプロセス内でビルドするので、その時にこのヒープサイズが必要になるということだと思いました。\nちなみに`javaMaxHeapSize '4g'`しているとgradle.propertiesに`org.gradle.jvmargs=-Xmx4608M`を記述するように言われました。\n\n```groovy\n    dexOptions {\n        javaMaxHeapSize '4g'\n    }\n\n```\n\n```java\n        // Requested memory for dex.\n        long requestedHeapSize = parseHeapSize(dexOptions.getJavaMaxHeapSize(), mLogger);\n        // Approximate heap size requested.\n        long requiredHeapSizeHeuristic = requestedHeapSize + NON_DEX_HEAP_SIZE;\n        // Get the approximate heap size that was specified by the user.\n        // It is important that this be close to the -Xmx value specified, as is is compared with\n        // the requiredHeapSizeHeuristic, which we suggest the user sets in their gradle.properties.\n        long maxMemory = 0;\n        for (MemoryPoolMXBean mpBean: ManagementFactory.getMemoryPoolMXBeans()) {\n            if (mpBean.getType() == MemoryType.HEAP) {\n                maxMemory += mpBean.getUsage().getMax();\n            }\n        }\n        // Allow a little extra overhead (50M) as in practice the sum of the heap pools is\n        // slightly lower than the Xmx setting specified by the user.\n        final long EXTRA_HEAP_OVERHEAD =  50 * 1024 * 1024;\n        if (requiredHeapSizeHeuristic > maxMemory + EXTRA_HEAP_OVERHEAD) {\n            String dexOptionsComment = \"\";\n            if (dexOptions.getJavaMaxHeapSize() != null) {\n                dexOptionsComment = String.format(\n                        \" (based on the dexOptions.javaMaxHeapSize = %s)\",\n                        dexOptions.getJavaMaxHeapSize());\n            }\n            mLogger.warning(\"\\nRunning dex as a separate process.\\n\\n\"\n                            + \"To run dex in process, the Gradle daemon needs a larger heap.\\n\"\n                            + \"It currently has approximately %1$d MB.\\n\"\n                            + \"For faster builds, increase the maximum heap size for the \"\n                            + \"Gradle daemon to more than %2$s MB%3$s.\\n\"\n                            + \"To do this set org.gradle.jvmargs=-Xmx%2$sM in the \"\n                            + \"project gradle.properties.\\n\"\n                            + \"For more information see \"\n                            + \"https://docs.gradle.org/current/userguide/build_environment.html\\n\",\n                    maxMemory / (1024 * 1024),\n                    requiredHeapSizeHeuristic / (1024 * 1024),\n                    dexOptionsComment);\n            mIsDexInProcess = false;\n            return false;\n        }\n        mIsDexInProcess = true;\n        return true;\n\n```\n",
    "coediting": false,
    "created_at": "2016-07-28T23:13:32+09:00",
    "group": null,
    "id": "ee2ff0603679922705d7",
    "private": false,
    "tags": [
      {
        "name": "Android",
        "versions": []
      },
      {
        "name": "gradle",
        "versions": []
      },
      {
        "name": "AndroidGradlePlugin",
        "versions": []
      }
    ],
    "title": "Androidアプリのビルドを高速化するDex In Processが有効になる条件",
    "updated_at": "2016-07-30T16:17:36+09:00",
    "url": "http://qiita.com/takahirom/items/ee2ff0603679922705d7",
    "user": {
      "description": null,
      "facebook_id": null,
      "followees_count": 35,
      "followers_count": 90,
      "github_login_name": "takahirom",
      "id": "takahirom",
      "items_count": 42,
      "linkedin_id": null,
      "location": null,
      "name": "",
      "organization": null,
      "permanent_id": 27388,
      "profile_image_url": "https://pbs.twimg.com/profile_images/516944611881672704/yK5hm0Lw_normal.png",
      "twitter_screen_name": "new_runnable",
      "website_url": null
    }
  },
  {
    "rendered_body": "<p>intentを用いてenumを渡したり、その値を取得する方法を紹介します</p>\n\n<h1>\n<span id=\"まずenumってよくわかってないんだけど\" class=\"fragment\"></span><a href=\"#%E3%81%BE%E3%81%9Aenum%E3%81%A3%E3%81%A6%E3%82%88%E3%81%8F%E3%82%8F%E3%81%8B%E3%81%A3%E3%81%A6%E3%81%AA%E3%81%84%E3%82%93%E3%81%A0%E3%81%91%E3%81%A9\"><i class=\"fa fa-link\"></i></a>まず、enumってよくわかってないんだけど…</h1>\n\n<p>ざっくり言うと<strong>定数</strong>を簡単に扱う方法です</p>\n\n<div class=\"code-frame\" data-lang=\"java\"><div class=\"highlight\"><pre>\n<span class=\"kd\">enum</span> <span class=\"n\">Hogemon</span><span class=\"o\">{</span>\n    <span class=\"n\">ZENIHOGE</span><span class=\"o\">,</span><span class=\"n\">HITOKAGE</span><span class=\"o\">,</span><span class=\"n\">FUSHIGIHOGE</span>\n<span class=\"o\">}</span>\n</pre></div></div>\n\n<p><code>Hogemon.ZENIHOGE</code>と呼び出せます。<br>\nZENIHOGEはStringとかではなくZENIHOGEという定数になります。<br>\n定数を<code>static final int HOGEMON_ZENIHOGE = 1</code>みたいな感じに定義するよりもいろいろなメリットがあるそうです（詳しくは調べてください…）</p>\n\n<h1>\n<span id=\"intentで渡す方法\" class=\"fragment\"></span><a href=\"#intent%E3%81%A7%E6%B8%A1%E3%81%99%E6%96%B9%E6%B3%95\"><i class=\"fa fa-link\"></i></a>Intentで渡す方法</h1>\n\n<p>他の値と同じようにintentにつめられます。</p>\n\n<div class=\"code-frame\" data-lang=\"java\">\n<div class=\"code-lang\"><span class=\"bold\">intentにつめる</span></div>\n<div class=\"highlight\"><pre>\n<span class=\"n\">intent</span><span class=\"o\">.</span><span class=\"na\">putExtra</span><span class=\"o\">(</span><span class=\"s\">\"hogemon\"</span><span class=\"o\">,</span><span class=\"n\">Hogemon</span><span class=\"o\">.</span><span class=\"na\">FUSHIGIHOGE</span><span class=\"o\">);</span>\n</pre></div>\n</div>\n\n<h1>\n<span id=\"intentから取得する\" class=\"fragment\"></span><a href=\"#intent%E3%81%8B%E3%82%89%E5%8F%96%E5%BE%97%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>Intentから取得する</h1>\n\n<p>enumを取得するにはObjectを取り出す時と同じように<code>getSerializableExtra()</code>を使用します</p>\n\n<div class=\"code-frame\" data-lang=\"java\">\n<div class=\"code-lang\"><span class=\"bold\">intentから取得</span></div>\n<div class=\"highlight\"><pre>\n<span class=\"n\">Hogemon</span> <span class=\"n\">foo</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">Hogemon</span><span class=\"o\">)</span><span class=\"n\">getIntent</span><span class=\"o\">().</span><span class=\"na\">getSerializableExtra</span><span class=\"o\">(</span><span class=\"s\">\"hogemon\"</span><span class=\"o\">);</span>\n</pre></div>\n</div>\n\n<h3>\n<span id=\"getserializableextraってなんだ\" class=\"fragment\"></span><a href=\"#getserializableextra%E3%81%A3%E3%81%A6%E3%81%AA%E3%82%93%E3%81%A0\"><i class=\"fa fa-link\"></i></a>getSerializableExtra()ってなんだ…</h3>\n\n<p>intを取得するときはgetIntExtra()とわかるけどSerializableって何？<br>\nなんでObjectはgetSerializableExtra()で取得できるの？</p>\n\n<p><a href=\"http://www.task-notes.com/entry/20150925/1443150000\">【Java】Serializableの基本（シリアライズ・直列化） - TASK NOTES </a></p>\n\n<blockquote>\n<p>通常、オブジェクトはそのままストリームに書き出して読み込むことが出来ないので、読み書きできる形にデータを整形する事をシリアライズ（直列化）と呼んでいるようです。 オブジェクトをシリアライズ可能にするには java.io.Serializable インタフェースを実装する必要があります。</p>\n</blockquote>\n\n<p>Objectはprimitive型と比べて複雑なので受け渡しのために変形できるようにする（Serializable）ということですね<br>\nなのでObjectを取得するときには<code>getSerializableExtra()</code>を使います（ObjectがSerializableインタフェースを実装していること）<br>\nそしてenumもSerializableインタフェースを実装しているからこのようにして取得できるわけです（参考：<a href=\"http://yshibata.blog.so-net.ne.jp/2008-12-21-2\">enum定数とシリアライズ：柴田 芳樹 (Yoshiki Shibata)：So-netブログ</a>）</p>\n",
    "body": "\nintentを用いてenumを渡したり、その値を取得する方法を紹介します\n\n# まず、enumってよくわかってないんだけど…\n\nざっくり言うと**定数**を簡単に扱う方法です\n\n```java:\nenum Hogemon{\n    ZENIHOGE,HITOKAGE,FUSHIGIHOGE\n}\n```\n\n`Hogemon.ZENIHOGE`と呼び出せます。\nZENIHOGEはStringとかではなくZENIHOGEという定数になります。\n定数を`static final int HOGEMON_ZENIHOGE = 1`みたいな感じに定義するよりもいろいろなメリットがあるそうです（詳しくは調べてください…）\n\n# Intentで渡す方法\n他の値と同じようにintentにつめられます。\n\n```java:intentにつめる\nintent.putExtra(\"hogemon\",Hogemon.FUSHIGIHOGE);\n```\n\n# Intentから取得する\nenumを取得するにはObjectを取り出す時と同じように`getSerializableExtra()`を使用します\n\n```java:intentから取得\nHogemon foo = (Hogemon)getIntent().getSerializableExtra(\"hogemon\");\n```\n\n### getSerializableExtra()ってなんだ…\nintを取得するときはgetIntExtra()とわかるけどSerializableって何？\nなんでObjectはgetSerializableExtra()で取得できるの？\n\n[【Java】Serializableの基本（シリアライズ・直列化） - TASK NOTES ](http://www.task-notes.com/entry/20150925/1443150000)\n>通常、オブジェクトはそのままストリームに書き出して読み込むことが出来ないので、読み書きできる形にデータを整形する事をシリアライズ（直列化）と呼んでいるようです。 オブジェクトをシリアライズ可能にするには java.io.Serializable インタフェースを実装する必要があります。\n\nObjectはprimitive型と比べて複雑なので受け渡しのために変形できるようにする（Serializable）ということですね\nなのでObjectを取得するときには`getSerializableExtra()`を使います（ObjectがSerializableインタフェースを実装していること）\nそしてenumもSerializableインタフェースを実装しているからこのようにして取得できるわけです（参考：[enum定数とシリアライズ：柴田 芳樹 (Yoshiki Shibata)：So-netブログ](http://yshibata.blog.so-net.ne.jp/2008-12-21-2)）\n\n",
    "coediting": false,
    "created_at": "2016-07-28T17:23:45+09:00",
    "group": null,
    "id": "3cdd69e7ace0540119d7",
    "private": false,
    "tags": [
      {
        "name": "Android",
        "versions": []
      },
      {
        "name": "初心者",
        "versions": []
      }
    ],
    "title": "Intentでenumを渡したい、取得したい",
    "updated_at": "2016-07-28T17:23:45+09:00",
    "url": "http://qiita.com/kamo_qiita/items/3cdd69e7ace0540119d7",
    "user": {
      "description": "社会人2年目。新人SE。",
      "facebook_id": "",
      "followees_count": 0,
      "followers_count": 0,
      "github_login_name": "rits-kamoshida",
      "id": "kamo_qiita",
      "items_count": 3,
      "linkedin_id": "",
      "location": "",
      "name": "",
      "organization": "",
      "permanent_id": 126861,
      "profile_image_url": "https://avatars.githubusercontent.com/u/16552476?v=3",
      "twitter_screen_name": null,
      "website_url": ""
    }
  },
  {
    "rendered_body": "<p>ASUS端末には<br>\n「自動起動マネージャー」<br>\nという名前のアプリがデフォルトでインストールされています</p>\n\n<p>これは、バッテリー節約を目的として<br>\nアプリのバックグラウンドからの自動起動を許可するかどうか設定できるのですが<br>\n困ったことに、デフォルトで多くのアプリの自動起動が【無効】にされています（ナ、ナンダッテー！）</p>\n\n<p>ですからいくら待っても AlarmManager の通知は届きません</p>\n\n<p>アプリの自動起動を許可してやりましょう。<br>\nそして改めてあなたの作っているアプリをプレイし、通知を投げてやってください。<br>\nきっと通知欄にあなたのアプリの通知が大量に届いているのを目にすることになるでしょう:-)</p>\n",
    "body": "ASUS端末には\n「自動起動マネージャー」\nという名前のアプリがデフォルトでインストールされています\n\nこれは、バッテリー節約を目的として\nアプリのバックグラウンドからの自動起動を許可するかどうか設定できるのですが\n困ったことに、デフォルトで多くのアプリの自動起動が【無効】にされています（ナ、ナンダッテー！）\n\nですからいくら待っても AlarmManager の通知は届きません\n\nアプリの自動起動を許可してやりましょう。\nそして改めてあなたの作っているアプリをプレイし、通知を投げてやってください。\nきっと通知欄にあなたのアプリの通知が大量に届いているのを目にすることになるでしょう:-)\n",
    "coediting": false,
    "created_at": "2016-07-28T15:49:00+09:00",
    "group": null,
    "id": "3e60f4178f4f806c549a",
    "private": false,
    "tags": [
      {
        "name": "Android",
        "versions": []
      }
    ],
    "title": "ASUS端末でAlarmManager通知が届いていなかった話",
    "updated_at": "2016-07-28T15:49:38+09:00",
    "url": "http://qiita.com/_natsu_no_yuki_/items/3e60f4178f4f806c549a",
    "user": {
      "description": null,
      "facebook_id": null,
      "followees_count": 0,
      "followers_count": 1,
      "github_login_name": null,
      "id": "_natsu_no_yuki_",
      "items_count": 8,
      "linkedin_id": null,
      "location": null,
      "name": "",
      "organization": null,
      "permanent_id": 98954,
      "profile_image_url": "https://abs.twimg.com/sticky/default_profile_images/default_profile_2_normal.png",
      "twitter_screen_name": "_natsu_no_yuki_",
      "website_url": null
    }
  },
  {
    "rendered_body": "\n<h1>\n<span id=\"ankoとdata-bindingを同時に使えない\" class=\"fragment\"></span><a href=\"#anko%E3%81%A8data-binding%E3%82%92%E5%90%8C%E6%99%82%E3%81%AB%E4%BD%BF%E3%81%88%E3%81%AA%E3%81%84\"><i class=\"fa fa-link\"></i></a>AnkoとData Bindingを同時に使えない</h1>\n\n<p>AnkoとData Bindingは同時に使うことができません。<br>\nDataBindingではXMLの名称から <code>~~Binding</code>という名称のクラス(仮にBindingクラスと呼ぶことにします)を自動的に生成してくれますが、Ankoでレイアウトを作成した場合にはBindingクラスを生成してくれません。</p>\n\n<p>Data Bindingのように、Modelを変更したときにViewを更新してくれるようにしたいときにはどうすれば良いのでしょうか?<br>\nData Bindingの完全な代替にはなりませんが、委譲プロパティを使用すればこのようなときに期待の動作をさせることができます。</p>\n\n<h1>\n<span id=\"委譲プロパティ\" class=\"fragment\"></span><a href=\"#%E5%A7%94%E8%AD%B2%E3%83%97%E3%83%AD%E3%83%91%E3%83%86%E3%82%A3\"><i class=\"fa fa-link\"></i></a>委譲プロパティ</h1>\n\n<p>委譲プロパティ(Delegated Properties)を利用すると、あるプロパティにアクセスする際にログを出したりなどといった特定の処理を挟むことができます。</p>\n\n<p>プロパティの後ろに <code>by ~</code> と書くことで 特定のオブジェクトに処理を委譲できます。<br>\n委譲先のクラスとして下記のようなクラスを作成します。</p>\n\n<div class=\"code-frame\" data-lang=\"kotlin\"><div class=\"highlight\"><pre>\n<span class=\"k\">class</span> <span class=\"nc\">Counter</span><span class=\"p\">()</span> <span class=\"p\">:</span> <span class=\"n\">ReadWriteProperty</span><span class=\"p\">&lt;</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">Int</span><span class=\"p\">&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">private</span> <span class=\"k\">var</span> <span class=\"py\">mValue</span><span class=\"p\">:</span> <span class=\"n\">Int</span><span class=\"p\">?</span> <span class=\"p\">=</span> <span class=\"k\">null</span>\n\n    <span class=\"k\">override</span> <span class=\"k\">fun</span> <span class=\"nf\">getValue</span><span class=\"p\">(</span><span class=\"n\">thisRef</span><span class=\"p\">:</span> <span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">property</span><span class=\"p\">:</span> <span class=\"n\">KProperty</span><span class=\"p\">&lt;*&gt;):</span> <span class=\"n\">Int</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">mValue</span> <span class=\"k\">as</span> <span class=\"n\">Int</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">override</span> <span class=\"k\">fun</span> <span class=\"nf\">setValue</span><span class=\"p\">(</span><span class=\"n\">thisRef</span><span class=\"p\">:</span> <span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">property</span><span class=\"p\">:</span> <span class=\"n\">KProperty</span><span class=\"p\">&lt;*&gt;,</span> <span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Int</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">Log</span><span class=\"p\">.</span><span class=\"n\">d</span><span class=\"p\">(</span><span class=\"s\">\"mydebug\"</span><span class=\"p\">,</span> <span class=\"s\">\"${property.name}: $value\"</span><span class=\"p\">)</span>\n        <span class=\"n\">mValue</span> <span class=\"p\">=</span> <span class=\"n\">value</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div></div>\n\n<p>下記のように<code>by Counter()</code>とすればcountへの代入時にCounterクラスのsetValue関数が呼ばれます。<code>Counter()</code>は単なるCounterクラスのコンストラクタです。</p>\n\n<div class=\"code-frame\" data-lang=\"kotlin\"><div class=\"highlight\"><pre>\n<span class=\"k\">var</span> <span class=\"py\">count</span><span class=\"p\">:</span> <span class=\"n\">Int</span> <span class=\"k\">by</span> <span class=\"n\">Counter</span><span class=\"p\">()</span>\n\n<span class=\"c1\">// 省略</span>\n\n<span class=\"n\">count</span> <span class=\"p\">=</span> <span class=\"m\">1</span>\n<span class=\"n\">count</span><span class=\"p\">++</span>\n<span class=\"n\">count</span> <span class=\"p\">=</span> <span class=\"m\">10</span>\n</pre></div></div>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>\ncount: 1\ncount: 2\ncount: 10\n</pre></div></div>\n\n<p>同じように、プロパティの値を取得するときにはgetValue関数が呼び出されます。</p>\n\n<p>下のようにCounterクラスのコンストラクタに値や関数を渡すこともできます。</p>\n\n<div class=\"code-frame\" data-lang=\"kotlin\"><div class=\"highlight\"><pre>\n<span class=\"k\">class</span> <span class=\"nc\">Counter</span><span class=\"p\">&lt;</span><span class=\"n\">T</span><span class=\"p\">&gt;(</span><span class=\"k\">val</span> <span class=\"py\">function</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"n\">property</span><span class=\"p\">:</span> <span class=\"n\">KProperty</span><span class=\"p\">&lt;*&gt;,</span> <span class=\"n\">T</span><span class=\"p\">)</span> <span class=\"p\">-&gt;</span> <span class=\"n\">Unit</span><span class=\"p\">)</span> <span class=\"p\">:</span> <span class=\"n\">ReadWriteProperty</span><span class=\"p\">&lt;</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">T</span><span class=\"p\">&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">private</span> <span class=\"k\">var</span> <span class=\"py\">mValue</span><span class=\"p\">:</span> <span class=\"n\">T</span><span class=\"p\">?</span> <span class=\"p\">=</span> <span class=\"k\">null</span>\n\n    <span class=\"k\">override</span> <span class=\"k\">fun</span> <span class=\"nf\">getValue</span><span class=\"p\">(</span><span class=\"n\">thisRef</span><span class=\"p\">:</span> <span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">property</span><span class=\"p\">:</span> <span class=\"n\">KProperty</span><span class=\"p\">&lt;*&gt;):</span> <span class=\"n\">T</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">mValue</span> <span class=\"k\">as</span> <span class=\"n\">T</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">override</span> <span class=\"k\">fun</span> <span class=\"nf\">setValue</span><span class=\"p\">(</span><span class=\"n\">thisRef</span><span class=\"p\">:</span> <span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">property</span><span class=\"p\">:</span> <span class=\"n\">KProperty</span><span class=\"p\">&lt;*&gt;,</span> <span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">T</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">mValue</span> <span class=\"p\">=</span> <span class=\"n\">value</span>\n        <span class=\"n\">function</span><span class=\"p\">(</span><span class=\"n\">property</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div></div>\n\n<div class=\"code-frame\" data-lang=\"kotlin\"><div class=\"highlight\"><pre>\n<span class=\"k\">var</span> <span class=\"py\">count</span><span class=\"p\">:</span> <span class=\"n\">Int</span> <span class=\"k\">by</span> <span class=\"n\">Counter</span> <span class=\"p\">{</span> <span class=\"n\">property</span><span class=\"p\">,</span> <span class=\"n\">value</span> <span class=\"p\">-&gt;</span>\n    <span class=\"n\">Log</span><span class=\"p\">.</span><span class=\"n\">d</span><span class=\"p\">(</span><span class=\"s\">\"mydebug\"</span><span class=\"p\">,</span> <span class=\"s\">\"${property.name}: $value\"</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</pre></div></div>\n\n<h1>\n<span id=\"なんとかする\" class=\"fragment\"></span><a href=\"#%E3%81%AA%E3%82%93%E3%81%A8%E3%81%8B%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>なんとかする</h1>\n\n<p>以下のように委譲プロパティを使えば、Modelを変更したときにViewを更新する一方向バインディングができます。</p>\n\n<div class=\"code-frame\" data-lang=\"kotlin\">\n<div class=\"code-lang\"><span class=\"bold\">ViewBinder.kt</span></div>\n<div class=\"highlight\"><pre>\n<span class=\"k\">class</span> <span class=\"nc\">ViewBinder</span><span class=\"p\">&lt;</span><span class=\"n\">M</span><span class=\"p\">&gt;(</span><span class=\"k\">val</span> <span class=\"py\">function</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"n\">M</span><span class=\"p\">)</span> <span class=\"p\">-&gt;</span> <span class=\"n\">Unit</span><span class=\"p\">)</span> <span class=\"p\">:</span> <span class=\"n\">ReadWriteProperty</span><span class=\"p\">&lt;</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">M</span><span class=\"p\">&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">private</span> <span class=\"k\">var</span> <span class=\"py\">mValue</span><span class=\"p\">:</span> <span class=\"n\">M</span><span class=\"p\">?</span> <span class=\"p\">=</span> <span class=\"k\">null</span>\n\n    <span class=\"k\">override</span> <span class=\"k\">fun</span> <span class=\"nf\">getValue</span><span class=\"p\">(</span><span class=\"n\">thisRef</span><span class=\"p\">:</span> <span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">property</span><span class=\"p\">:</span> <span class=\"n\">KProperty</span><span class=\"p\">&lt;*&gt;):</span> <span class=\"n\">M</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">mValue</span> <span class=\"k\">as</span> <span class=\"n\">M</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">override</span> <span class=\"k\">fun</span> <span class=\"nf\">setValue</span><span class=\"p\">(</span><span class=\"n\">thisRef</span><span class=\"p\">:</span> <span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">property</span><span class=\"p\">:</span> <span class=\"n\">KProperty</span><span class=\"p\">&lt;*&gt;,</span> <span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">M</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">mValue</span> <span class=\"p\">==</span> <span class=\"n\">value</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">return</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">mValue</span> <span class=\"p\">=</span> <span class=\"n\">value</span>\n        <span class=\"n\">function</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"kotlin\">\n<div class=\"code-lang\"><span class=\"bold\">MyActivityUI</span></div>\n<div class=\"highlight\"><pre>\n<span class=\"k\">class</span> <span class=\"nc\">MyActivityUI</span><span class=\"p\">()</span> <span class=\"p\">:</span><span class=\"n\">AnkoComponent</span><span class=\"p\">&lt;</span><span class=\"n\">MainActivity</span><span class=\"p\">&gt;()</span> <span class=\"p\">{</span>\n\n    <span class=\"k\">var</span> <span class=\"py\">user</span><span class=\"p\">:</span> <span class=\"n\">User</span><span class=\"p\">?</span> <span class=\"k\">by</span> <span class=\"n\">ViewBinder</span> <span class=\"p\">{</span>\n        <span class=\"n\">textView</span><span class=\"p\">.</span><span class=\"n\">text</span> <span class=\"p\">=</span> <span class=\"n\">user</span><span class=\"o\">?.</span><span class=\"n\">name</span>\n\n        <span class=\"c1\">// 省略</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"c1\">// 省略</span>\n\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<hr>\n\n<p>参考記事<br>\n<a href=\"https://medium.com/making-internets/viewbinder-for-android-in-kotlin-abbeae67fab3\">ViewBinder for Android in Kotlin</a></p>\n",
    "body": "# AnkoとData Bindingを同時に使えない\n\nAnkoとData Bindingは同時に使うことができません。\nDataBindingではXMLの名称から `~~Binding`という名称のクラス(仮にBindingクラスと呼ぶことにします)を自動的に生成してくれますが、Ankoでレイアウトを作成した場合にはBindingクラスを生成してくれません。\n\nData Bindingのように、Modelを変更したときにViewを更新してくれるようにしたいときにはどうすれば良いのでしょうか?\nData Bindingの完全な代替にはなりませんが、委譲プロパティを使用すればこのようなときに期待の動作をさせることができます。\n\n# 委譲プロパティ\n\n委譲プロパティ(Delegated Properties)を利用すると、あるプロパティにアクセスする際にログを出したりなどといった特定の処理を挟むことができます。\n\nプロパティの後ろに `by ~` と書くことで 特定のオブジェクトに処理を委譲できます。\n委譲先のクラスとして下記のようなクラスを作成します。\n\n```kotlin\nclass Counter() : ReadWriteProperty<Any, Int> {\n    private var mValue: Int? = null\n\n    override fun getValue(thisRef: Any, property: KProperty<*>): Int {\n        return mValue as Int\n    }\n\n    override fun setValue(thisRef: Any, property: KProperty<*>, value: Int) {\n        Log.d(\"mydebug\", \"${property.name}: $value\")\n        mValue = value\n    }\n}\n```\n\n下記のように`by Counter()`とすればcountへの代入時にCounterクラスのsetValue関数が呼ばれます。`Counter()`は単なるCounterクラスのコンストラクタです。\n\n```kotlin\nvar count: Int by Counter()\n\n// 省略\n\ncount = 1\ncount++\ncount = 10\n```\n\n```\ncount: 1\ncount: 2\ncount: 10\n```\n\n同じように、プロパティの値を取得するときにはgetValue関数が呼び出されます。\n\n下のようにCounterクラスのコンストラクタに値や関数を渡すこともできます。\n\n```kotlin\nclass Counter<T>(val function: (property: KProperty<*>, T) -> Unit) : ReadWriteProperty<Any, T> {\n    private var mValue: T? = null\n\n    override fun getValue(thisRef: Any, property: KProperty<*>): T {\n        return mValue as T\n    }\n\n    override fun setValue(thisRef: Any, property: KProperty<*>, value: T) {\n        mValue = value\n        function(property, value)\n    }\n}\n```\n\n```kotlin\nvar count: Int by Counter { property, value ->\n    Log.d(\"mydebug\", \"${property.name}: $value\")\n}\n```\n\n# なんとかする\n\n以下のように委譲プロパティを使えば、Modelを変更したときにViewを更新する一方向バインディングができます。\n\n```kotlin:ViewBinder.kt\nclass ViewBinder<M>(val function: (M) -> Unit) : ReadWriteProperty<Any, M> {\n    private var mValue: M? = null\n\n    override fun getValue(thisRef: Any, property: KProperty<*>): M {\n        return mValue as M\n    }\n\n    override fun setValue(thisRef: Any, property: KProperty<*>, value: M) {\n        if (mValue == value) {\n            return\n        }\n        mValue = value\n        function(value)\n    }\n}\n```\n\n```kotlin:MyActivityUI\nclass MyActivityUI() :AnkoComponent<MainActivity>() {\n\n    var user: User? by ViewBinder {\n        textView.text = user?.name\n\n        // 省略\n    }\n\n    // 省略\n\n}\n```\n\n***\n\n参考記事\n[ViewBinder for Android in Kotlin](https://medium.com/making-internets/viewbinder-for-android-in-kotlin-abbeae67fab3)\n",
    "coediting": false,
    "created_at": "2016-07-28T15:21:10+09:00",
    "group": null,
    "id": "5a5e94f6c3aee111237f",
    "private": false,
    "tags": [
      {
        "name": "Android",
        "versions": []
      },
      {
        "name": "Kotlin",
        "versions": []
      },
      {
        "name": "anko",
        "versions": []
      }
    ],
    "title": "AnkoとData Bindingを同時に使えないので委譲プロパティを使ってなんとかする",
    "updated_at": "2016-07-28T15:21:10+09:00",
    "url": "http://qiita.com/kuroarizuka/items/5a5e94f6c3aee111237f",
    "user": {
      "description": "",
      "facebook_id": "",
      "followees_count": 2,
      "followers_count": 1,
      "github_login_name": "yamm800",
      "id": "kuroarizuka",
      "items_count": 5,
      "linkedin_id": "",
      "location": "",
      "name": "",
      "organization": "",
      "permanent_id": 40873,
      "profile_image_url": "https://pbs.twimg.com/profile_images/3757390416/21b5b15ce07c037fbcdc8a8e75a20390_normal.jpeg",
      "twitter_screen_name": "kuroarizuka",
      "website_url": ""
    }
  },
  {
    "rendered_body": "<p><a href=\"https://termux.com/files/vim-main_framed.png\" target=\"_blank\"><img src=\"https://termux.com/files/vim-main_framed.png\" alt=\"sample\"></a></p>\n\n\n\n<h1>\n<span id=\"termuxって\" class=\"fragment\"></span><a href=\"#termux%E3%81%A3%E3%81%A6\"><i class=\"fa fa-link\"></i></a><a href=\"https://termux.com/\">Termuxって</a>\n</h1>\n\n<p>簡単にいえばsandbox内でパッケージ管理ツールとTerminalを用意してくれるお手軽linux環境です。</p>\n\n<p>androidのrootを取らなくても素のandroidにtermuxをインストールするだけで</p>\n\n<p>golangとか<br>\npython3とか<br>\nnodejsとか<br>\nphpとか</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>\n➜  ~ go version\ngo version go1.7beta2 android/arm64\n➜  ~ python3 --version\nPython 3.5.2\n➜  ~ node --version\nv6.3.1\n➜  ~ php --version\nPHP 5.6.23 (cli) (built: Jul  1 2016 16:20:41)\n</pre></div></div>\n\n<p>neovimとか</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>\n$ nvim --version\nNVIM 0.1.5-dev\n</pre></div></div>\n\n<p>git とか</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>\n$ git --version\ngit version 2.9.2\n</pre></div></div>\n\n<p>がインストールできます</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>\n$ apt update &amp;&amp; apt install python python-dev golang gcc nodejs php  git neovim\n</pre></div></div>\n\n<p>以下のコマンドを使うとoh-my-zshを入れることも出来ました</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>\n$ sh -c \"$(curl -fsSL https://raw.github.com/skeevy420/oh-my-zsh/skeevy420-termux/tools/install.sh)\"\n</pre></div></div>\n\n<p>つまり<strong>開発環境が手元に揃います</strong><br>\ngolangも動くので(ただしgccも入れないとリンクエラーが出る？)<br>\npecoも入りますし。</p>\n\n<p><strong>勉強会に颯爽とAndroid端末とキーボードだけで乗り込んだらきっと注目の的です</strong></p>\n\n<h1>\n<span id=\"ただし問題点も幾つか\" class=\"fragment\"></span><a href=\"#%E3%81%9F%E3%81%A0%E3%81%97%E5%95%8F%E9%A1%8C%E7%82%B9%E3%82%82%E5%B9%BE%E3%81%A4%E3%81%8B\"><i class=\"fa fa-link\"></i></a>ただし問題点も幾つか</h1>\n\n<h2>\n<span id=\"sandbox内での動作なのでpathがヘンです\" class=\"fragment\"></span><a href=\"#sandbox%E5%86%85%E3%81%A7%E3%81%AE%E5%8B%95%E4%BD%9C%E3%81%AA%E3%81%AE%E3%81%A7path%E3%81%8C%E3%83%98%E3%83%B3%E3%81%A7%E3%81%99\"><i class=\"fa fa-link\"></i></a>sandbox内での動作なのでPATHがヘンです</h2>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>\nPATH=/data/data/com.termux/files/usr/bin\n</pre></div></div>\n\n<p><code>/bin/sh</code>固定を期待するスクリプトとか動かすのがちょっと面倒です</p>\n\n<h2>\n<span id=\"sshdも動くけどポートが8022\" class=\"fragment\"></span><a href=\"#sshd%E3%82%82%E5%8B%95%E3%81%8F%E3%81%91%E3%81%A9%E3%83%9D%E3%83%BC%E3%83%88%E3%81%8C8022\"><i class=\"fa fa-link\"></i></a>sshdも動くけどポートが8022</h2>\n\n<p>1024までのポートは使用禁止です。<br>\nsshdも常駐ではなく手元で起動する必要があります</p>\n\n<h3>\n<span id=\"sshd使用手順\" class=\"fragment\"></span><a href=\"#sshd%E4%BD%BF%E7%94%A8%E6%89%8B%E9%A0%86\"><i class=\"fa fa-link\"></i></a>sshd使用手順</h3>\n\n<p>PCにAndroidをつなぐなりpushbulletを使うなり、<br>\n自分の公開鍵をandroidのどこかにコピーします(sdカードとか)</p>\n\n<p>以下のようにAndroidの画面をいじって公開鍵を登録します</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>\n$ cat /path/to/id_rsa.pub &gt; ~/.ssh/authorized_keys\n$ chmod 600 ~/.ssh/authorized_keys\n$ sshd\n</pre></div></div>\n\n<p>後はネットワーク経由でpcからsshで入るだけです</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>\n❯ cat ~/.ssh/config                                                                                                                                                                                                                                                      Host 192.168.11.15 freetel(192.168.11.15)\n  HostName 192.168.11.15\n  IdentityFile ~/.ssh/id_rsa\n  Port 8022\n  ForwardAgent yes\n\n❯ ssh 192.168.11.15 \n</pre></div></div>\n\n<h2>\n<span id=\"常駐アプリ系はうごかせない\" class=\"fragment\"></span><a href=\"#%E5%B8%B8%E9%A7%90%E3%82%A2%E3%83%97%E3%83%AA%E7%B3%BB%E3%81%AF%E3%81%86%E3%81%94%E3%81%8B%E3%81%9B%E3%81%AA%E3%81%84\"><i class=\"fa fa-link\"></i></a>常駐アプリ系はうごかせない？</h2>\n\n<p>apacheとかはパッケージに用意されていませんでした。<br>\ngoでサーバアプリを書いたら動きましたが<br>\nandroidを放置しているといつの間にか止まっていました。</p>\n\n<ul>\n<li>crontabは効かない</li>\n</ul>\n\n<p>コマンドは用意されていますが反映はされないみたいです。</p>\n\n<h2>\n<span id=\"fish-シェルは動かない\" class=\"fragment\"></span><a href=\"#fish-%E3%82%B7%E3%82%A7%E3%83%AB%E3%81%AF%E5%8B%95%E3%81%8B%E3%81%AA%E3%81%84\"><i class=\"fa fa-link\"></i></a>fish シェルは動かない？</h2>\n\n<p>足りないパッケージがあるみたいで動かせますが不具合があるようでした</p>\n\n<p>以上です。visualStudioCodeを使ってきましたが<br>\nこれをきっかけにvimの勉強をまた始めたくなってきました。<br>\nconsoleって本当にいいものですね。</p>\n",
    "body": "\n![sample](https://termux.com/files/vim-main_framed.png)\n\n<!-- 電池が長持ちなのにお安い(Freetelのアウトレットセールで¥14k)androidに変わりました。\n移行のためにplay storeでインストール作業を進めていたらTermuxというのをリコメンドしてきました。  \n試しに触ってみたらその日のうちに速攻bluetoothキーボードをポチりました -->\n\n\n\n# [Termuxって](https://termux.com/)\n\n簡単にいえばsandbox内でパッケージ管理ツールとTerminalを用意してくれるお手軽linux環境です。\n\nandroidのrootを取らなくても素のandroidにtermuxをインストールするだけで\n\ngolangとか\npython3とか\nnodejsとか\nphpとか\n\n```\n➜  ~ go version\ngo version go1.7beta2 android/arm64\n➜  ~ python3 --version\nPython 3.5.2\n➜  ~ node --version\nv6.3.1\n➜  ~ php --version\nPHP 5.6.23 (cli) (built: Jul  1 2016 16:20:41)\n```\nneovimとか\n\n```\n$ nvim --version\nNVIM 0.1.5-dev\n```\n\ngit とか\n\n```\n$ git --version\ngit version 2.9.2\n```\n\nがインストールできます\n\n```\n$ apt update && apt install python python-dev golang gcc nodejs php  git neovim\n```\n\n以下のコマンドを使うとoh-my-zshを入れることも出来ました\n\n```\n$ sh -c \"$(curl -fsSL https://raw.github.com/skeevy420/oh-my-zsh/skeevy420-termux/tools/install.sh)\"\n```\n\nつまり**開発環境が手元に揃います**\ngolangも動くので(ただしgccも入れないとリンクエラーが出る？)\npecoも入りますし。\n\n**勉強会に颯爽とAndroid端末とキーボードだけで乗り込んだらきっと注目の的です**\n\n# ただし問題点も幾つか\n\n## sandbox内での動作なのでPATHがヘンです\n\n```\nPATH=/data/data/com.termux/files/usr/bin\n```\n\n``/bin/sh``固定を期待するスクリプトとか動かすのがちょっと面倒です\n\n## sshdも動くけどポートが8022\n\n1024までのポートは使用禁止です。\nsshdも常駐ではなく手元で起動する必要があります\n\n### sshd使用手順\n\nPCにAndroidをつなぐなりpushbulletを使うなり、\n自分の公開鍵をandroidのどこかにコピーします(sdカードとか)\n\n以下のようにAndroidの画面をいじって公開鍵を登録します\n\n```\n$ cat /path/to/id_rsa.pub > ~/.ssh/authorized_keys\n$ chmod 600 ~/.ssh/authorized_keys\n$ sshd\n```\n\n後はネットワーク経由でpcからsshで入るだけです\n\n```\n❯ cat ~/.ssh/config                                                                                                                                                                                                                                                      Host 192.168.11.15 freetel(192.168.11.15)\n  HostName 192.168.11.15\n  IdentityFile ~/.ssh/id_rsa\n  Port 8022\n  ForwardAgent yes\n\n❯ ssh 192.168.11.15 \n```\n\n\n\n## 常駐アプリ系はうごかせない？\n\napacheとかはパッケージに用意されていませんでした。\ngoでサーバアプリを書いたら動きましたが\nandroidを放置しているといつの間にか止まっていました。\n\n* crontabは効かない\n\nコマンドは用意されていますが反映はされないみたいです。\n\n## fish シェルは動かない？\n\n足りないパッケージがあるみたいで動かせますが不具合があるようでした\n\n以上です。visualStudioCodeを使ってきましたが\nこれをきっかけにvimの勉強をまた始めたくなってきました。\nconsoleって本当にいいものですね。\n\n\n\n\n\n\n\n\n",
    "coediting": false,
    "created_at": "2016-07-28T13:54:12+09:00",
    "group": null,
    "id": "243872263619a56d5a04",
    "private": false,
    "tags": [
      {
        "name": "Android",
        "versions": []
      },
      {
        "name": "Linux",
        "versions": []
      },
      {
        "name": "golang",
        "versions": []
      },
      {
        "name": "neovim",
        "versions": []
      },
      {
        "name": "Termux",
        "versions": []
      }
    ],
    "title": "Termuxでお手軽ポケットlinux開発環境(例えばnvim+golangが手元に)",
    "updated_at": "2016-07-28T20:11:03+09:00",
    "url": "http://qiita.com/m0a/items/243872263619a56d5a04",
    "user": {
      "description": "仙台の近くに引っ越します。\r\nお仲間探してます。",
      "facebook_id": "abe00makoto",
      "followees_count": 70,
      "followers_count": 49,
      "github_login_name": "m0a",
      "id": "m0a",
      "items_count": 52,
      "linkedin_id": "",
      "location": "near Sendai,japan",
      "name": "Makoto Abe",
      "organization": "",
      "permanent_id": 3844,
      "profile_image_url": "https://secure.gravatar.com/avatar/0c226924cdcd8af109784db909789871",
      "twitter_screen_name": "abe00makoto",
      "website_url": "https://m0a.github.io/"
    }
  },
  {
    "rendered_body": "\n<h3>\n<span id=\"環境\" class=\"fragment\"></span><a href=\"#%E7%92%B0%E5%A2%83\"><i class=\"fa fa-link\"></i></a>環境</h3>\n\n<p>Windows 10<br>\ncocos2d-x 3.12<br>\nNDK r10e</p>\n\n<h3>\n<span id=\"概要\" class=\"fragment\"></span><a href=\"#%E6%A6%82%E8%A6%81\"><i class=\"fa fa-link\"></i></a>概要</h3>\n\n<p>cocos2d-x 3.12ではNDK_TOOLCHAIN_VERSIONがclangで固定されているため、<br>\nstd::regexを使用しているところで実行時エラーが発生した。<br>\nちなみに3.10の場合は、NDK_TOOLCHAIN_VERSIONが4.9で実行されていた。</p>\n\n<h3>\n<span id=\"原因\" class=\"fragment\"></span><a href=\"#%E5%8E%9F%E5%9B%A0\"><i class=\"fa fa-link\"></i></a>原因</h3>\n\n<ul>\n<li>C:\\cocos2d-x-3.12\\tools\\cocos2d-console\\plugins\\plugin_compile\\build_android.py</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"py3\"><div class=\"highlight\"><pre>\n<span class=\"mi\">200</span><span class=\"p\">:</span>    <span class=\"k\">def</span> <span class=\"nf\">get_toolchain_version</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">ndk_root</span><span class=\"p\">,</span> <span class=\"n\">compile_obj</span><span class=\"p\">):</span>\n<span class=\"mi\">201</span><span class=\"p\">:</span>        <span class=\"k\">return</span> <span class=\"s\">'clang'</span>\n</pre></div></div>\n\n<p>ここで、clangに固定されているのが原因。</p>\n\n<h3>\n<span id=\"変更方法\" class=\"fragment\"></span><a href=\"#%E5%A4%89%E6%9B%B4%E6%96%B9%E6%B3%95\"><i class=\"fa fa-link\"></i></a>変更方法</h3>\n\n<p>直接このファイルを書き換える。</p>\n\n<div class=\"code-frame\" data-lang=\"py3\"><div class=\"highlight\"><pre>\n<span class=\"mi\">200</span><span class=\"p\">:</span>    <span class=\"k\">def</span> <span class=\"nf\">get_toolchain_version</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">ndk_root</span><span class=\"p\">,</span> <span class=\"n\">compile_obj</span><span class=\"p\">):</span>\n<span class=\"mi\">201</span><span class=\"p\">:</span><span class=\"c\">#        return 'clang'</span>\n<span class=\"mi\">202</span><span class=\"p\">:</span>        <span class=\"k\">return</span> <span class=\"s\">'4.9'</span>\n</pre></div></div>\n\n<p>3.12に対しては上記の変更を行った後、r10e, r11c, r12bのいずれの組み合わせでも正常にビルド＆実行できた。</p>\n",
    "body": "### 環境\nWindows 10\ncocos2d-x 3.12\nNDK r10e\n\n### 概要\ncocos2d-x 3.12ではNDK_TOOLCHAIN_VERSIONがclangで固定されているため、\nstd::regexを使用しているところで実行時エラーが発生した。\nちなみに3.10の場合は、NDK_TOOLCHAIN_VERSIONが4.9で実行されていた。\n\n### 原因\n\n- C:\\cocos2d-x-3.12\\tools\\cocos2d-console\\plugins\\plugin_compile\\build_android.py\n\n```py3: \n200:    def get_toolchain_version(self, ndk_root, compile_obj):\n201:        return 'clang'\n```\n\nここで、clangに固定されているのが原因。\n\n### 変更方法\n\n直接このファイルを書き換える。\n\n```py3: \n200:    def get_toolchain_version(self, ndk_root, compile_obj):\n201:#        return 'clang'\n202:        return '4.9'\n```\n\n3.12に対しては上記の変更を行った後、r10e, r11c, r12bのいずれの組み合わせでも正常にビルド＆実行できた。\n",
    "coediting": false,
    "created_at": "2016-07-28T13:43:56+09:00",
    "group": null,
    "id": "fba4af0d5ad3340cdab1",
    "private": false,
    "tags": [
      {
        "name": "Android",
        "versions": []
      },
      {
        "name": "cocos2d-x",
        "versions": []
      }
    ],
    "title": "Cocos2d-x v3.12のNDK_TOOLCHAIN_VERSIONを変更する",
    "updated_at": "2016-07-28T13:43:56+09:00",
    "url": "http://qiita.com/mingos/items/fba4af0d5ad3340cdab1",
    "user": {
      "description": "",
      "facebook_id": "",
      "followees_count": 0,
      "followers_count": 0,
      "github_login_name": "mingos",
      "id": "mingos",
      "items_count": 4,
      "linkedin_id": "",
      "location": "",
      "name": "Ryohei Watanabe",
      "organization": "",
      "permanent_id": 112002,
      "profile_image_url": "https://avatars.githubusercontent.com/u/19461?v=3",
      "twitter_screen_name": null,
      "website_url": ""
    }
  }
]